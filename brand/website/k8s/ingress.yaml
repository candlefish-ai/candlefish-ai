apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: candlefish-website-ingress
  labels:
    app: candlefish-website
    app.kubernetes.io/name: candlefish-website
    app.kubernetes.io/component: ingress
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-path: /api/health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "30"
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "5"
    alb.ingress.kubernetes.io/healthy-threshold-count: "2"
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "3"
    alb.ingress.kubernetes.io/certificate-arn: ${CERTIFICATE_ARN}
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-2017-01
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: "443"
    # Security headers
    alb.ingress.kubernetes.io/actions.response-headers: |
      {
        "type": "fixed-response",
        "fixedResponseConfig": {
          "statusCode": "200",
          "contentType": "text/plain",
          "responseHeaders": {
            "strict-transport-security": "max-age=31536000; includeSubDomains",
            "x-content-type-options": "nosniff",
            "x-frame-options": "DENY",
            "x-xss-protection": "1; mode=block",
            "referrer-policy": "strict-origin-when-cross-origin",
            "content-security-policy": "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'none'"
          }
        }
      }
    # Rate limiting
    alb.ingress.kubernetes.io/wafv2-acl-arn: ${WAF_ACL_ARN}
spec:
  rules:
  - host: candlefish.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: candlefish-website-service
            port:
              number: 80
  - host: www.candlefish.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: candlefish-website-service
            port:
              number: 80
  tls:
  - hosts:
    - candlefish.ai
    - www.candlefish.ai
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: candlefish-website-netpol
  labels:
    app: candlefish-website
    app.kubernetes.io/name: candlefish-website
    app.kubernetes.io/component: network-policy
spec:
  podSelector:
    matchLabels:
      app: candlefish-website
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - namespaceSelector:
        matchLabels:
          name: aws-load-balancer-controller
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS outbound
    - protocol: TCP
      port: 80   # HTTP outbound
    - protocol: TCP
      port: 5432 # PostgreSQL
    - protocol: TCP
      port: 6379 # Redis
  - to: []
    ports:
    - protocol: UDP
      port: 53   # DNS