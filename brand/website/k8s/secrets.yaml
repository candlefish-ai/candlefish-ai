apiVersion: v1
kind: ServiceAccount
metadata:
  name: candlefish-website-sa
  labels:
    app: candlefish-website
    app.kubernetes.io/name: candlefish-website
    app.kubernetes.io/component: service-account
  annotations:
    eks.amazonaws.com/role-arn: ${SERVICE_ACCOUNT_ROLE_ARN}
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  labels:
    app: candlefish-website
    app.kubernetes.io/name: candlefish-website
    app.kubernetes.io/component: secret-store
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        serviceAccount:
          name: candlefish-website-sa
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: app-secrets
  labels:
    app: candlefish-website
    app.kubernetes.io/name: candlefish-website
    app.kubernetes.io/component: external-secret
spec:
  refreshInterval: 300s  # Refresh every 5 minutes
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: app-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        database-url: "{{ .DATABASE_URL }}"
        redis-url: "{{ .REDIS_URL }}"
        jwt-secret: "{{ .JWT_SECRET }}"
  data:
  - secretKey: DATABASE_URL
    remoteRef:
      key: ${ENVIRONMENT}/candlefish-website/app-secrets
      property: DATABASE_URL
  - secretKey: REDIS_URL
    remoteRef:
      key: ${ENVIRONMENT}/candlefish-website/app-secrets
      property: REDIS_URL
  - secretKey: JWT_SECRET
    remoteRef:
      key: ${ENVIRONMENT}/candlefish-website/app-secrets
      property: JWT_SECRET
---
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  labels:
    app: candlefish-website
    app.kubernetes.io/name: candlefish-website
    app.kubernetes.io/component: tls-secret
type: kubernetes.io/tls
data:
  # TLS certificate and key will be managed by cert-manager
  tls.crt: ""
  tls.key: ""