// PromoterOS Database Schema
// Multi-tenant event management system

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== CORE ENTITIES ====================

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  venues        Venue[]
  memberships   Membership[]
  eventRequests EventRequest[]
  events        Event[]
  taskTemplates TaskTemplate[]
  auditLogs     AuditLog[]

  @@index([slug])
}

model Venue {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  timezone       String   @default("America/Denver")
  address        String?
  city           String?
  state          String?
  zipCode        String?
  capacity       Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization  Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  eventRequests EventRequest[]
  events        Event[]

  @@unique([organizationId, slug])
  @@index([organizationId])

  slug String
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  memberships   Membership[]
  decisionLogs  DecisionLog[]
  eventTasks    EventTask[]
  auditLogs     AuditLog[]

  @@index([email])
}

model Membership {
  id             String         @id @default(cuid())
  userId         String
  organizationId String
  role           MembershipRole
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([userId])
}

// ==================== EVENT MANAGEMENT ====================

model EventRequest {
  id                 String              @id @default(cuid())
  organizationId     String
  venueId            String
  requesterName      String
  requesterEmail     String
  requesterPhone     String?
  requesterCompany   String?
  artistName         String
  title              String
  description        String?
  dateStart          DateTime
  dateEnd            DateTime
  expectedAttendance Int?
  budgetMin          Int?
  budgetMax          Int?
  splitNotes         String?
  techNeeds          String?
  status             EventRequestStatus  @default(NEW)
  submittedAt        DateTime            @default(now())
  reviewedAt         DateTime?
  decidedAt          DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relations
  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  venue        Venue         @relation(fields: [venueId], references: [id], onDelete: Cascade)
  decisionLogs DecisionLog[]
  event        Event?

  @@index([organizationId, status])
  @@index([venueId])
  @@index([requesterEmail])
}

model Event {
  id               String      @id @default(cuid())
  organizationId   String
  venueId          String
  eventRequestId   String?     @unique
  title            String
  description      String?
  date             DateTime
  doorsAt          DateTime?
  showAt           DateTime?
  endAt            DateTime?
  status           EventStatus @default(DRAFT)
  capacityOverride Int?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  organization Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  venue        Venue         @relation(fields: [venueId], references: [id], onDelete: Cascade)
  eventRequest EventRequest? @relation(fields: [eventRequestId], references: [id], onDelete: SetNull)
  tasks        EventTask[]
  dealTerms    DealTerm[]

  @@index([organizationId, date])
  @@index([venueId, date])
  @@index([status])
}

// ==================== TASKS & WORKFLOW ====================

model TaskTemplate {
  id             String   @id @default(cuid())
  organizationId String
  title          String
  description    String?
  defaultDueDays Int      @default(0) // Days before event
  order          Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model EventTask {
  id             String    @id @default(cuid())
  eventId        String
  title          String
  description    String?
  done           Boolean   @default(false)
  assigneeUserId String?
  dueAt          DateTime?
  order          Int       @default(0)
  completedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  event    Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  assignee User?  @relation(fields: [assigneeUserId], references: [id], onDelete: SetNull)

  @@index([eventId])
  @@index([assigneeUserId])
}

// ==================== BUSINESS LOGIC ====================

model DecisionLog {
  id             String   @id @default(cuid())
  eventRequestId String
  userId         String
  action         String
  note           String?
  metadata       Json?
  createdAt      DateTime @default(now())

  // Relations
  eventRequest EventRequest @relation(fields: [eventRequestId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])

  @@index([eventRequestId])
  @@index([userId])
}

model DealTerm {
  id           String       @id @default(cuid())
  eventId      String       @unique
  type         DealType
  flatAmount   Int?
  splitPercent Int?
  notes        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

// ==================== SYSTEM ====================

model AuditLog {
  id             String   @id @default(cuid())
  organizationId String
  actorUserId    String
  action         String
  entityType     String
  entityId       String
  meta           Json?
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  actor        User         @relation(fields: [actorUserId], references: [id])

  @@index([organizationId, createdAt])
  @@index([actorUserId])
  @@index([entityType, entityId])
}

model EmailQueue {
  id          String       @id @default(cuid())
  to          String
  subject     String
  template    String
  payload     Json
  status      EmailStatus  @default(QUEUED)
  attempts    Int          @default(0)
  lastError   String?
  scheduledAt DateTime     @default(now())
  sentAt      DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([status, scheduledAt])
}

// ==================== ENUMS ====================

enum MembershipRole {
  OWNER
  MANAGER
  STAFF
  PROMOTER
}

enum EventRequestStatus {
  NEW
  REVIEW
  APPROVED
  DECLINED
  SCHEDULED
}

enum EventStatus {
  DRAFT
  CONFIRMED
  CANCELED
}

enum DealType {
  FLAT
  SPLIT
  GUARANTEE_PLUS
}

enum EmailStatus {
  QUEUED
  SENDING
  SENT
  FAILED
}
