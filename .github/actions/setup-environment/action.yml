name: 'Setup Environment'
description: 'Setup build environment with perfect caching'
inputs:
  node-version:
    description: 'Node.js version'
    required: false
    default: '20'
  python-version:
    description: 'Python version'
    required: false
    default: '3.12'
  cache-key:
    description: 'Cache key prefix'
    required: true
  project-type:
    description: 'Type of project (webapp, enterprise, business, client, mobile)'
    required: true

runs:
  using: 'composite'
  steps:
    # Setup pnpm first (required for Node.js caching)
    - name: Setup pnpm
      if: inputs.project-type != 'python-only'
      uses: pnpm/action-setup@v2
      with:
        version: 8.15.6
        run_install: false

    # Node.js setup with caching
    - name: Setup Node.js
      if: inputs.project-type != 'python-only'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: 'pnpm'
        cache-dependency-path: '**/pnpm-lock.yaml'

    # Python setup with caching
    - name: Setup Python
      if: inputs.project-type == 'enterprise' || inputs.project-type == 'python-only'
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
        cache: 'pip'

    # Rust setup with caching (for native modules)
    - name: Setup Rust
      if: inputs.project-type == 'enterprise'
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        components: rustfmt, clippy

    # Go setup with caching
    - name: Setup Go
      if: inputs.project-type == 'enterprise'
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        cache: true

    # Global tool caching
    - name: Cache global tools
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          ~/.pnpm-store
          ~/.cache/pip
          ~/.cargo
          ~/go/pkg/mod
        key: global-tools-${{ inputs.cache-key }}
        restore-keys: |
          global-tools-

    # Turbo cache setup
    - name: Setup Turbo cache
      if: inputs.project-type != 'python-only'
      shell: bash
      run: |
        echo "TURBO_TOKEN=${{ env.TURBO_TOKEN }}" >> $GITHUB_ENV
        echo "TURBO_TEAM=candlefish" >> $GITHUB_ENV
        echo "TURBO_REMOTE_ONLY=true" >> $GITHUB_ENV

    # Docker layer caching
    - name: Set up Docker Buildx
      if: inputs.project-type == 'enterprise' || inputs.project-type == 'mobile'
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:master
          network=host

    - name: Cache Docker layers
      if: inputs.project-type == 'enterprise' || inputs.project-type == 'mobile'
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: buildx-${{ inputs.cache-key }}
        restore-keys: |
          buildx-

    # Browser binary caching for E2E tests
    - name: Cache Playwright browsers
      if: inputs.project-type == 'webapp' || inputs.project-type == 'enterprise'
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: playwright-${{ inputs.cache-key }}
        restore-keys: |
          playwright-

    # Mobile-specific caching
    - name: Cache CocoaPods
      if: inputs.project-type == 'mobile' && runner.os == 'macOS'
      uses: actions/cache@v4
      with:
        path: ~/Library/Caches/CocoaPods
        key: cocoapods-${{ inputs.cache-key }}
        restore-keys: |
          cocoapods-

    - name: Cache Gradle
      if: inputs.project-type == 'mobile'
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: gradle-${{ inputs.cache-key }}
        restore-keys: |
          gradle-
