name: Deploy Paintbox Application

on:
  push:
    branches: [main, feat/paintbox-github-actions]
    paths:
      - 'projects/paintbox/**'
      - '.github/workflows/paintbox-deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'projects/paintbox/**'
      - '.github/workflows/paintbox-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy to environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      deployment_type:
        description: 'Deployment type'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard
          - blue-green
          - canary

env:
  NODE_VERSION: '18'
  WORKING_DIRECTORY: 'projects/paintbox'
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_PAINTBOX }}
  NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
  NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID_PAINTBOX }}

jobs:
  # Quality Assurance Pipeline
  test:
    name: Quality Assurance
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feat/paintbox-github-actions'))

    strategy:
      matrix:
        test-type: [lint, typecheck, unit, excel-parity, integration, security]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci --prefer-offline --no-audit

      - name: Run linting
        if: matrix.test-type == 'lint'
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run lint

      - name: Run type checking
        if: matrix.test-type == 'typecheck'
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npx tsc --noEmit

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run test:coverage

      - name: Run Excel parity tests
        if: matrix.test-type == 'excel-parity'
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          npm run test:excel-basic
          npm run test:excel-integration
          npm run test:excel-parity
          npm run test:excel-validation

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          npm run test:integration
          npm run test:api
          npm run test:components

      - name: Run security tests
        if: matrix.test-type == 'security'
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          npm run test:security
          npm audit --audit-level moderate

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            ${{ env.WORKING_DIRECTORY }}/coverage/
            ${{ env.WORKING_DIRECTORY }}/test-results/

  # Build and Optimization
  build:
    name: Build & Optimize
    runs-on: ubuntu-latest
    needs: test
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')

    outputs:
      build-hash: ${{ steps.build-info.outputs.hash }}
      bundle-size: ${{ steps.build-info.outputs.size }}
      image-tag: ${{ steps.docker.outputs.image-tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci --prefer-offline --no-audit

      - name: Configure environment
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # Create .env.production for build
          echo "NODE_ENV=production" > .env.production
          echo "NEXT_TELEMETRY_DISABLED=1" >> .env.production
          echo "NEXT_PUBLIC_APP_VERSION=${{ github.sha }}" >> .env.production

      - name: Build application
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          npm run build:deploy
        env:
          NODE_ENV: production
          NODE_OPTIONS: '--max-old-space-size=8192'

      - name: Generate build info
        id: build-info
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          if [ -d ".next" ]; then
            BUILD_HASH=$(find .next -type f -name "*.js" -o -name "*.css" | head -1 | xargs sha256sum 2>/dev/null | cut -d' ' -f1 | head -c 8 || echo "nobuild")
            BUNDLE_SIZE=$(du -sh .next 2>/dev/null | cut -f1 || echo "0K")
          else
            BUILD_HASH="nobuild"
            BUNDLE_SIZE="0K"
          fi
          echo "hash=${BUILD_HASH}" >> $GITHUB_OUTPUT
          echo "size=${BUNDLE_SIZE}" >> $GITHUB_OUTPUT
          echo "Build hash: ${BUILD_HASH}"
          echo "Bundle size: ${BUNDLE_SIZE}"

      - name: Build Docker image
        id: docker
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          IMAGE_TAG="paintbox:${{ github.sha }}"
          docker build -t $IMAGE_TAG -f Dockerfile.fly.simple .
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Docker image built: ${IMAGE_TAG}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ steps.build-info.outputs.hash }}
          path: |
            ${{ env.WORKING_DIRECTORY }}/.next/
            ${{ env.WORKING_DIRECTORY }}/public/
          retention-days: 7

  # Deploy to Staging (Fly.io)
  deploy-staging-fly:
    name: Deploy to Staging (Fly.io)
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      always() &&
      (needs.build.result == 'success') &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feat/paintbox-github-actions' ||
       (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'))

    environment:
      name: staging-fly
      url: https://paintbox-app.fly.dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ needs.build.outputs.build-hash }}
          path: ${{ env.WORKING_DIRECTORY }}/.next/

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # Configure Fly.io app
          flyctl auth token ${{ secrets.FLY_API_TOKEN }}

          # Deploy application
          flyctl deploy \
            --config fly.toml \
            --dockerfile Dockerfile.fly.simple \
            --strategy rolling \
            --wait-timeout 300
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Health check
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # Wait for deployment to be ready
          sleep 30

          # Check application health
          for i in {1..5}; do
            if curl -f https://paintbox-app.fly.dev/api/health; then
              echo "Health check passed"
              break
            else
              echo "Health check failed, attempt $i/5"
              sleep 15
            fi
          done

      - name: Run smoke tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # Test critical endpoints
          curl -f https://paintbox-app.fly.dev || exit 1
          curl -f https://paintbox-app.fly.dev/api/health || exit 1
          echo "Smoke tests passed"

  # Deploy to Staging (Vercel)
  deploy-staging-vercel:
    name: Deploy to Staging (Vercel)
    runs-on: ubuntu-latest
    needs: [build]
    if: |
      always() &&
      (needs.build.result == 'success') &&
      (github.event_name == 'pull_request' ||
       (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'))

    environment:
      name: staging-vercel
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Pull Vercel Environment
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build with Vercel
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel Preview
        id: deploy
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=${DEPLOYMENT_URL}" >> $GITHUB_OUTPUT
          echo "Deployed to: ${DEPLOYMENT_URL}"

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🎨 **Paintbox Preview Deployment Ready**

              **Preview URL:** ${{ steps.deploy.outputs.url }}
              **Bundle Size:** ${{ needs.build.outputs.bundle-size }}
              **Build Hash:** ${{ needs.build.outputs.build-hash }}

              Critical Features to Test:
              - Excel formula calculations
              - Salesforce integration
              - Company Cam photo management
              - PDF generation
              - Offline mode`
            })

  # Production Deployment
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging-fly]
    if: |
      always() &&
      (needs.build.result == 'success') &&
      (needs.deploy-staging-fly.result == 'success') &&
      (github.ref == 'refs/heads/main' ||
       (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'))

    environment:
      name: production
      url: https://paintbox.vercel.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Pull Vercel Environment
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build with Vercel
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel Production
        id: deploy
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=${DEPLOYMENT_URL}" >> $GITHUB_OUTPUT
          echo "Deployed to production: ${DEPLOYMENT_URL}"

      - name: Run production health checks
        run: |
          # Wait for deployment to propagate
          sleep 60

          # Health check with retries
          for i in {1..5}; do
            if curl -f https://paintbox.vercel.app/api/health; then
              echo "Production health check passed"
              break
            else
              echo "Health check failed, attempt $i/5"
              sleep 30
            fi
          done

      - name: Notify deployment status
        if: success()
        run: |
          echo "✅ Paintbox production deployment successful!"
          echo "🌐 Live at: https://paintbox.vercel.app"
          echo "📦 Bundle size: ${{ needs.build.outputs.bundle-size }}"
          echo "🔧 Build hash: ${{ needs.build.outputs.build-hash }}"

      - name: Create deployment issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Paintbox Production Deployment Failed',
              body: `Production deployment failed for commit ${{ github.sha }}.

              **Build Hash:** ${{ needs.build.outputs.build-hash }}
              **Workflow:** ${{ github.workflow }}
              **Run:** ${{ github.run_id }}

              Critical systems affected:
              - Excel calculations engine
              - Salesforce sync
              - Company Cam integration

              Please investigate immediately.`,
              labels: ['deployment', 'production', 'urgent', 'paintbox']
            })

  # Performance Monitoring
  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    needs: [deploy-staging-fly]
    if: always() && needs.deploy-staging-fly.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          lhci autorun \
            --collect.url=https://paintbox-app.fly.dev \
            --collect.url=https://paintbox-app.fly.dev/estimate/new \
            --collect.numberOfRuns=3 \
            --assert.preset=lighthouse:recommended \
            --assert.assertions.categories:performance=0.9 \
            --assert.assertions.categories:accessibility=0.9 \
            --assert.assertions.categories:best-practices=0.9 \
            --assert.assertions.categories:seo=0.9

      - name: Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: ${{ env.WORKING_DIRECTORY }}/.lighthouseci/

  # Cleanup
  cleanup:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            const oldArtifacts = artifacts.data.artifacts
              .filter(artifact =>
                artifact.name.startsWith('build-') ||
                artifact.name.startsWith('test-results-')
              )
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))
              .slice(20); // Keep latest 20 artifacts

            for (const artifact of oldArtifacts) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
              console.log(`Deleted artifact: ${artifact.name}`);
            }
