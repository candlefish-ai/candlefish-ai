name: Parallel Claude Sessions Fixed

on:
  workflow_dispatch:
    inputs:
      sessions:
        description: 'Number of parallel Claude sessions'
        required: true
        default: '3'
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '4'
          - '5'
      task:
        description: 'Task to execute in parallel'
        required: true
        default: 'test'
        type: choice
        options:
          - 'test'
          - 'lint'
          - 'build'
          - 'deploy'
          - 'analyze'

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          sessions='${{ github.event.inputs.sessions }}'
          # Create proper JSON format with compact output
          matrix=$(echo "[$(seq -s, 1 $sessions)]" | jq -c '{session: .}')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Generated matrix: $matrix"

  parallel-claude:
    needs: setup-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
      max-parallel: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
        continue-on-error: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
        continue-on-error: true

      - name: Install dependencies
        run: |
          if [ -f "package.json" ]; then
            npm ci || npm install
          fi
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt || true
          fi
        continue-on-error: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
        continue-on-error: true

      - name: Run task in session ${{ matrix.session }}
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          SESSION_ID: ${{ matrix.session }}
          TASK: ${{ github.event.inputs.task }}
        run: |
          echo "Running $TASK in session $SESSION_ID"

          case $TASK in
            test)
              if [ -f "package.json" ] && grep -q '"test"' package.json; then
                npm test -- --shard=$SESSION_ID/${{ github.event.inputs.sessions }} || true
              else
                echo "No test configuration found"
              fi
              ;;
            lint)
              if [ -f "package.json" ] && grep -q '"lint"' package.json; then
                npm run lint -- --parallel || true
              else
                echo "No lint configuration found"
              fi
              ;;
            build)
              if [ -f "package.json" ] && grep -q '"build"' package.json; then
                npm run build -- --parallel || true
              else
                echo "No build configuration found"
              fi
              ;;
            deploy)
              echo "Deploy task for session $SESSION_ID (dry run)"
              ;;
            analyze)
              if [ -f "package.json" ] && grep -q '"analyze"' package.json; then
                npm run analyze -- --shard=$SESSION_ID/${{ github.event.inputs.sessions }} || true
              else
                echo "No analyze configuration found"
              fi
              ;;
          esac

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: session-${{ matrix.session }}-results
          path: |
            coverage/
            dist/
            reports/
          retention-days: 7
        continue-on-error: true

  merge-results:
    needs: parallel-claude
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: merged-results
        continue-on-error: true

      - name: Merge test coverage
        run: |
          if command -v npx &> /dev/null && [ -d "merged-results" ]; then
            npx nyc merge merged-results/*/coverage coverage-merged || true
            npx nyc report --reporter=html --reporter=text --temp-dir=coverage-merged || true
          else
            echo "No coverage to merge or tools not available"
          fi
        continue-on-error: true

      - name: Upload merged coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: merged-coverage
          path: coverage-merged/
          retention-days: 30
        continue-on-error: true
