name: Parallel Claude Sessions (Fixed)

on:
  workflow_dispatch:
    inputs:
      sessions:
        description: 'Number of parallel Claude sessions'
        required: true
        default: '3'
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '4'
          - '5'
      task:
        description: 'Task to execute in parallel'
        required: true
        default: 'test'
        type: choice
        options:
          - 'test'
          - 'lint'
          - 'build'
          - 'deploy'
          - 'analyze'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          sessions='${{ github.event.inputs.sessions }}'
          matrix=$(seq 1 $sessions | jq -R . | jq -s '{session: .}')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  parallel-claude:
    needs: setup-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
      max-parallel: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache/pip
            node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/requirements.txt') }}
          
      - name: Install dependencies
        run: |
          # Install Node dependencies if package.json exists
          if [ -f package.json ]; then
            npm ci || npm install
          fi
          
          # Install Python dependencies if requirements.txt exists
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          
      - name: Execute Claude Task - Session ${{ matrix.session }}
        id: claude-task
        env:
          CLAUDE_SESSION_ID: ${{ matrix.session }}
          CLAUDE_TASK: ${{ github.event.inputs.task }}
        run: |
          echo "Starting Claude session ${{ matrix.session }} for task: ${{ github.event.inputs.task }}"
          
          case "${{ github.event.inputs.task }}" in
            test)
              echo "Running tests in parallel session ${{ matrix.session }}..."
              if [ -f package.json ] && grep -q "\"test\"" package.json; then
                npm test || true
              fi
              ;;
            lint)
              echo "Running linting in parallel session ${{ matrix.session }}..."
              if [ -f package.json ] && grep -q "\"lint\"" package.json; then
                npm run lint || true
              fi
              ;;
            build)
              echo "Building project in parallel session ${{ matrix.session }}..."
              if [ -f package.json ] && grep -q "\"build\"" package.json; then
                npm run build || true
              fi
              ;;
            analyze)
              echo "Analyzing code in parallel session ${{ matrix.session }}..."
              # Add code analysis commands here
              ;;
            deploy)
              echo "Deploying from parallel session ${{ matrix.session }}..."
              # Add deployment commands here
              ;;
          esac
          
      - name: Upload session results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: claude-session-${{ matrix.session }}-results
          path: |
            coverage/
            test-results/
            build/
            dist/
          if-no-files-found: ignore
          
  merge-results:
    needs: parallel-claude
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: claude-session-*-results
          merge-multiple: true
          
      - name: Merge test coverage
        run: |
          echo "Merging test coverage from all parallel sessions..."
          # Add coverage merging logic here
          
      - name: Generate summary report
        run: |
          echo "## Parallel Claude Sessions Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Sessions Run**: ${{ github.event.inputs.sessions }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Task Executed**: ${{ github.event.inputs.task }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: Completed" >> $GITHUB_STEP_SUMMARY
          
      - name: Upload merged results
        uses: actions/upload-artifact@v4
        with:
          name: merged-claude-results
          path: |
            coverage/
            test-results/
          if-no-files-found: ignore