name: Production Deployment Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/*.yml'
      - '!.github/workflows/production-deploy.yml'
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Deployment target'
        required: true
        type: choice
        options:
          - all
          - website
          - mobile-dashboard
          - analytics-dashboard
          - paintbox
          - rtpm-api
          - tyler-setup
      environment:
        description: 'Environment'
        required: true
        type: choice
        default: 'production'
        options:
          - production
          - staging
          - development

permissions:
  contents: read
  id-token: write
  deployments: write
  packages: write

concurrency:
  group: production-deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # ============================================
  # STAGE 1: Build Matrix & Dependency Detection
  # ============================================
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.changes.outputs.matrix }}
      deploy_targets: ${{ steps.changes.outputs.deploy_targets }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed projects
        id: changes
        run: |
          # Initialize deploy targets
          deploy_targets='[]'
          matrix='{"include":[]}'

          # Check if we should deploy everything
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.deploy_target }}" == "all" ]]; then
            deploy_targets='["website","mobile-dashboard","analytics-dashboard","paintbox","rtpm-api","tyler-setup"]'
            matrix='{"include":[
              {"project":"website","path":"apps/website","runtime":"node","deploy":"netlify"},
              {"project":"mobile-dashboard","path":"apps/mobile-dashboard","runtime":"expo","deploy":"eas"},
              {"project":"analytics-dashboard","path":"apps/analytics-dashboard","runtime":"node","deploy":"vercel"},
              {"project":"paintbox","path":"projects/paintbox","runtime":"node","deploy":"fly"},
              {"project":"rtpm-api","path":"deployment/fly/rtpm-api","runtime":"python","deploy":"fly"},
              {"project":"tyler-setup","path":"packages/tyler-setup","runtime":"node","deploy":"aws"}
            ]}'
          else
            # Detect changes using git diff
            changed_files=$(git diff --name-only HEAD~1 HEAD 2>/dev/null || git diff --name-only $(git merge-base origin/main HEAD) HEAD)

            targets=()
            includes=()

            # Check each project for changes
            if echo "$changed_files" | grep -q "apps/website/"; then
              targets+=("website")
              includes+=('{"project":"website","path":"apps/website","runtime":"node","deploy":"netlify"}')
            fi

            if echo "$changed_files" | grep -q "apps/mobile-dashboard/"; then
              targets+=("mobile-dashboard")
              includes+=('{"project":"mobile-dashboard","path":"apps/mobile-dashboard","runtime":"expo","deploy":"eas"}')
            fi

            if echo "$changed_files" | grep -q "apps/analytics-dashboard/"; then
              targets+=("analytics-dashboard")
              includes+=('{"project":"analytics-dashboard","path":"apps/analytics-dashboard","runtime":"node","deploy":"vercel"}')
            fi

            if echo "$changed_files" | grep -q "projects/paintbox/"; then
              targets+=("paintbox")
              includes+=('{"project":"paintbox","path":"projects/paintbox","runtime":"node","deploy":"fly"}')
            fi

            if echo "$changed_files" | grep -q "deployment/fly/rtpm-api/\|projects/rtpm/"; then
              targets+=("rtpm-api")
              includes+=('{"project":"rtpm-api","path":"deployment/fly/rtpm-api","runtime":"python","deploy":"fly"}')
            fi

            if echo "$changed_files" | grep -q "packages/tyler-setup/"; then
              targets+=("tyler-setup")
              includes+=('{"project":"tyler-setup","path":"packages/tyler-setup","runtime":"node","deploy":"aws"}')
            fi

            # Check shared packages that affect multiple projects
            if echo "$changed_files" | grep -q "packages/ui-components/"; then
              targets+=("website" "analytics-dashboard")
              includes+=('{"project":"website","path":"apps/website","runtime":"node","deploy":"netlify"}')
              includes+=('{"project":"analytics-dashboard","path":"apps/analytics-dashboard","runtime":"node","deploy":"vercel"}')
            fi

            # Create JSON arrays
            if [ ${#targets[@]} -gt 0 ]; then
              deploy_targets=$(printf '"%s",' "${targets[@]}" | sed 's/,$//')
              deploy_targets="[$deploy_targets]"

              include_json=$(printf '%s,' "${includes[@]}" | sed 's/,$//')
              matrix="{\"include\":[$include_json]}"
            fi
          fi

          echo "deploy_targets=$deploy_targets" >> $GITHUB_OUTPUT
          echo "matrix<<EOF" >> $GITHUB_OUTPUT
          echo "$matrix" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "Deployment targets: $deploy_targets"

  # ============================================
  # STAGE 2: Parallel Build & Test
  # ============================================
  build-and-test:
    needs: detect-changes
    if: needs.detect-changes.outputs.deploy_targets != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        if: matrix.runtime == 'node' || matrix.runtime == 'expo'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Setup Python
        if: matrix.runtime == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Setup pnpm
        if: matrix.runtime == 'node' || matrix.runtime == 'expo'
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            ~/.cache/pip
            **/node_modules
            **/.next/cache
          key: ${{ runner.os }}-${{ matrix.project }}-${{ hashFiles('**/pnpm-lock.yaml', '**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.project }}-

      # Node/React/Next.js projects
      - name: Install Node dependencies
        if: matrix.runtime == 'node'
        working-directory: ${{ matrix.path }}
        run: |
          pnpm install --frozen-lockfile

      - name: Run tests
        if: matrix.runtime == 'node'
        working-directory: ${{ matrix.path }}
        run: |
          pnpm test --passWithNoTests || true
          pnpm lint || true
          pnpm typecheck || true

      - name: Build Node project
        if: matrix.runtime == 'node'
        working-directory: ${{ matrix.path }}
        run: |
          pnpm build

      # Expo/React Native projects
      - name: Install Expo dependencies
        if: matrix.runtime == 'expo'
        working-directory: ${{ matrix.path }}
        run: |
          pnpm install --frozen-lockfile
          npx expo install --fix

      - name: Build Expo project
        if: matrix.runtime == 'expo'
        working-directory: ${{ matrix.path }}
        run: |
          npx expo export --platform all

      # Python projects
      - name: Install Python dependencies
        if: matrix.runtime == 'python'
        working-directory: ${{ matrix.path }}
        run: |
          pip install -r requirements.txt || pip install -r requirements-simplified.txt

      - name: Run Python tests
        if: matrix.runtime == 'python'
        working-directory: ${{ matrix.path }}
        run: |
          python -m pytest tests/ || true

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.project }}
          path: |
            ${{ matrix.path }}/dist
            ${{ matrix.path }}/build
            ${{ matrix.path }}/.next
            ${{ matrix.path }}/out
          retention-days: 7

  # ============================================
  # STAGE 3: Security & Quality Checks
  # ============================================
  security-scan:
    needs: detect-changes
    if: needs.detect-changes.outputs.deploy_targets != '[]'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # ============================================
  # STAGE 4: Deploy to Production
  # ============================================
  deploy:
    needs: [detect-changes, build-and-test, security-scan]
    if: needs.detect-changes.outputs.deploy_targets != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.project }}
          path: ${{ matrix.path }}

      - name: Configure AWS credentials
        if: matrix.deploy == 'aws' || always()
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: deploy-${{ matrix.project }}-${{ github.run_id }}
          aws-region: us-east-1

      - name: Get deployment secrets
        id: secrets
        run: |
          # Get secrets based on deployment target
          case "${{ matrix.deploy }}" in
            netlify)
              SECRET=$(aws secretsmanager get-secret-value --secret-id "candlefish/netlify/token" --query SecretString --output text)
              echo "::add-mask::$SECRET"
              echo "NETLIFY_AUTH_TOKEN=$SECRET" >> $GITHUB_ENV
              ;;
            fly)
              SECRET=$(aws secretsmanager get-secret-value --secret-id "candlefish/fly/token" --query SecretString --output text)
              echo "::add-mask::$SECRET"
              echo "FLY_API_TOKEN=$SECRET" >> $GITHUB_ENV
              ;;
            vercel)
              SECRET=$(aws secretsmanager get-secret-value --secret-id "candlefish/vercel/token" --query SecretString --output text)
              echo "::add-mask::$SECRET"
              echo "VERCEL_TOKEN=$SECRET" >> $GITHUB_ENV
              ;;
            eas)
              SECRET=$(aws secretsmanager get-secret-value --secret-id "candlefish/expo/token" --query SecretString --output text)
              echo "::add-mask::$SECRET"
              echo "EXPO_TOKEN=$SECRET" >> $GITHUB_ENV
              ;;
          esac

      # Deploy to Netlify
      - name: Deploy to Netlify
        if: matrix.deploy == 'netlify'
        id: deploy-netlify
        working-directory: ${{ matrix.path }}
        run: |
          npm install -g netlify-cli

          # Deploy based on environment
          if [[ "${{ github.event.inputs.environment || 'production' }}" == "production" ]]; then
            netlify deploy --prod --dir=dist --site=${{ secrets.NETLIFY_SITE_ID }}
            echo "url=https://candlefish.ai" >> $GITHUB_OUTPUT
          else
            DEPLOY_URL=$(netlify deploy --dir=dist --site=${{ secrets.NETLIFY_SITE_ID }} --json | jq -r '.deploy_url')
            echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          fi

      # Deploy to Fly.io
      - name: Deploy to Fly.io
        if: matrix.deploy == 'fly'
        id: deploy-fly
        working-directory: ${{ matrix.path }}
        run: |
          curl -L https://fly.io/install.sh | sh
          export PATH="$HOME/.fly/bin:$PATH"

          # Deploy based on project
          case "${{ matrix.project }}" in
            paintbox)
              fly deploy --app candlefish-paintbox --config fly.toml
              echo "url=https://paintbox.candlefish.ai" >> $GITHUB_OUTPUT
              ;;
            rtpm-api)
              fly deploy --app rtpm-api-candlefish --config fly.toml
              echo "url=https://rtpm-api.candlefish.ai" >> $GITHUB_OUTPUT
              ;;
          esac

      # Deploy to Vercel
      - name: Deploy to Vercel
        if: matrix.deploy == 'vercel'
        id: deploy-vercel
        working-directory: ${{ matrix.path }}
        run: |
          npm install -g vercel

          if [[ "${{ github.event.inputs.environment || 'production' }}" == "production" ]]; then
            vercel --prod --token=$VERCEL_TOKEN --yes
            echo "url=https://analytics.candlefish.ai" >> $GITHUB_OUTPUT
          else
            DEPLOY_URL=$(vercel --token=$VERCEL_TOKEN --yes --json | jq -r '.url')
            echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          fi

      # Deploy to AWS (Lambda/S3)
      - name: Deploy to AWS
        if: matrix.deploy == 'aws'
        id: deploy-aws
        working-directory: ${{ matrix.path }}
        run: |
          # Deploy serverless functions
          npm install -g serverless
          cd serverless-lean
          npm install
          serverless deploy --stage ${{ github.event.inputs.environment || 'production' }}

          # Deploy frontend to S3
          cd ../frontend
          aws s3 sync dist/ s3://tyler-setup-${{ github.event.inputs.environment || 'production' }} --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

          echo "url=https://tyler.candlefish.ai" >> $GITHUB_OUTPUT

      # Deploy to EAS (Expo)
      - name: Deploy to EAS
        if: matrix.deploy == 'eas'
        id: deploy-eas
        working-directory: ${{ matrix.path }}
        run: |
          npm install -g eas-cli

          # Submit to app stores
          if [[ "${{ github.event.inputs.environment || 'production' }}" == "production" ]]; then
            eas build --platform all --non-interactive
            eas submit --platform ios --non-interactive || true
            eas submit --platform android --non-interactive || true
          else
            eas build --platform all --profile preview --non-interactive
          fi

          echo "url=https://expo.dev/@candlefish/mobile-dashboard" >> $GITHUB_OUTPUT

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ github.event.inputs.environment || 'production' }}';
            const project = '${{ matrix.project }}';
            const url = '${{ steps.deploy.outputs.url || steps.deploy-netlify.outputs.url || steps.deploy-fly.outputs.url || steps.deploy-vercel.outputs.url || steps.deploy-aws.outputs.url || steps.deploy-eas.outputs.url }}';

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: '${{ job.status }}',
              environment_url: url,
              description: `${project} deployed to ${environment}`
            });

  # ============================================
  # STAGE 5: Post-Deployment Validation
  # ============================================
  validate-deployment:
    needs: [detect-changes, deploy]
    if: needs.detect-changes.outputs.deploy_targets != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Health check
        run: |
          # Get deployment URL
          case "${{ matrix.project }}" in
            website)
              URL="https://candlefish.ai"
              ;;
            paintbox)
              URL="https://paintbox.candlefish.ai"
              ;;
            rtpm-api)
              URL="https://rtpm-api.candlefish.ai"
              ;;
            analytics-dashboard)
              URL="https://analytics.candlefish.ai"
              ;;
            tyler-setup)
              URL="https://tyler.candlefish.ai"
              ;;
            *)
              echo "Skipping health check for ${{ matrix.project }}"
              exit 0
              ;;
          esac

          # Perform health check
          for i in {1..5}; do
            if curl -f -s -o /dev/null -w "%{http_code}" "$URL/health" | grep -q "200\|204"; then
              echo "Health check passed for $URL"
              exit 0
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 10
          done

          echo "Health check failed for $URL"
          exit 1

      - name: Run smoke tests
        if: matrix.runtime == 'node'
        run: |
          # Run basic smoke tests
          npx playwright install chromium
          npx playwright test tests/smoke --project=chromium || true

  # ============================================
  # STAGE 6: Notification & Rollback
  # ============================================
  notify:
    needs: [detect-changes, deploy, validate-deployment]
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: Send deployment notification
        uses: actions/github-script@v7
        with:
          script: |
            const targets = ${{ needs.detect-changes.outputs.deploy_targets || '[]' }};
            const environment = '${{ github.event.inputs.environment || 'production' }}';
            const status = '${{ needs.deploy.result }}';

            let message = `## Deployment ${status === 'success' ? '✅ Successful' : '❌ Failed'}\n\n`;
            message += `**Environment:** ${environment}\n`;
            message += `**Projects:** ${targets.join(', ')}\n`;
            message += `**Commit:** ${context.sha.substring(0, 7)}\n`;
            message += `**Run:** [#${context.runNumber}](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;

            if (status !== 'success') {
              message += `\n### Rollback Instructions\n`;
              message += `Run the rollback workflow with commit SHA from the last successful deployment.\n`;
            }

            // Post to PR if exists
            const pr = context.payload.pull_request;
            if (pr) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: message
              });
            }

            // Create deployment status
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: status === 'success' ? 'success' : 'failure',
              description: `Deployed ${targets.length} projects to ${environment}`
            });

      - name: Trigger rollback on failure
        if: failure()
        run: |
          echo "Deployment failed. Manual rollback may be required."
          echo "To rollback, run: gh workflow run rollback.yml -f commit=<last-good-sha>"
