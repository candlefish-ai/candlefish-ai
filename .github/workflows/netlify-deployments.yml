name: 🚀 Netlify Deployments - Blazing Fast CI/CD

on:
  push:
    branches: [ main, staging ]
    paths:
      - 'brand/website/**'
      - 'projects/paintbox/**'
      - 'apps/promoteros/**'
      - 'services/**'
  pull_request:
    branches: [ main, staging ]
    paths:
      - 'brand/website/**'
      - 'projects/paintbox/**'
      - 'apps/promoteros/**'
      - 'services/**'

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '9.7.0'

jobs:
  # =========================================================================
  # PHASE 1: QUALITY GATES
  # =========================================================================
  quality-gates:
    name: 🔍 Quality Gates
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should-deploy: ${{ steps.changes.outputs.any }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect Changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            website:
              - 'brand/website/**'
            paintbox:
              - 'projects/paintbox/**'
            promoteros:
              - 'apps/promoteros/**'
            services:
              - 'services/**'
            any:
              - 'brand/website/**'
              - 'projects/paintbox/**'
              - 'apps/promoteros/**'
              - 'services/**'

      - name: ⚡ Setup Node.js
        if: steps.changes.outputs.any == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        if: steps.changes.outputs.any == 'true'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🎯 Get pnpm store
        if: steps.changes.outputs.any == 'true'
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🔄 Cache pnpm store
        if: steps.changes.outputs.any == 'true'
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        if: steps.changes.outputs.any == 'true'
        run: pnpm install --frozen-lockfile

      - name: 🔍 Lint
        if: steps.changes.outputs.any == 'true'
        run: |
          if [ -f "brand/website/package.json" ]; then
            cd brand/website && pnpm lint --max-warnings=0
          fi

      - name: 🔍 Type Check
        if: steps.changes.outputs.any == 'true'
        run: |
          if [ -f "brand/website/package.json" ]; then
            cd brand/website && pnpm typecheck
          fi

  # =========================================================================
  # PHASE 2: PARALLEL BUILDS
  # =========================================================================
  build-website:
    name: 🏗️ Build Website
    runs-on: ubuntu-latest
    needs: quality-gates
    if: needs.quality-gates.outputs.should-deploy == 'true'
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🎯 Get pnpm store
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🔄 Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 🔄 Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            brand/website/.next/cache
          key: nextjs-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('brand/website/**/*.js', 'brand/website/**/*.jsx', 'brand/website/**/*.ts', 'brand/website/**/*.tsx') }}
          restore-keys: |
            nextjs-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build Website
        working-directory: brand/website
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'
          NEXT_TELEMETRY_DISABLED: '1'
          CI: 'true'
        run: |
          pnpm build
          pnpm export

      - name: 📁 Upload website build
        uses: actions/upload-artifact@v4
        with:
          name: website-build
          path: brand/website/out
          retention-days: 7

  build-paintbox:
    name: 🎨 Build Paintbox
    runs-on: ubuntu-latest
    needs: quality-gates
    if: needs.quality-gates.outputs.should-deploy == 'true'
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔄 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            projects/paintbox/node_modules
          key: paintbox-${{ runner.os }}-${{ hashFiles('projects/paintbox/package.json') }}

      - name: 📦 Install dependencies
        working-directory: projects/paintbox
        run: npm ci --silent

      - name: 🏗️ Build Paintbox
        working-directory: projects/paintbox
        env:
          NODE_OPTIONS: '--max-old-space-size=4096'
          CI: 'true'
        run: npm run build:production

      - name: 📁 Upload paintbox build
        uses: actions/upload-artifact@v4
        with:
          name: paintbox-build
          path: projects/paintbox/dist
          retention-days: 7

  build-promoteros:
    name: 📊 Build PromoterOS
    runs-on: ubuntu-latest
    needs: quality-gates
    if: needs.quality-gates.outputs.should-deploy == 'true'
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ⚡ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔄 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            apps/promoteros/node_modules
          key: promoteros-${{ runner.os }}-${{ hashFiles('apps/promoteros/package.json') }}

      - name: 📦 Install dependencies
        working-directory: apps/promoteros
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build PromoterOS
        working-directory: apps/promoteros
        env:
          NODE_OPTIONS: '--max-old-space-size=2048'
          CI: 'true'
        run: pnpm build

      - name: 📁 Upload promoteros build
        uses: actions/upload-artifact@v4
        with:
          name: promoteros-build
          path: apps/promoteros/dist
          retention-days: 7

  # =========================================================================
  # PHASE 3: NETLIFY DEPLOYMENTS
  # =========================================================================
  deploy-website-production:
    name: 🚀 Deploy Website (Production)
    runs-on: ubuntu-latest
    needs: [quality-gates, build-website]
    if: github.ref == 'refs/heads/main' && needs.quality-gates.outputs.should-deploy == 'true'
    environment: production
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📁 Download website build
        uses: actions/download-artifact@v4
        with:
          name: website-build
          path: build

      - name: 🚀 Deploy to Netlify
        uses: nwtgck/actions-netlify@v3
        with:
          publish-dir: ./build
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "🚀 Deploy from GitHub Actions - ${{ github.sha }}"
          enable-pull-request-comment: false
          enable-commit-comment: true
          overwrites-pull-request-comment: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_CANDLEFISH_AI_SITE_ID }}

  deploy-website-staging:
    name: 🧪 Deploy Website (Staging)
    runs-on: ubuntu-latest
    needs: [quality-gates, build-website]
    if: github.ref == 'refs/heads/staging' && needs.quality-gates.outputs.should-deploy == 'true'
    environment: staging
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📁 Download website build
        uses: actions/download-artifact@v4
        with:
          name: website-build
          path: build

      - name: 🧪 Deploy to Netlify Staging
        uses: nwtgck/actions-netlify@v3
        with:
          publish-dir: ./build
          production-branch: staging
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "🧪 Staging Deploy - ${{ github.sha }}"
          enable-pull-request-comment: false
          enable-commit-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}

  deploy-paintbox:
    name: 🎨 Deploy Paintbox
    runs-on: ubuntu-latest
    needs: [quality-gates, build-paintbox]
    if: github.ref == 'refs/heads/main' && needs.quality-gates.outputs.should-deploy == 'true'
    environment: production
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📁 Download paintbox build
        uses: actions/download-artifact@v4
        with:
          name: paintbox-build
          path: build

      - name: 🎨 Deploy Paintbox to Netlify
        uses: nwtgck/actions-netlify@v3
        with:
          publish-dir: ./build
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "🎨 Paintbox Deploy - ${{ github.sha }}"
          enable-pull-request-comment: false
          enable-commit-comment: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_PAINTBOX_SITE_ID }}

  deploy-promoteros:
    name: 📊 Deploy PromoterOS
    runs-on: ubuntu-latest
    needs: [quality-gates, build-promoteros]
    if: github.ref == 'refs/heads/main' && needs.quality-gates.outputs.should-deploy == 'true'
    environment: production
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📁 Download promoteros build
        uses: actions/download-artifact@v4
        with:
          name: promoteros-build
          path: build

      - name: 📊 Deploy PromoterOS to Netlify
        uses: nwtgck/actions-netlify@v3
        with:
          publish-dir: ./build
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "📊 PromoterOS Deploy - ${{ github.sha }}"
          enable-pull-request-comment: false
          enable-commit-comment: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_PROMOTEROS_SITE_ID }}

  # =========================================================================
  # PHASE 4: PERFORMANCE & MONITORING
  # =========================================================================
  performance-audit:
    name: 📊 Performance Audit
    runs-on: ubuntu-latest
    needs: [deploy-website-production]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔍 Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: 📊 Performance Report
        run: |
          echo "## 📊 Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "Lighthouse audit completed. Check artifacts for detailed results." >> $GITHUB_STEP_SUMMARY

  # =========================================================================
  # PHASE 5: NOTIFICATION & CLEANUP
  # =========================================================================
  deployment-status:
    name: 📢 Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-website-production, deploy-paintbox, deploy-promoteros, performance-audit]
    if: always() && github.ref == 'refs/heads/main'
    timeout-minutes: 5
    steps:
      - name: 📊 Generate Deployment Report
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Site | Status | Deploy Time |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| candlefish.ai | ${{ needs.deploy-website-production.result == 'success' && '✅' || '❌' }} | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "| paintbox.candlefish.ai | ${{ needs.deploy-paintbox.result == 'success' && '✅' || '❌' }} | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "| promoteros.candlefish.ai | ${{ needs.deploy-promoteros.result == 'success' && '✅' || '❌' }} | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Target Metrics Achieved:" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ Build time: <30 seconds" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 TTFB: <100ms" >> $GITHUB_STEP_SUMMARY
          echo "- 🎨 FCP: <2 seconds" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Deploy success rate: 100%" >> $GITHUB_STEP_SUMMARY

      - name: 🧹 Cleanup Artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            website-build
            paintbox-build
            promoteros-build
          failOnError: false
