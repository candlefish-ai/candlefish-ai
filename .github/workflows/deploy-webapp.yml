name: Deploy Web Application
# Optimized deployment workflow for webapp projects (cf, cfweb, cftyler)

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
        description: 'Project to deploy (cf, cfweb, cftyler)'
      environment:
        required: true
        type: string
        description: 'Environment (dev, staging, production)'
      ref:
        required: false
        type: string
        default: ''
        description: 'Git ref to deploy'
    secrets:
      AWS_ACCOUNT_ID:
        required: true
      CLOUDFRONT_DISTRIBUTION_ID:
        required: true
      TURBO_TOKEN:
        required: false

permissions:
  contents: read
  id-token: write
  deployments: write

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  deploy:
    name: Deploy ${{ inputs.project }} to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: 
      name: ${{ inputs.environment }}
      url: https://${{ inputs.project }}.${{ inputs.environment == 'production' && 'candlefish.ai' || format('{0}.candlefish.ai', inputs.environment) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}

      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ inputs.ref || github.ref }}',
              environment: '${{ inputs.environment }}',
              required_contexts: [],
              auto_merge: false,
              description: 'Deploying ${{ inputs.project }} to ${{ inputs.environment }}'
            });
            return deployment.data.id;

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache-key: ${{ github.sha }}-${{ inputs.environment }}
          project-type: webapp

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-deploy-${{ inputs.environment }}
          aws-region: us-east-1

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile --prefer-offline
          
      - name: Build application
        run: |
          # Set environment variables
          export NODE_ENV=production
          export NEXT_PUBLIC_ENV=${{ inputs.environment }}
          export NEXT_PUBLIC_API_URL=https://api-${{ inputs.environment }}.candlefish.ai
          
          # Build with Turbo
          pnpm turbo build --filter=${{ inputs.project }} --cache-dir=.turbo
          
          # Optimize assets
          if [ -d "dist" ]; then
            # Compress HTML, CSS, JS
            find dist -type f \( -name "*.html" -o -name "*.css" -o -name "*.js" \) -exec gzip -9 -k {} \;
            
            # Generate Brotli versions for modern browsers
            find dist -type f \( -name "*.html" -o -name "*.css" -o -name "*.js" \) -exec brotli -9 {} \;
          fi

      - name: Run smoke tests
        run: |
          # Quick validation of build output
          if [ ! -d "dist" ] && [ ! -d ".next" ]; then
            echo "❌ Build output not found"
            exit 1
          fi
          
          # Check for critical files
          if [ -d "dist" ]; then
            [ -f "dist/index.html" ] || echo "⚠️ Warning: index.html not found"
            [ -f "dist/robots.txt" ] || echo "⚠️ Warning: robots.txt not found"
          fi
          
          echo "✅ Build validation passed"

      - name: Deploy to S3
        run: |
          BUCKET_NAME="candlefish-${{ inputs.project }}-${{ inputs.environment }}"
          
          # Create bucket if it doesn't exist
          aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null || \
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region us-east-1
          
          # Configure bucket for static website hosting
          aws s3api put-bucket-website --bucket "$BUCKET_NAME" \
            --website-configuration '{
              "IndexDocument": {"Suffix": "index.html"},
              "ErrorDocument": {"Key": "404.html"}
            }'
          
          # Sync static assets with long cache
          aws s3 sync dist/ "s3://$BUCKET_NAME/" \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "*.html" \
            --exclude "*.json" \
            --exclude "*.xml" \
            --exclude "robots.txt" \
            --exclude "sitemap.xml" \
            --content-encoding gzip \
            --metadata-directive REPLACE
          
          # Sync HTML and dynamic files with short cache
          aws s3 sync dist/ "s3://$BUCKET_NAME/" \
            --cache-control "public, max-age=0, must-revalidate" \
            --include "*.html" \
            --include "*.json" \
            --include "*.xml" \
            --include "robots.txt" \
            --include "sitemap.xml" \
            --content-encoding gzip \
            --metadata-directive REPLACE

      - name: Invalidate CloudFront
        run: |
          # Create invalidation for updated content
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          echo "Created invalidation: $INVALIDATION_ID"
          
          # Wait for invalidation to complete (with timeout)
          timeout 300 aws cloudfront wait invalidation-completed \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --id "$INVALIDATION_ID" || echo "⚠️ Invalidation timeout (content will still update)"

      - name: Verify deployment
        run: |
          DEPLOY_URL="https://${{ inputs.project }}.${{ inputs.environment == 'production' && 'candlefish.ai' || format('{0}.candlefish.ai', inputs.environment) }}"
          
          echo "Verifying deployment at: $DEPLOY_URL"
          
          # Wait for deployment to propagate
          sleep 10
          
          # Check deployment health
          for i in {1..10}; do
            if curl -f -s -o /dev/null -w "%{http_code}" "$DEPLOY_URL" | grep -q "200\|304"; then
              echo "✅ Deployment verified successfully"
              break
            else
              echo "⏳ Waiting for deployment... (attempt $i/10)"
              sleep 15
            fi
          done
          
          # Final verification
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOY_URL")
          if [[ "$RESPONSE" != "200" && "$RESPONSE" != "304" ]]; then
            echo "❌ Deployment verification failed (HTTP $RESPONSE)"
            exit 1
          fi

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: status,
              environment_url: 'https://${{ inputs.project }}.${{ inputs.environment == 'production' && 'candlefish.ai' || format('{0}.candlefish.ai', inputs.environment) }}',
              description: `Deployment ${status} for ${{ inputs.project }}`
            });

      - name: Send deployment notification
        if: always()
        run: |
          STATUS_EMOJI="${{ job.status == 'success' && '✅' || '❌' }}"
          STATUS_TEXT="${{ job.status == 'success' && 'succeeded' || 'failed' }}"
          
          echo "## $STATUS_EMOJI Deployment $STATUS_TEXT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Project:** ${{ inputs.project }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** https://${{ inputs.project }}.${{ inputs.environment == 'production' && 'candlefish.ai' || format('{0}.candlefish.ai', inputs.environment) }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY