name: deploy
on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

jobs:
  detect:
    name: Detect changed paths
    runs-on: ubuntu-latest
    outputs:
      paintbox: ${{ steps.filter.outputs.paintbox }}
      promoteros: ${{ steps.filter.outputs.promoteros }}
      crown: ${{ steps.filter.outputs.crown }}
      nanda: ${{ steps.filter.outputs.nanda }}
      crestron: ${{ steps.filter.outputs.crestron }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            paintbox:
              - 'apps/paintbox/**'
              - 'projects/paintbox/**'
            promoteros:
              - 'apps/promoteros/**'
            crown:
              - 'apps/crown-trophy/**'
            nanda:
              - 'services/nanda-index/**'
              - 'nanda-index-repo/**'
              - 'nanda-adapter/**'
            crestron:
              - 'services/crestron-ha/**'

  # ---------- NETLIFY PREVIEW (PR) ----------
  paintbox_netlify_preview:
    needs: detect
    if: ${{ github.event_name == 'pull_request' && needs.detect.outputs.paintbox == 'true' }}
    runs-on: ubuntu-latest
    environment: preview
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node / pnpm
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: corepack enable && corepack prepare pnpm@9.9.0 --activate
      - run: pnpm install --frozen-lockfile
      - name: Build app
        run: pnpm --filter paintbox build || pnpm --filter "./projects/paintbox" build
      - name: AWS OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}
      - name: Fetch secrets
        run: |
          aws secretsmanager get-secret-value --secret-id "candlefish/dev/paintbox" --query 'SecretString' --output text > apps/paintbox/.env 2>/dev/null || true
          aws secretsmanager get-secret-value --secret-id "candlefish/dev/paintbox" --query 'SecretString' --output text > projects/paintbox/.env 2>/dev/null || true
      - name: Deploy to Netlify
        id: netlify
        run: |
          npm install -g netlify-cli
          DEPLOY_DIR="apps/paintbox/.next"
          [ -d "projects/paintbox/.next" ] && DEPLOY_DIR="projects/paintbox/.next"
          [ -d "projects/paintbox/dist" ] && DEPLOY_DIR="projects/paintbox/dist"
          OUTPUT=$(netlify deploy --dir=$DEPLOY_DIR --auth=${{ secrets.NETLIFY_AUTH_TOKEN }} --site ${{ secrets.PAINTBOX_SITE_ID }} --message "PR #${{ github.event.number }}" --json)
          echo "deploy_output=$OUTPUT" >> $GITHUB_OUTPUT
          DEPLOY_URL=$(echo $OUTPUT | jq -r '.deploy_url')
          echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
      - name: Comment preview URL
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.netlify.outputs.deploy_url }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Paintbox Preview Deployed!**\n\n🔗 Preview URL: ${url}\n\n_Deploy triggered by commit ${context.sha.substring(0, 7)}_`
            });

  promoteros_netlify_preview:
    needs: detect
    if: ${{ github.event_name == 'pull_request' && needs.detect.outputs.promoteros == 'true' }}
    runs-on: ubuntu-latest
    environment: preview
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: corepack enable && corepack prepare pnpm@9.9.0 --activate
      - run: pnpm install --frozen-lockfile
      - run: pnpm --filter promoteros build
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}
      - run: |
          aws secretsmanager get-secret-value --secret-id "candlefish/dev/promoteros" --query 'SecretString' --output text > apps/promoteros/.env 2>/dev/null || true
      - name: Deploy to Netlify
        id: netlify
        run: |
          npm install -g netlify-cli
          DEPLOY_DIR="apps/promoteros/.next"
          [ -d "apps/promoteros/dist" ] && DEPLOY_DIR="apps/promoteros/dist"
          OUTPUT=$(netlify deploy --dir=$DEPLOY_DIR --auth=${{ secrets.NETLIFY_AUTH_TOKEN }} --site ${{ secrets.PROMOTEROS_SITE_ID }} --message "PR #${{ github.event.number }}" --json)
          echo "deploy_url=$(echo $OUTPUT | jq -r '.deploy_url')" >> $GITHUB_OUTPUT
      - name: Comment preview URL
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.netlify.outputs.deploy_url }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **PromoterOS Preview Deployed!**\n\n🔗 Preview URL: ${url}\n\n_Deploy triggered by commit ${context.sha.substring(0, 7)}_`
            });

  crown_netlify_preview:
    needs: detect
    if: ${{ github.event_name == 'pull_request' && needs.detect.outputs.crown == 'true' }}
    runs-on: ubuntu-latest
    environment: preview
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: corepack enable && corepack prepare pnpm@9.9.0 --activate
      - run: pnpm install --frozen-lockfile
      - run: pnpm --filter crown-trophy build
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}
      - run: |
          aws secretsmanager get-secret-value --secret-id "candlefish/dev/crown-trophy" --query 'SecretString' --output text > apps/crown-trophy/.env 2>/dev/null || true
      - name: Deploy to Netlify
        id: netlify
        run: |
          npm install -g netlify-cli
          DEPLOY_DIR="apps/crown-trophy/.next"
          [ -d "apps/crown-trophy/dist" ] && DEPLOY_DIR="apps/crown-trophy/dist"
          OUTPUT=$(netlify deploy --dir=$DEPLOY_DIR --auth=${{ secrets.NETLIFY_AUTH_TOKEN }} --site ${{ secrets.CROWN_SITE_ID }} --message "PR #${{ github.event.number }}" --json)
          echo "deploy_url=$(echo $OUTPUT | jq -r '.deploy_url')" >> $GITHUB_OUTPUT
      - name: Comment preview URL
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.netlify.outputs.deploy_url }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🏆 **Crown Trophy Preview Deployed!**\n\n🔗 Preview URL: ${url}\n\n_Deploy triggered by commit ${context.sha.substring(0, 7)}_`
            });

  # ---------- NETLIFY PROD (main) ----------
  paintbox_netlify_prod:
    needs: detect
    if: ${{ github.event_name == 'push' && needs.detect.outputs.paintbox == 'true' }}
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: corepack enable && corepack prepare pnpm@9.9.0 --activate
      - run: pnpm install --frozen-lockfile
      - run: pnpm --filter paintbox build || pnpm --filter "./projects/paintbox" build
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}
      - run: |
          aws secretsmanager get-secret-value --secret-id "candlefish/prod/paintbox" --query 'SecretString' --output text > apps/paintbox/.env 2>/dev/null || true
          aws secretsmanager get-secret-value --secret-id "candlefish/prod/paintbox" --query 'SecretString' --output text > projects/paintbox/.env 2>/dev/null || true
      - name: Deploy to Netlify Production
        run: |
          npm install -g netlify-cli
          DEPLOY_DIR="apps/paintbox/.next"
          [ -d "projects/paintbox/.next" ] && DEPLOY_DIR="projects/paintbox/.next"
          [ -d "projects/paintbox/dist" ] && DEPLOY_DIR="projects/paintbox/dist"
          netlify deploy --prod --dir=$DEPLOY_DIR --auth=${{ secrets.NETLIFY_AUTH_TOKEN }} --site ${{ secrets.PAINTBOX_SITE_ID }} --message "Production deploy: ${{ github.sha }}"

  promoteros_netlify_prod:
    needs: detect
    if: ${{ github.event_name == 'push' && needs.detect.outputs.promoteros == 'true' }}
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: corepack enable && corepack prepare pnpm@9.9.0 --activate
      - run: pnpm install --frozen-lockfile
      - run: pnpm --filter promoteros build
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}
      - run: |
          aws secretsmanager get-secret-value --secret-id "candlefish/prod/promoteros" --query 'SecretString' --output text > apps/promoteros/.env 2>/dev/null || true
      - name: Deploy to Netlify Production
        run: |
          npm install -g netlify-cli
          DEPLOY_DIR="apps/promoteros/.next"
          [ -d "apps/promoteros/dist" ] && DEPLOY_DIR="apps/promoteros/dist"
          netlify deploy --prod --dir=$DEPLOY_DIR --auth=${{ secrets.NETLIFY_AUTH_TOKEN }} --site ${{ secrets.PROMOTEROS_SITE_ID }} --message "Production deploy: ${{ github.sha }}"

  crown_netlify_prod:
    needs: detect
    if: ${{ github.event_name == 'push' && needs.detect.outputs.crown == 'true' }}
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
      - run: corepack enable && corepack prepare pnpm@9.9.0 --activate
      - run: pnpm install --frozen-lockfile
      - run: pnpm --filter crown-trophy build
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}
      - run: |
          aws secretsmanager get-secret-value --secret-id "candlefish/prod/crown-trophy" --query 'SecretString' --output text > apps/crown-trophy/.env 2>/dev/null || true
      - name: Deploy to Netlify Production
        run: |
          npm install -g netlify-cli
          DEPLOY_DIR="apps/crown-trophy/.next"
          [ -d "apps/crown-trophy/dist" ] && DEPLOY_DIR="apps/crown-trophy/dist"
          netlify deploy --prod --dir=$DEPLOY_DIR --auth=${{ secrets.NETLIFY_AUTH_TOKEN }} --site ${{ secrets.CROWN_SITE_ID }} --message "Production deploy: ${{ github.sha }}"

  # ---------- FLY PREVIEW (PR) ----------
  nanda_fly_preview:
    needs: detect
    if: ${{ github.event_name == 'pull_request' && needs.detect.outputs.nanda == 'true' }}
    runs-on: ubuntu-latest
    environment: preview
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@v1
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}
      - run: |
          aws secretsmanager get-secret-value --secret-id "candlefish/dev/nanda-index" --query 'SecretString' --output text > services/nanda-index/.env 2>/dev/null || true
      - name: Deploy to Fly.io
        run: |
          if [ -d "services/nanda-index" ]; then
            cd services/nanda-index
          elif [ -d "nanda-index-repo" ]; then
            cd nanda-index-repo
          fi
          flyctl deploy --remote-only --config fly.toml --build-arg GIT_SHA=${{ github.sha }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      - name: Get deployment URL
        id: fly_url
        run: |
          if [ -d "services/nanda-index" ]; then
            cd services/nanda-index
          elif [ -d "nanda-index-repo" ]; then
            cd nanda-index-repo
          fi
          URL=$(flyctl info --json | jq -r '.Hostname')
          echo "app_url=https://$URL" >> $GITHUB_OUTPUT
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      - name: Comment deployment URL
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.fly_url.outputs.app_url }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🤖 **NANDA Index Preview Deployed!**\n\n🔗 Service URL: ${url}\n\n_Deploy triggered by commit ${context.sha.substring(0, 7)}_`
            });

  crestron_fly_preview:
    needs: detect
    if: ${{ github.event_name == 'pull_request' && needs.detect.outputs.crestron == 'true' }}
    runs-on: ubuntu-latest
    environment: preview
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@v1
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}
      - run: |
          aws secretsmanager get-secret-value --secret-id "candlefish/dev/crestron-ha" --query 'SecretString' --output text > services/crestron-ha/.env 2>/dev/null || true
      - name: Deploy to Fly.io
        run: |
          cd services/crestron-ha
          flyctl deploy --remote-only --config fly.toml --build-arg GIT_SHA=${{ github.sha }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      - name: Get deployment URL
        id: fly_url
        run: |
          cd services/crestron-ha
          URL=$(flyctl info --json | jq -r '.Hostname')
          echo "app_url=https://$URL" >> $GITHUB_OUTPUT
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      - name: Comment deployment URL
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const url = '${{ steps.fly_url.outputs.app_url }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🏠 **Crestron HA Preview Deployed!**\n\n🔗 Service URL: ${url}\n\n_Deploy triggered by commit ${context.sha.substring(0, 7)}_`
            });

  # ---------- FLY PROD (main) ----------
  nanda_fly_prod:
    needs: detect
    if: ${{ github.event_name == 'push' && needs.detect.outputs.nanda == 'true' }}
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@v1
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}
      - run: |
          aws secretsmanager get-secret-value --secret-id "candlefish/prod/nanda-index" --query 'SecretString' --output text > services/nanda-index/.env 2>/dev/null || true
      - name: Deploy to Fly.io Production
        run: |
          if [ -d "services/nanda-index" ]; then
            cd services/nanda-index
          elif [ -d "nanda-index-repo" ]; then
            cd nanda-index-repo
          fi
          flyctl deploy --remote-only --config fly.toml --build-arg GIT_SHA=${{ github.sha }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  crestron_fly_prod:
    needs: detect
    if: ${{ github.event_name == 'push' && needs.detect.outputs.crestron == 'true' }}
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@v1
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION || 'us-west-2' }}
      - run: |
          aws secretsmanager get-secret-value --secret-id "candlefish/prod/crestron-ha" --query 'SecretString' --output text > services/crestron-ha/.env 2>/dev/null || true
      - name: Deploy to Fly.io Production
        run: |
          cd services/crestron-ha
          flyctl deploy --remote-only --config fly.toml --build-arg GIT_SHA=${{ github.sha }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
