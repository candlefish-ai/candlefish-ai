name: Candlefish Website Testing Suite

on:
  push:
    paths:
      - 'brand/website/**'
      - '.github/workflows/website-testing.yml'
  pull_request:
    paths:
      - 'brand/website/**'
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CYPRESS_CACHE_FOLDER: ~/.cache/Cypress

jobs:
  # Unit and Integration Tests
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: brand/website

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: brand/website/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check || npx tsc --noEmit

      - name: Run unit tests
        run: npm run test:ci

      - name: Run Netlify extension unit tests
        run: npm test -- __tests__/api/netlify-api-client.test.ts --coverage --collectCoverageFrom="lib/netlify/**/*.ts"

      - name: Run Netlify API endpoint tests
        run: npm test -- __tests__/api/netlify-endpoints.test.ts --coverage --collectCoverageFrom="app/api/**/*.ts"

      - name: Run Netlify component tests
        run: npm test -- __tests__/components/netlify/ --coverage --collectCoverageFrom="components/**/*.tsx"

      - name: Run Netlify integration tests
        run: npm test -- __tests__/integration/netlify-workflows.test.ts --coverage

      - name: Check coverage thresholds
        run: |
          node -e "
            const coverage = require('./coverage/coverage-summary.json');
            const thresholds = { branches: 80, functions: 80, lines: 80, statements: 80 };

            Object.entries(thresholds).forEach(([metric, threshold]) => {
              const pct = coverage.total[metric].pct;
              console.log(\`\${metric}: \${pct}% (threshold: \${threshold}%)\`);
              if (pct < threshold) {
                console.error(\`❌ Coverage below threshold for \${metric}: \${pct}% < \${threshold}%\`);
                process.exit(1);
              }
            });
            console.log('✅ All coverage thresholds met');
          "

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: brand/website/coverage/lcov.info
          flags: unit-tests
          name: unit-test-coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            brand/website/coverage/
            brand/website/test-results.xml
          retention-days: 7

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: brand/website

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: brand/website/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run start &
          sleep 30
          curl -f http://localhost:3000 || exit 1

      - name: Install K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          npm run test:performance || true

      - name: Run K6 API load tests
        run: k6 run __tests__/performance/k6/netlify-api-load-test.js

      - name: Run K6 WebSocket performance tests
        run: k6 run __tests__/performance/k6/websocket-performance-test.js

      - name: Run animation performance tests
        run: npm test -- __tests__/performance/

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            brand/website/performance-results/
          retention-days: 7

  # E2E Tests with Cypress
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: brand/website

    strategy:
      matrix:
        browser: [chrome, firefox]
        viewport: [desktop, mobile]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: brand/website/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: brand/website
          start: npm run start
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 120
          browser: ${{ matrix.browser }}
          config: viewportWidth=1920,viewportHeight=1080
        env:
          CYPRESS_VIEWPORT: ${{ matrix.viewport }}

      - name: Install Playwright for Netlify tests
        run: npx playwright install --with-deps

      - name: Run Netlify extension E2E tests
        run: npx playwright test __tests__/e2e/netlify-extension-management.spec.ts --reporter=html
        env:
          PLAYWRIGHT_BROWSER: ${{ matrix.browser }}
          PLAYWRIGHT_VIEWPORT: ${{ matrix.viewport }}

      - name: Upload Cypress screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-${{ matrix.browser }}-${{ matrix.viewport }}
          path: brand/website/cypress/screenshots/
          retention-days: 7

      - name: Upload Cypress videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos-${{ matrix.browser }}-${{ matrix.viewport }}
          path: brand/website/cypress/videos/
          retention-days: 7

  # Accessibility Tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: brand/website

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: brand/website/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run accessibility tests
        run: npm run test:accessibility

      - name: Run Netlify accessibility tests
        run: npx playwright test __tests__/accessibility/netlify-accessibility.test.ts

      - name: Upload accessibility reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: |
            brand/website/test-results/
            brand/website/playwright-report/
          retention-days: 7

  # Visual Regression Tests
  visual-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: brand/website

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: brand/website/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run visual regression tests
        run: npm run test:visual

      - name: Upload visual test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-test-results
          path: |
            brand/website/test-results/
            brand/website/playwright-report/
          retention-days: 7

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: brand/website

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: brand/website/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run Netlify security tests
        run: npm test -- __tests__/security/netlify-security.test.ts

      - name: Build application for security scan
        run: npm run build

      - name: Start application for security scan
        run: |
          npm run start &
          sleep 30
          curl -f http://localhost:3000 || exit 1

      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            report_html.html
            report_md.md
            report_json.json
          retention-days: 7

  # Lighthouse Performance Audit
  lighthouse-audit:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: brand/website

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: brand/website/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run start &
          sleep 30
          curl -f http://localhost:3000 || exit 1

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun --config=lighthouserc.js
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: |
            .lighthouseci/
          retention-days: 7

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, performance-tests, e2e-tests, accessibility-tests, visual-tests, security-scan, lighthouse-audit]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Setup Node.js for summary
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Generate comprehensive test summary
        working-directory: brand/website
        run: |
          npm ci
          node scripts/generate-test-summary.js
        env:
          GITHUB_STEP_SUMMARY: ${{ env.GITHUB_STEP_SUMMARY }}

      - name: Upload comprehensive reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: comprehensive-test-reports
          path: |
            brand/website/reports/
          retention-days: 14

      - name: Generate legacy test summary
        run: |
          echo "# Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.unit-tests.result }}" == "success" ]; then
            echo "✅ Unit Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Unit Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.performance-tests.result }}" == "success" ]; then
            echo "✅ Performance Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Performance Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "✅ E2E Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ E2E Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.accessibility-tests.result }}" == "success" ]; then
            echo "✅ Accessibility Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Accessibility Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.visual-tests.result }}" == "success" ]; then
            echo "✅ Visual Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Visual Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.security-scan.result }}" == "success" ]; then
            echo "✅ Security Scan: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Security Scan: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.lighthouse-audit.result }}" == "success" ]; then
            echo "✅ Lighthouse Audit: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Lighthouse Audit: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Comprehensive Reports Available in Artifacts**" >> $GITHUB_STEP_SUMMARY

      - name: Post test results to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const results = {
              'Unit Tests': '${{ needs.unit-tests.result }}',
              'Performance Tests': '${{ needs.performance-tests.result }}',
              'E2E Tests': '${{ needs.e2e-tests.result }}',
              'Accessibility Tests': '${{ needs.accessibility-tests.result }}',
              'Visual Tests': '${{ needs.visual-tests.result }}',
              'Security Scan': '${{ needs.security-scan.result }}',
              'Lighthouse Audit': '${{ needs.lighthouse-audit.result }}'
            };

            let body = '## 🧪 Test Results\n\n';
            for (const [test, result] of Object.entries(results)) {
              const icon = result === 'success' ? '✅' : '❌';
              body += `${icon} **${test}**: ${result}\n`;
            }
            body += '\nView detailed results in the [workflow run](' + context.payload.workflow_run?.html_url + ').';

            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body
            });
