name: RTPM Test Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/rtpm-api/**'
      - 'apps/nanda-dashboard/**'
      - '.github/workflows/rtpm-test-pipeline.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/rtpm-api/**'
      - 'apps/nanda-dashboard/**'
      - '.github/workflows/rtpm-test-pipeline.yml'
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: false
        default: 'full'
        type: choice
        options:
          - 'unit'
          - 'integration'
          - 'e2e'
          - 'performance'
          - 'full'
      run_load_tests:
        description: 'Run load tests'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  PNPM_VERSION: '8'

jobs:
  # Job 1: Setup and validation
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      test-level: ${{ steps.set-test-level.outputs.level }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set test level
        id: set-test-level
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "level=${{ github.event.inputs.test_level }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            echo "level=full" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "level=full" >> $GITHUB_OUTPUT
          else
            echo "level=integration" >> $GITHUB_OUTPUT
          fi

      - name: Set test matrix
        id: set-matrix
        run: |
          case "${{ steps.set-test-level.outputs.level }}" in
            "unit")
              echo 'matrix={"include":[{"test-type":"unit","os":"ubuntu-latest"}]}' >> $GITHUB_OUTPUT
              ;;
            "integration")
              echo 'matrix={"include":[{"test-type":"unit","os":"ubuntu-latest"},{"test-type":"integration","os":"ubuntu-latest"}]}' >> $GITHUB_OUTPUT
              ;;
            "e2e")
              echo 'matrix={"include":[{"test-type":"unit","os":"ubuntu-latest"},{"test-type":"integration","os":"ubuntu-latest"},{"test-type":"e2e","os":"ubuntu-latest"}]}' >> $GITHUB_OUTPUT
              ;;
            "performance")
              echo 'matrix={"include":[{"test-type":"unit","os":"ubuntu-latest"},{"test-type":"integration","os":"ubuntu-latest"},{"test-type":"performance","os":"ubuntu-latest"}]}' >> $GITHUB_OUTPUT
              ;;
            *)
              echo 'matrix={"include":[{"test-type":"unit","os":"ubuntu-latest"},{"test-type":"integration","os":"ubuntu-latest"},{"test-type":"e2e","os":"ubuntu-latest"},{"test-type":"performance","os":"ubuntu-latest"}]}' >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Validate project structure
        run: |
          echo "Validating project structure..."
          test -d "apps/rtpm-api" || { echo "RTPM API directory not found"; exit 1; }
          test -d "apps/nanda-dashboard" || { echo "Dashboard directory not found"; exit 1; }
          test -f "apps/rtpm-api/requirements.txt" || { echo "API requirements.txt not found"; exit 1; }
          test -f "apps/nanda-dashboard/package.json" || { echo "Dashboard package.json not found"; exit 1; }
          echo "✅ Project structure validated"

  # Job 2: Backend API Tests
  api-tests:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rtpm_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('apps/rtpm-api/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        working-directory: apps/rtpm-api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist pytest-asyncio

      - name: Set up test environment
        working-directory: apps/rtpm-api
        run: |
          export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/rtpm_test"
          export REDIS_URL="redis://localhost:6379"
          export ENV="test"
          echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV
          echo "REDIS_URL=$REDIS_URL" >> $GITHUB_ENV
          echo "ENV=test" >> $GITHUB_ENV

      - name: Run API unit tests
        if: matrix.test-type == 'unit' || matrix.test-type == 'integration' || matrix.test-type == 'performance'
        working-directory: apps/rtpm-api
        run: |
          pytest tests/test_api_endpoints.py \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            --junit-xml=test-results/unit-results.xml \
            -v

      - name: Run API integration tests
        if: matrix.test-type == 'integration' || matrix.test-type == 'performance'
        working-directory: apps/rtpm-api
        run: |
          pytest tests/test_integration.py \
            --cov=src \
            --cov-append \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            --junit-xml=test-results/integration-results.xml \
            -v

      - name: Run WebSocket tests
        if: matrix.test-type == 'integration' || matrix.test-type == 'performance'
        working-directory: apps/rtpm-api
        run: |
          pytest tests/test_websocket.py \
            --cov=src \
            --cov-append \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            --junit-xml=test-results/websocket-results.xml \
            -v

      - name: Run performance tests
        if: matrix.test-type == 'performance'
        working-directory: apps/rtpm-api
        run: |
          pytest tests/test_performance.py \
            --junit-xml=test-results/performance-results.xml \
            -v -s

      - name: Upload API test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: api-test-results-${{ matrix.test-type }}
          path: |
            apps/rtpm-api/test-results/
            apps/rtmp-api/htmlcov/
            apps/rtpm-api/coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.test-type == 'integration' || matrix.test-type == 'performance'
        with:
          file: apps/rtpm-api/coverage.xml
          flags: api
          name: rtpm-api-coverage

  # Job 3: Frontend Dashboard Tests
  dashboard-tests:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        working-directory: apps/nanda-dashboard
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache pnpm dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('apps/nanda-dashboard/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: apps/nanda-dashboard
        run: pnpm install --frozen-lockfile

      - name: Run type checking
        if: matrix.test-type == 'unit' || matrix.test-type == 'integration'
        working-directory: apps/nanda-dashboard
        run: pnpm run typecheck

      - name: Run linting
        if: matrix.test-type == 'unit' || matrix.test-type == 'integration'
        working-directory: apps/nanda-dashboard
        run: pnpm run lint

      - name: Run unit tests
        if: matrix.test-type == 'unit' || matrix.test-type == 'integration' || matrix.test-type == 'e2e'
        working-directory: apps/nanda-dashboard
        run: |
          pnpm run test:coverage -- \
            --reporter=junit \
            --outputFile=test-results/unit-results.xml

      - name: Build dashboard
        if: matrix.test-type == 'e2e' || matrix.test-type == 'performance'
        working-directory: apps/nanda-dashboard
        run: pnpm run build

      - name: Upload dashboard test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dashboard-test-results-${{ matrix.test-type }}
          path: |
            apps/nanda-dashboard/test-results/
            apps/nanda-dashboard/coverage/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.test-type == 'unit' || matrix.test-type == 'integration'
        with:
          file: apps/nanda-dashboard/coverage/lcov.info
          flags: dashboard
          name: nanda-dashboard-coverage

  # Job 4: E2E Tests
  e2e-tests:
    needs: [setup, api-tests, dashboard-tests]
    runs-on: ubuntu-latest
    if: contains(fromJson(needs.setup.outputs.matrix).include[*].test-type, 'e2e')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rtpm_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dashboard dependencies
        working-directory: apps/nanda-dashboard
        run: pnpm install --frozen-lockfile

      - name: Install API dependencies
        working-directory: apps/rtpm-api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install Playwright browsers
        working-directory: apps/nanda-dashboard
        run: pnpm exec playwright install --with-deps

      - name: Start API server
        working-directory: apps/rtpm-api
        run: |
          export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/rtpm_e2e"
          export REDIS_URL="redis://localhost:6379"
          export ENV="test"
          python -m uvicorn src.main:app --host 0.0.0.0 --port 8000 &
          echo $! > api_server.pid
          sleep 10

      - name: Start dashboard dev server
        working-directory: apps/nanda-dashboard
        run: |
          pnpm run dev &
          echo $! > dev_server.pid
          sleep 10

      - name: Wait for servers to be ready
        run: |
          # Wait for API
          for i in {1..30}; do
            if curl -s http://localhost:8000/health > /dev/null; then
              echo "API server is ready"
              break
            fi
            echo "Waiting for API server... ($i/30)"
            sleep 2
          done

          # Wait for frontend
          for i in {1..30}; do
            if curl -s http://localhost:5173 > /dev/null; then
              echo "Frontend server is ready"
              break
            fi
            echo "Waiting for frontend server... ($i/30)"
            sleep 2
          done

      - name: Run E2E tests
        working-directory: apps/nanda-dashboard
        run: |
          pnpm exec playwright test \
            --reporter=html \
            --reporter=junit:test-results/e2e-results.xml

      - name: Stop servers
        if: always()
        run: |
          if [ -f apps/rtpm-api/api_server.pid ]; then
            kill $(cat apps/rtpm-api/api_server.pid) || true
          fi
          if [ -f apps/nanda-dashboard/dev_server.pid ]; then
            kill $(cat apps/nanda-dashboard/dev_server.pid) || true
          fi

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            apps/nanda-dashboard/test-results/
            apps/nanda-dashboard/playwright-report/

  # Job 5: Load Testing
  load-tests:
    needs: [setup, api-tests]
    runs-on: ubuntu-latest
    if: github.event.inputs.run_load_tests == 'true' || github.event_name == 'schedule' || contains(fromJson(needs.setup.outputs.matrix).include[*].test-type, 'performance')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rtpm_load
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install API dependencies
        working-directory: apps/rtpm-api
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start API server for load testing
        working-directory: apps/rtpm-api
        run: |
          export DATABASE_URL="postgresql://postgres:postgres@localhost:5432/rtpm_load"
          export REDIS_URL="redis://localhost:6379"
          export ENV="test"
          python -m uvicorn src.main:app --host 0.0.0.0 --port 8000 &
          echo $! > load_test_server.pid
          sleep 10

      - name: Wait for API to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:8000/health > /dev/null; then
              echo "API server is ready for load testing"
              break
            fi
            echo "Waiting for API server... ($i/30)"
            sleep 2
          done

      - name: Run load tests
        working-directory: apps/rtpm-api/tests/load_testing
        run: |
          export BASE_URL="http://localhost:8000"
          export WS_URL="ws://localhost:8000"
          ./run_load_tests.sh

      - name: Stop load test server
        if: always()
        run: |
          if [ -f apps/rtpm-api/load_test_server.pid ]; then
            kill $(cat apps/rtpm-api/load_test_server.pid) || true
          fi

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: load-test-results
          path: apps/rtpm-api/tests/load_testing/load_test_results/

  # Job 6: Security Tests
  security-tests:
    needs: setup
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: python,javascript

  # Job 7: Test Report Generation
  test-report:
    needs: [api-tests, dashboard-tests, e2e-tests, load-tests]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v3

      - name: Generate test report
        run: |
          mkdir -p test-report

          cat > test-report/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>RTPM Test Report</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 20px; }
                  .header { background: #f0f0f0; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
                  .section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
                  .success { border-left: 5px solid #28a745; }
                  .warning { border-left: 5px solid #ffc107; }
                  .error { border-left: 5px solid #dc3545; }
                  .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; }
                  .metric { background: #f8f9fa; padding: 10px; border-radius: 3px; text-align: center; }
                  .metric-value { font-size: 1.5em; font-weight: bold; color: #007bff; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>RTPM Test Report</h1>
                  <p><strong>Build:</strong> ${{ github.run_number }}</p>
                  <p><strong>Commit:</strong> ${{ github.sha }}</p>
                  <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
                  <p><strong>Timestamp:</strong> $(date)</p>
              </div>

              <div class="section success">
                  <h2>Test Summary</h2>
                  <div class="metrics">
                      <div class="metric">
                          <div class="metric-value">✅</div>
                          <div>API Tests</div>
                      </div>
                      <div class="metric">
                          <div class="metric-value">✅</div>
                          <div>Dashboard Tests</div>
                      </div>
                      <div class="metric">
                          <div class="metric-value">✅</div>
                          <div>E2E Tests</div>
                      </div>
                      <div class="metric">
                          <div class="metric-value">✅</div>
                          <div>Load Tests</div>
                      </div>
                  </div>
              </div>

              <div class="section">
                  <h2>Coverage Reports</h2>
                  <ul>
                      <li><a href="api-coverage/index.html">API Coverage Report</a></li>
                      <li><a href="dashboard-coverage/index.html">Dashboard Coverage Report</a></li>
                  </ul>
              </div>

              <div class="section">
                  <h2>Detailed Reports</h2>
                  <ul>
                      <li><a href="e2e-results/index.html">E2E Test Report</a></li>
                      <li><a href="load-test-results/load_test_report.html">Load Test Report</a></li>
                  </ul>
              </div>
          </body>
          </html>
          EOF

      - name: Upload test report
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: test-report/

  # Job 8: Deployment (if all tests pass)
  deploy:
    needs: [api-tests, dashboard-tests, e2e-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add actual deployment steps here

      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests against staging..."
          # Add smoke test steps here

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment completed successfully"
          # Add notification steps (Slack, email, etc.)

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Deployment failed"
          # Add failure notification steps
