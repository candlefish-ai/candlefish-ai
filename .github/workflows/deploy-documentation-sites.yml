name: Deploy Documentation Sites

on:
  push:
    branches: [main]
    paths:
      - 'apps/docs-site/**'
      - 'apps/api-site/**'
      - 'apps/partners-site/**'
  pull_request:
    branches: [main]
    paths:
      - 'apps/docs-site/**'
      - 'apps/api-site/**'
      - 'apps/partners-site/**'

env:
  NODE_VERSION: '18.17.0'
  PNPM_VERSION: '8.15.6'

jobs:
  # Security scanning phase
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: false

      - name: Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium
        continue-on-error: true

  # Build and test phase
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        site: [docs-site, api-site, partners-site]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Sync brand assets
        run: pnpm brand:sync

      - name: Lint code
        run: pnpm turbo lint --filter=apps/${{ matrix.site }}

      - name: Type check
        run: pnpm turbo type-check --filter=apps/${{ matrix.site }}

      - name: Run unit tests
        run: pnpm turbo test --filter=apps/${{ matrix.site }}

      - name: Build site
        run: pnpm turbo build --filter=apps/${{ matrix.site }}
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          GENERATE_SOURCEMAP: false
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.site }}-build
          path: apps/${{ matrix.site }}/out
          retention-days: 1

  # Staging deployment (for PRs)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [security-scan, build-and-test]
    strategy:
      matrix:
        site: [docs-site, api-site, partners-site]
        include:
          - site: docs-site
            netlify_site_id: NETLIFY_DOCS_STAGING_SITE_ID
          - site: api-site
            netlify_site_id: NETLIFY_API_STAGING_SITE_ID
          - site: partners-site
            netlify_site_id: NETLIFY_PARTNERS_STAGING_SITE_ID

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.site }}-build
          path: ./build

      - name: Deploy to Netlify staging
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: './build'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions (PR #${{ github.event.pull_request.number }})"
          enable-commit-comment: true
          enable-pull-request-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets[matrix.netlify_site_id] }}

      - name: Run Lighthouse CI on staging
        uses: treosh/lighthouse-ci-action@v9
        with:
          configPath: './lighthouserc.js'
          temporaryPublicStorage: true
          uploadArtifacts: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Production deployment (main branch only)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [security-scan, build-and-test]
    strategy:
      matrix:
        site: [docs-site, api-site, partners-site]
        include:
          - site: docs-site
            netlify_site_id: NETLIFY_DOCS_SITE_ID
            domain: docs.candlefish.ai
          - site: api-site
            netlify_site_id: NETLIFY_API_SITE_ID
            domain: api.candlefish.ai
          - site: partners-site
            netlify_site_id: NETLIFY_PARTNERS_SITE_ID
            domain: partners.candlefish.ai

    environment:
      name: production-${{ matrix.site }}
      url: https://${{ matrix.domain }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.site }}-build
          path: ./build

      - name: Pre-deployment health check
        run: |
          echo "Performing pre-deployment checks..."
          # Check if build directory exists and has content
          if [ ! "$(ls -A ./build)" ]; then
            echo "Error: Build directory is empty"
            exit 1
          fi
          echo "‚úÖ Build artifacts validated"

      - name: Deploy to Netlify production
        uses: nwtgck/actions-netlify@v2.1
        with:
          publish-dir: './build'
          production-deploy: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Production deploy from GitHub Actions (commit: ${{ github.sha }})"
          enable-commit-comment: false
          alias: ${{ github.sha }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets[matrix.netlify_site_id] }}

      - name: Post-deployment health check
        run: |
          echo "Waiting for deployment to propagate..."
          sleep 30

          # Health check with retry logic
          for i in {1..5}; do
            if curl -f --max-time 30 https://${{ matrix.domain }}/health 2>/dev/null; then
              echo "‚úÖ Health check passed for ${{ matrix.domain }}"
              break
            elif [ $i -eq 5 ]; then
              echo "‚ùå Health check failed after 5 attempts"
              exit 1
            else
              echo "‚è≥ Health check attempt $i failed, retrying in 10s..."
              sleep 10
            fi
          done

      - name: Run production smoke tests
        run: |
          # Basic smoke tests
          curl -f --max-time 30 https://${{ matrix.domain }} || exit 1
          curl -f --max-time 30 https://${{ matrix.domain }}/api/health || exit 1
          echo "‚úÖ Smoke tests passed for ${{ matrix.domain }}"

      - name: Notify team on deployment
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          message: |
            üöÄ Production deployment ${{ job.status }} for ${{ matrix.site }}
            üìù Commit: ${{ github.sha }}
            üåê URL: https://${{ matrix.domain }}
            üë§ Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback job (manual trigger)
  rollback-production:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        site: [docs-site, api-site, partners-site]
        include:
          - site: docs-site
            netlify_site_id: NETLIFY_DOCS_SITE_ID
          - site: api-site
            netlify_site_id: NETLIFY_API_SITE_ID
          - site: partners-site
            netlify_site_id: NETLIFY_PARTNERS_SITE_ID

    steps:
      - name: Rollback to previous deployment
        run: |
          # Get the previous successful deployment
          PREV_DEPLOYMENT=$(curl -H "Authorization: Bearer ${{ secrets.NETLIFY_AUTH_TOKEN }}" \
            "https://api.netlify.com/api/v1/sites/${{ secrets[matrix.netlify_site_id] }}/deploys?per_page=10" \
            | jq -r '.[] | select(.state == "ready") | .id' | sed -n '2p')

          if [ -z "$PREV_DEPLOYMENT" ]; then
            echo "No previous deployment found for rollback"
            exit 1
          fi

          echo "Rolling back to deployment: $PREV_DEPLOYMENT"

          curl -X POST -H "Authorization: Bearer ${{ secrets.NETLIFY_AUTH_TOKEN }}" \
            "https://api.netlify.com/api/v1/sites/${{ secrets[matrix.netlify_site_id] }}/deploys/$PREV_DEPLOYMENT/restore"

          echo "‚úÖ Rollback initiated for ${{ matrix.site }}"

      - name: Verify rollback
        run: |
          sleep 60  # Wait for rollback to complete
          # Add verification logic here
          echo "‚úÖ Rollback verification completed"

# Workflow dispatch for manual operations
on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - rollback
      site:
        description: 'Site to deploy/rollback'
        required: true
        type: choice
        options:
          - docs-site
          - api-site
          - partners-site
          - all
