name: Optimized CI/CD Pipeline

# Cost-optimized triggers
on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/workflows/*.disabled'
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# Cost control settings
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Single job for analysis to reduce overhead
  analyze:
    name: Analyze & Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      skip_ci: ${{ steps.check.outputs.skip }}
      projects: ${{ steps.detect.outputs.projects }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Only need recent history

      - name: Check skip CI
        id: check
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"[skip ci]"* ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Detect changed projects
        id: detect
        if: steps.check.outputs.skip == 'false'
        run: |
          PROJECTS=""

          # Only check changed files for PRs
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            CHANGED=$(git diff --name-only HEAD^ HEAD)

            # Check each project directory
            for project in apps/website projects/paintbox apps/analytics-dashboard; do
              if echo "$CHANGED" | grep -q "^$project/"; then
                PROJECTS="$PROJECTS $project"
              fi
            done
          else
            # Build all for main branch
            PROJECTS="apps/website projects/paintbox apps/analytics-dashboard"
          fi

          echo "projects=$PROJECTS" >> $GITHUB_OUTPUT

      - name: Setup pnpm
        if: steps.check.outputs.skip == 'false'
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        if: steps.check.outputs.skip == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        if: steps.check.outputs.skip == 'false'
        run: |
          # Use frozen lockfile for consistency
          pnpm install --frozen-lockfile --prefer-offline

      - name: Run linting
        if: steps.check.outputs.skip == 'false'
        run: |
          pnpm run lint --cache --cache-location=.eslintcache

      - name: Type checking
        if: steps.check.outputs.skip == 'false'
        run: pnpm run typecheck

      - name: Security audit
        if: steps.check.outputs.skip == 'false'
        continue-on-error: true # Don't fail on audit issues
        run: pnpm audit --production --audit-level=high

  # Combined build and test job to reduce duplication
  build-test:
    name: Build & Test
    needs: analyze
    if: needs.analyze.outputs.skip_ci == 'false' && needs.analyze.outputs.projects != ''
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: true # Stop on first failure to save costs
      matrix:
        project: ${{ fromJson(format('[{0}]', needs.analyze.outputs.projects)) }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      # Aggressive caching strategy
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
            .next/cache
            .turbo
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ matrix.project }}
          restore-keys: |
            ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}-
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Run tests
        run: |
          # Run tests for specific project
          pnpm --filter="${{ matrix.project }}" test:unit -- --passWithNoTests

      - name: Build project
        run: |
          # Use Turbo for incremental builds
          pnpm turbo build --filter="${{ matrix.project }}" --cache-dir=.turbo

      - name: Upload build artifacts
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.project }}-${{ github.sha }}
          path: |
            ${{ matrix.project }}/dist
            ${{ matrix.project }}/.next
          retention-days: 1 # Reduce retention to save storage costs

  # Simplified deployment job
  deploy:
    name: Deploy
    needs: build-test
    if: |
      github.ref == 'refs/heads/main' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: us-east-1

      - name: Deploy to environment
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"

          # Simple S3 sync for static sites
          for project in apps/website projects/paintbox; do
            if [ -d "build-$project-${{ github.sha }}" ]; then
              aws s3 sync "build-$project-${{ github.sha }}" \
                "s3://candlefish-${ENVIRONMENT}-${project}/" \
                --delete \
                --cache-control "public, max-age=31536000, immutable"
            fi
          done

          # Invalidate CloudFront
          if [ "$ENVIRONMENT" = "production" ]; then
            aws cloudfront create-invalidation \
              --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
              --paths "/*"
          fi

      - name: Health check
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
          URL="https://${ENVIRONMENT}.candlefish.ai"

          # Simple health check
          for i in {1..5}; do
            if curl -f "$URL/health" > /dev/null 2>&1; then
              echo "✅ Deployment successful"
              exit 0
            fi
            sleep 10
          done

          echo "❌ Health check failed"
          exit 1

  # Notification job (only on failure)
  notify:
    name: Notify
    needs: [analyze, build-test, deploy]
    if: failure()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Send Slack notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            curl -X POST $SLACK_WEBHOOK_URL \
              -H 'Content-Type: application/json' \
              -d '{
                "text": "❌ Pipeline failed for ${{ github.repository }}",
                "blocks": [{
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}\n*Workflow:* ${{ github.workflow }}"
                  }
                }]
              }'
          fi

# Cost optimization summary:
# - Reduced from 7 parallel jobs to 3-4 max
# - Eliminated chaos engineering from PRs
# - Added skip CI capability
# - Aggressive caching strategy
# - Reduced artifact retention
# - Only build changed projects
# - Fail fast to stop wasting resources
# - Simplified deployment process
# - Notifications only on failure
# Estimated savings: 60-70% reduction in GitHub Actions minutes
