name: Collaboration System - Build and Deploy

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/collaboration-editor/**'
      - 'apps/mobile-collaboration/**'
      - 'graphql/**'
      - 'services/**'
      - 'deployment/**'
      - '.github/workflows/collaboration-deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'apps/collaboration-editor/**'
      - 'apps/mobile-collaboration/**'
      - 'graphql/**'
      - 'services/**'
      - 'deployment/**'

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: candlefish-collaboration
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

jobs:
  # Pre-deployment checks and testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: collaboration_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Type checking
      run: pnpm type-check

    - name: Lint code
      run: pnpm lint

    - name: Run unit tests
      run: pnpm test:unit
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/collaboration_test
        REDIS_URL: redis://localhost:6379

    - name: Run integration tests
      run: pnpm test:integration
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/collaboration_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test_secret

    - name: Run E2E tests
      run: pnpm test:e2e
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/collaboration_test
        REDIS_URL: redis://localhost:6379

    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: collaboration-coverage

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Audit npm dependencies
      run: pnpm audit --audit-level moderate

  # Build Docker images
  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    timeout-minutes: 30

    strategy:
      matrix:
        service: [graphql-api, websocket-service, document-service, collaboration-editor]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.ECR_REGISTRY }}/candlefish/collaboration-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/docker/Dockerfile.${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    timeout-minutes: 20
    environment:
      name: staging
      url: https://editor-staging.candlefish.ai

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Deploy to staging with Helm
      run: |
        helm upgrade --install collaboration-staging ./deployment/helm/candlefish \
          --namespace collaboration-staging \
          --create-namespace \
          --values ./deployment/helm/candlefish/values-staging.yaml \
          --set image.tag=${{ github.sha }} \
          --set environment=staging \
          --wait --timeout=600s

    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=candlefish-collaboration \
          --namespace=collaboration-staging --timeout=300s
        pnpm test:smoke --env=staging

    - name: Notify Slack on deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 30
    environment:
      name: production
      url: https://editor.candlefish.ai

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Pre-deployment health check
      run: |
        kubectl get nodes
        kubectl get pods -n collaboration -o wide

    - name: Deploy to production with Blue-Green strategy
      id: deploy
      run: |
        # Create blue-green deployment
        export NEW_RELEASE="collaboration-$(date +%Y%m%d-%H%M%S)"
        echo "release_name=$NEW_RELEASE" >> $GITHUB_OUTPUT

        helm upgrade --install $NEW_RELEASE ./deployment/helm/candlefish \
          --namespace collaboration \
          --values ./deployment/helm/candlefish/values-prod.yaml \
          --set image.tag=${{ github.sha }} \
          --set environment=production \
          --set blueGreen.enabled=true \
          --set blueGreen.activeSlot=green \
          --wait --timeout=900s

    - name: Run production health checks
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=candlefish-collaboration \
          --namespace=collaboration --timeout=600s
        pnpm test:health --env=production

    - name: Switch traffic to new deployment
      run: |
        # Update ingress to point to new deployment
        kubectl patch ingress collaboration-ingress -n collaboration \
          --type merge -p '{"spec":{"rules":[{"host":"editor.candlefish.ai","http":{"paths":[{"path":"/","pathType":"Prefix","backend":{"service":{"name":"'${{ steps.deploy.outputs.release_name }}'","port":{"number":3000}}}}]}}]}}'

    - name: Monitor deployment for 5 minutes
      run: |
        echo "Monitoring new deployment..."
        for i in {1..5}; do
          kubectl get pods -n collaboration -l app.kubernetes.io/instance=${{ steps.deploy.outputs.release_name }}
          pnpm test:health --env=production
          sleep 60
        done

    - name: Clean up old deployments
      run: |
        # Keep only the 3 most recent releases
        helm list -n collaboration --max 10 -o json | \
        jq -r '.[] | select(.name | startswith("collaboration-")) | .name' | \
        sort -r | tail -n +4 | \
        xargs -I {} helm uninstall {} -n collaboration

    - name: Notify Slack on successful production deployment
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        text: |
          🚀 Production deployment successful!
          Release: ${{ steps.deploy.outputs.release_name }}
          Commit: ${{ github.sha }}
          URL: https://editor.candlefish.ai

    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, initiating rollback..."
        helm rollback collaboration -n collaboration
        kubectl patch ingress collaboration-ingress -n collaboration --type merge -p '{"spec":{"rules":[{"host":"editor.candlefish.ai","http":{"paths":[{"path":"/","pathType":"Prefix","backend":{"service":{"name":"collaboration-editor-service","port":{"number":3000}}}}]}}]}}'

    - name: Notify Slack on deployment failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        text: |
          🚨 Production deployment failed and rolled back!
          Commit: ${{ github.sha }}
          Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  # Mobile app deployment
  deploy-mobile:
    name: Deploy Mobile App
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 45

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Install dependencies
      run: |
        cd apps/mobile-collaboration
        pnpm install --frozen-lockfile

    - name: Setup Expo CLI
      uses: expo/expo-github-action@v8
      with:
        expo-version: latest
        token: ${{ secrets.EXPO_TOKEN }}

    - name: Build and deploy OTA update
      run: |
        cd apps/mobile-collaboration
        expo publish --release-channel=production

    - name: Build Android App Bundle
      if: contains(github.event.head_commit.message, '[build-android]')
      run: |
        cd apps/mobile-collaboration
        eas build --platform android --profile production --non-interactive

    - name: Build iOS App
      if: contains(github.event.head_commit.message, '[build-ios]')
      run: |
        cd apps/mobile-collaboration
        eas build --platform ios --profile production --non-interactive

    - name: Submit to app stores
      if: contains(github.event.head_commit.message, '[submit-stores]')
      run: |
        cd apps/mobile-collaboration
        eas submit --platform all --profile production --non-interactive
