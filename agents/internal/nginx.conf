user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript
               application/json application/javascript application/xml+rss;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=ws_limit:10m rate=50r/s;

    # Upstream definitions
    upstream orchestrator {
        least_conn;
        server orchestrator:7010 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream websocket {
        ip_hash;
        server orchestrator:7500;
        keepalive 64;
    }

    upstream pkb {
        least_conn;
        server pkb:7001 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream paintbox {
        least_conn;
        server paintbox:7003 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    upstream clark {
        server clark-scraper:7004 max_fails=3 fail_timeout=30s;
        keepalive 16;
    }

    upstream intelligence {
        least_conn;
        server intelligence:7005 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name nanda.candlefish.ai;
        return 301 https://$server_name$request_uri;
    }

    # Main HTTPS server
    server {
        listen 443 ssl http2;
        server_name nanda.candlefish.ai;

        # SSL configuration
        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # CORS headers for NANDA protocol
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Agent-ID" always;

        # Root location - dashboard
        location / {
            root /usr/share/nginx/html;
            index dashboard.html index.html;
            try_files $uri $uri/ =404;
        }

        # Orchestrator endpoints
        location /orchestrate {
            limit_req zone=api_limit burst=20 nodelay;

            proxy_pass http://orchestrator;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        location /agents {
            limit_req zone=api_limit burst=10 nodelay;

            proxy_pass http://orchestrator;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # WebSocket endpoint
        location /ws {
            limit_req zone=ws_limit burst=10 nodelay;

            proxy_pass http://websocket;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 3600s;
        }

        # Agent-specific endpoints
        location /api/pkb/ {
            limit_req zone=api_limit burst=20 nodelay;

            rewrite ^/api/pkb/(.*)$ /$1 break;
            proxy_pass http://pkb;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location /api/paintbox/ {
            limit_req zone=api_limit burst=20 nodelay;

            rewrite ^/api/paintbox/(.*)$ /$1 break;
            proxy_pass http://paintbox;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location /api/clark/ {
            limit_req zone=api_limit burst=10 nodelay;

            rewrite ^/api/clark/(.*)$ /$1 break;
            proxy_pass http://clark;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location /api/intelligence/ {
            limit_req zone=api_limit burst=20 nodelay;

            rewrite ^/api/intelligence/(.*)$ /$1 break;
            proxy_pass http://intelligence;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # NANDA Protocol Discovery endpoint
        location /.well-known/nanda {
            default_type application/json;
            return 200 '{
                "version": "1.0.0",
                "name": "Candlefish NANDA Network",
                "description": "Production NANDA agent network for Candlefish.ai services",
                "endpoints": {
                    "orchestrator": "https://nanda.candlefish.ai/orchestrate",
                    "agents": "https://nanda.candlefish.ai/agents",
                    "websocket": "wss://nanda.candlefish.ai/ws"
                },
                "capabilities": [
                    "task-orchestration",
                    "consortium-formation",
                    "paint-estimation",
                    "permit-monitoring",
                    "knowledge-management",
                    "intelligence-synthesis"
                ],
                "authentication": "JWT Bearer",
                "documentation": "https://docs.candlefish.ai/nanda"
            }';
        }

        # Health check endpoint
        location /health {
            access_log off;
            default_type application/json;
            return 200 '{"status":"healthy","service":"nanda-gateway"}';
        }

        # Metrics endpoint (internal only)
        location /metrics {
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;

            proxy_pass http://orchestrator/metrics;
        }
    }
}
