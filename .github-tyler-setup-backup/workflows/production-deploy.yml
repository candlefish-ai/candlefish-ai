name: Production Deployment Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests (emergency only)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write

jobs:
  security-scan:
    name: Security & Vulnerability Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Dependency vulnerability scan
        run: |
          npm audit --audit-level=high
          npx audit-ci --high

      - name: Secret detection with GitLeaks
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  test-and-build:
    name: Test & Build Application
    runs-on: ubuntu-latest
    needs: security-scan
    if: ${{ !inputs.skip_tests }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: paintbox_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          cd paintbox-backend && npm ci --prefer-offline --no-audit

      - name: Set up test environment
        run: |
          cp .env.local.example .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/paintbox_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/paintbox_test

      - name: Run unit tests
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test

      - name: Run security tests
        run: npm run test:security
        env:
          NODE_ENV: test

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info

      - name: Build application
        run: |
          npm run build
          cd paintbox-backend && npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next
            paintbox-backend/dist
          retention-days: 7

  build-and-push-images:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    strategy:
      matrix:
        component: [frontend, backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.component == 'backend' && './paintbox-backend' || '.' }}
          file: ${{ matrix.component == 'backend' && './paintbox-backend/Dockerfile' || './Dockerfile' }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}:latest
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push-images
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment:
      name: staging
      url: https://paintbox-staging.vercel.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Deploy to Vercel (Frontend)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./

      - name: Deploy to Railway (Backend)
        run: |
          npm install -g @railway/cli
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway link ${{ secrets.RAILWAY_PROJECT_ID }}
          railway up --detach
        working-directory: ./paintbox-backend

      - name: Run smoke tests
        run: |
          npm run test:smoke
        env:
          TEST_URL: https://paintbox-staging.vercel.app

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'workflow_dispatch' && inputs.environment == 'production'
    environment:
      name: production
      url: https://paintbox.vercel.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Pre-deployment backup
        run: |
          aws secretsmanager create-secret \
            --name "paintbox-backup-$(date +%Y%m%d-%H%M%S)" \
            --description "Production backup before deployment" \
            --secret-string "$(aws secretsmanager get-secret-value --secret-id paintbox-production --query SecretString --output text)"

      - name: Deploy to Vercel (Frontend)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PRODUCTION_PROJECT_ID }}
          working-directory: ./

      - name: Deploy to Railway (Backend)
        run: |
          npm install -g @railway/cli
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway link ${{ secrets.RAILWAY_PRODUCTION_PROJECT_ID }}
          railway up --detach
        working-directory: ./paintbox-backend

      - name: Run production smoke tests
        run: |
          npm run test:smoke:production
        env:
          TEST_URL: https://paintbox.vercel.app

      - name: Update monitoring dashboards
        run: |
          aws cloudwatch put-dashboard \
            --dashboard-name "Paintbox-Production" \
            --dashboard-body file://monitoring/cloudwatch-dashboard.json

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: 'success'
          channel: '#production'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          custom_payload: |
            {
              "attachments": [{
                "color": "good",
                "title": "🚀 Production Deployment Successful",
                "text": "Paintbox application has been successfully deployed to production",
                "fields": [{
                  "title": "Version",
                  "value": "${{ github.sha }}",
                  "short": true
                }, {
                  "title": "Environment",
                  "value": "Production",
                  "short": true
                }]
              }]
            }

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Rotate secrets (scheduled)
        if: github.event.schedule
        run: |
          aws lambda invoke \
            --function-name secret-rotation-function \
            --payload '{"secretId": "paintbox-production"}' \
            response.json

      - name: Update security groups
        run: |
          # Update WAF rules based on deployment
          aws wafv2 update-web-acl \
            --scope CLOUDFRONT \
            --id ${{ secrets.WAF_WEB_ACL_ID }} \
            --cli-input-json file://security/waf-rules.json

      - name: Health check monitoring
        run: |
          # Set up health check monitoring
          aws route53 create-health-check \
            --caller-reference "paintbox-$(date +%s)" \
            --health-check-config file://monitoring/health-check.json
