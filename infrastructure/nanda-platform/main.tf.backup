terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
  
  backend "s3" {
    bucket = "candlefish-nanda-tf-state-1755830988"
    key    = "nanda-platform/terraform.tfstate"
    region = "us-east-1"
  }
}

provider "aws" {
  region = var.aws_region
  
  default_tags {
    tags = {
      Project     = "NANDA-Index"
      Environment = var.environment
      Owner       = "Candlefish"
      ManagedBy   = "Terraform"
    }
  }
}

# Data sources
data "aws_availability_zones" "available" {
  state = "available"
}

data "aws_caller_identity" "current" {}

# VPC and Networking
resource "aws_vpc" "nanda_vpc" {
  cidr_block           = var.vpc_cidr
  enable_dns_hostnames = true
  enable_dns_support   = true
  
  tags = {
    Name = "${var.project_name}-vpc"
  }
}

resource "aws_internet_gateway" "nanda_igw" {
  vpc_id = aws_vpc.nanda_vpc.id
  
  tags = {
    Name = "${var.project_name}-igw"
  }
}

resource "aws_subnet" "public_subnets" {
  count = length(var.public_subnet_cidrs)
  
  vpc_id                  = aws_vpc.nanda_vpc.id
  cidr_block              = var.public_subnet_cidrs[count.index]
  availability_zone       = data.aws_availability_zones.available.names[count.index]
  map_public_ip_on_launch = true
  
  tags = {
    Name = "${var.project_name}-public-subnet-${count.index + 1}"
    Type = "Public"
  }
}

resource "aws_subnet" "private_subnets" {
  count = length(var.private_subnet_cidrs)
  
  vpc_id            = aws_vpc.nanda_vpc.id
  cidr_block        = var.private_subnet_cidrs[count.index]
  availability_zone = data.aws_availability_zones.available.names[count.index]
  
  tags = {
    Name = "${var.project_name}-private-subnet-${count.index + 1}"
    Type = "Private"
  }
}

resource "aws_nat_gateway" "nanda_nat" {
  count = length(aws_subnet.public_subnets)
  
  allocation_id = aws_eip.nat_eips[count.index].id
  subnet_id     = aws_subnet.public_subnets[count.index].id
  
  tags = {
    Name = "${var.project_name}-nat-gateway-${count.index + 1}"
  }
  
  depends_on = [aws_internet_gateway.nanda_igw]
}

resource "aws_eip" "nat_eips" {
  count = length(aws_subnet.public_subnets)
  
  domain = "vpc"
  
  tags = {
    Name = "${var.project_name}-nat-eip-${count.index + 1}"
  }
}

resource "aws_route_table" "public_rt" {
  vpc_id = aws_vpc.nanda_vpc.id
  
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.nanda_igw.id
  }
  
  tags = {
    Name = "${var.project_name}-public-rt"
  }
}

resource "aws_route_table" "private_rt" {
  count = length(aws_nat_gateway.nanda_nat)
  
  vpc_id = aws_vpc.nanda_vpc.id
  
  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.nanda_nat[count.index].id
  }
  
  tags = {
    Name = "${var.project_name}-private-rt-${count.index + 1}"
  }
}

resource "aws_route_table_association" "public_rta" {
  count = length(aws_subnet.public_subnets)
  
  subnet_id      = aws_subnet.public_subnets[count.index].id
  route_table_id = aws_route_table.public_rt.id
}

resource "aws_route_table_association" "private_rta" {
  count = length(aws_subnet.private_subnets)
  
  subnet_id      = aws_subnet.private_subnets[count.index].id
  route_table_id = aws_route_table.private_rt[count.index].id
}

# Security Groups
resource "aws_security_group" "alb_sg" {
  name_prefix = "${var.project_name}-alb-"
  vpc_id      = aws_vpc.nanda_vpc.id
  
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  tags = {
    Name = "${var.project_name}-alb-sg"
  }
}

resource "aws_security_group" "ecs_sg" {
  name_prefix = "${var.project_name}-ecs-"
  vpc_id      = aws_vpc.nanda_vpc.id
  
  ingress {
    from_port       = 3000
    to_port         = 3000
    protocol        = "tcp"
    security_groups = [aws_security_group.alb_sg.id]
  }
  
  ingress {
    from_port       = 3001
    to_port         = 3001
    protocol        = "tcp"
    security_groups = [aws_security_group.alb_sg.id]
  }
  
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  tags = {
    Name = "${var.project_name}-ecs-sg"
  }
}

resource "aws_security_group" "redis_sg" {
  name_prefix = "${var.project_name}-redis-"
  vpc_id      = aws_vpc.nanda_vpc.id
  
  ingress {
    from_port       = 6379
    to_port         = 6379
    protocol        = "tcp"
    security_groups = [aws_security_group.ecs_sg.id]
  }
  
  tags = {
    Name = "${var.project_name}-redis-sg"
  }
}

# DynamoDB Tables
resource "aws_dynamodb_table" "agents" {
  name           = "${var.project_name}-agents"
  billing_mode   = "PAY_PER_REQUEST"
  hash_key       = "agent_id"
  stream_enabled = true
  stream_view_type = "NEW_AND_OLD_IMAGES"
  
  attribute {
    name = "agent_id"
    type = "S"
  }
  
  attribute {
    name = "platform"
    type = "S"
  }
  
  attribute {
    name = "created_at"
    type = "N"
  }
  
  global_secondary_index {
    name            = "platform-created-index"
    hash_key        = "platform"
    range_key       = "created_at"
    projection_type = "ALL"
  }
  
  point_in_time_recovery {
    enabled = true
  }
  
  tags = {
    Name = "${var.project_name}-agents-table"
  }
}

resource "aws_dynamodb_table" "agent_facts" {
  name         = "${var.project_name}-agent-facts"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "agent_id"
  range_key    = "fact_id"
  
  attribute {
    name = "agent_id"
    type = "S"
  }
  
  attribute {
    name = "fact_id"
    type = "S"
  }
  
  point_in_time_recovery {
    enabled = true
  }
  
  tags = {
    Name = "${var.project_name}-agent-facts-table"
  }
}

resource "aws_dynamodb_table" "network_topology" {
  name         = "${var.project_name}-network-topology"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "node_id"
  
  attribute {
    name = "node_id"
    type = "S"
  }
  
  tags = {
    Name = "${var.project_name}-network-topology-table"
  }
}

# ElastiCache Redis Cluster
resource "aws_elasticache_subnet_group" "redis_subnet_group" {
  name       = "${var.project_name}-redis-subnet-group"
  subnet_ids = aws_subnet.private_subnets[*].id
}

resource "aws_elasticache_replication_group" "redis" {
  replication_group_id       = "${var.project_name}-redis"
  description                = "Redis cluster for NANDA Index caching and pub/sub"
  
  port                       = 6379
  parameter_group_name       = "default.redis7"
  node_type                 = var.redis_instance_type
  num_cache_clusters        = var.redis_num_nodes
  
  subnet_group_name          = aws_elasticache_subnet_group.redis_subnet_group.name
  security_group_ids         = [aws_security_group.redis_sg.id]
  
  at_rest_encryption_enabled = true
  transit_encryption_enabled = true
  auth_token                 = var.redis_auth_token
  
  multi_az_enabled          = true
  automatic_failover_enabled = true
  
  tags = {
    Name = "${var.project_name}-redis-cluster"
  }
}

# S3 Buckets
resource "aws_s3_bucket" "nanda_artifacts" {
  bucket = "${var.project_name}-artifacts-${random_id.bucket_suffix.hex}"
  
  tags = {
    Name = "${var.project_name}-artifacts"
  }
}

resource "aws_s3_bucket" "nanda_backups" {
  bucket = "${var.project_name}-backups-${random_id.bucket_suffix.hex}"
  
  tags = {
    Name = "${var.project_name}-backups"
  }
}

resource "random_id" "bucket_suffix" {
  byte_length = 4
}

resource "aws_s3_bucket_versioning" "nanda_artifacts_versioning" {
  bucket = aws_s3_bucket.nanda_artifacts.id
  
  versioning_configuration {
    status = "Enabled"
  }
}

resource "aws_s3_bucket_server_side_encryption_configuration" "nanda_artifacts_encryption" {
  bucket = aws_s3_bucket.nanda_artifacts.id
  
  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm = "AES256"
    }
  }
}

# ECR Repositories
resource "aws_ecr_repository" "nanda_api" {
  name                 = "${var.project_name}/nanda-api"
  image_tag_mutability = "MUTABLE"
  
  image_scanning_configuration {
    scan_on_push = true
  }
  
  encryption_configuration {
    encryption_type = "AES256"
  }
  
  tags = {
    Name = "${var.project_name}-nanda-api-repo"
  }
}

resource "aws_ecr_repository" "nanda_dashboard" {
  name                 = "${var.project_name}/nanda-dashboard"
  image_tag_mutability = "MUTABLE"
  
  image_scanning_configuration {
    scan_on_push = true
  }
  
  encryption_configuration {
    encryption_type = "AES256"
  }
  
  tags = {
    Name = "${var.project_name}-nanda-dashboard-repo"
  }
}

# ECS Cluster
resource "aws_ecs_cluster" "nanda_cluster" {
  name = "${var.project_name}-cluster"
  
  configuration {
    execute_command_configuration {
      logging = "OVERRIDE"
      log_configuration {
        cloud_watch_log_group_name = aws_cloudwatch_log_group.ecs_logs.name
      }
    }
  }
  
  tags = {
    Name = "${var.project_name}-ecs-cluster"
  }
}

resource "aws_ecs_cluster_capacity_providers" "nanda_capacity_providers" {
  cluster_name = aws_ecs_cluster.nanda_cluster.name
  
  capacity_providers = ["FARGATE", "FARGATE_SPOT"]
  
  default_capacity_provider_strategy {
    capacity_provider = "FARGATE"
    weight           = 1
  }
}

# CloudWatch Log Groups
resource "aws_cloudwatch_log_group" "ecs_logs" {
  name              = "/aws/ecs/${var.project_name}"
  retention_in_days = 30
  
  tags = {
    Name = "${var.project_name}-ecs-logs"
  }
}

resource "aws_cloudwatch_log_group" "nanda_api_logs" {
  name              = "/aws/ecs/${var.project_name}/nanda-api"
  retention_in_days = 30
  
  tags = {
    Name = "${var.project_name}-nanda-api-logs"
  }
}

resource "aws_cloudwatch_log_group" "nanda_dashboard_logs" {
  name              = "/aws/ecs/${var.project_name}/nanda-dashboard"
  retention_in_days = 30
  
  tags = {
    Name = "${var.project_name}-nanda-dashboard-logs"
  }
}

# Application Load Balancer
resource "aws_lb" "nanda_alb" {
  name               = "${var.project_name}-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.alb_sg.id]
  subnets           = aws_subnet.public_subnets[*].id
  
  enable_deletion_protection = false
  
  tags = {
    Name = "${var.project_name}-alb"
  }
}

resource "aws_lb_target_group" "nanda_api_tg" {
  name        = "${var.project_name}-api-tg"
  port        = 3000
  protocol    = "HTTP"
  vpc_id      = aws_vpc.nanda_vpc.id
  target_type = "ip"
  
  health_check {
    enabled             = true
    healthy_threshold   = 2
    unhealthy_threshold = 2
    timeout             = 5
    interval            = 30
    path                = "/health"
    matcher             = "200"
    port                = "traffic-port"
    protocol            = "HTTP"
  }
  
  tags = {
    Name = "${var.project_name}-api-target-group"
  }
}

resource "aws_lb_target_group" "nanda_dashboard_tg" {
  name        = "${var.project_name}-dash-tg"
  port        = 3001
  protocol    = "HTTP"
  vpc_id      = aws_vpc.nanda_vpc.id
  target_type = "ip"
  
  health_check {
    enabled             = true
    healthy_threshold   = 2
    unhealthy_threshold = 2
    timeout             = 5
    interval            = 30
    path                = "/health"
    matcher             = "200"
    port                = "traffic-port"
    protocol            = "HTTP"
  }
  
  tags = {
    Name = "${var.project_name}-dashboard-target-group"
  }
}

resource "aws_lb_listener" "nanda_listener" {
  load_balancer_arn = aws_lb.nanda_alb.arn
  port              = "80"
  protocol          = "HTTP"
  
  default_action {
    type             = "redirect"
    redirect {
      port        = "443"
      protocol    = "HTTPS"
      status_code = "HTTP_301"
    }
  }
}

resource "aws_lb_listener" "nanda_https_listener" {
  load_balancer_arn = aws_lb.nanda_alb.arn
  port              = "443"
  protocol          = "HTTPS"
  ssl_policy        = "ELBSecurityPolicy-TLS-1-2-2017-01"
  certificate_arn   = aws_acm_certificate_validation.nanda_cert_validation.certificate_arn
  
  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.nanda_dashboard_tg.arn
  }
}

resource "aws_lb_listener_rule" "nanda_api_rule" {
  listener_arn = aws_lb_listener.nanda_https_listener.arn
  priority     = 100
  
  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.nanda_api_tg.arn
  }
  
  condition {
    path_pattern {
      values = ["/api/*", "/graphql", "/metrics", "/health"]
    }
  }
}

# Route53 and SSL Certificate
resource "aws_route53_zone" "nanda_zone" {
  name = var.domain_name
  
  tags = {
    Name = "${var.project_name}-zone"
  }
}

resource "aws_route53_record" "nanda_record" {
  zone_id = aws_route53_zone.nanda_zone.zone_id
  name    = var.domain_name
  type    = "A"
  
  alias {
    name                   = aws_lb.nanda_alb.dns_name
    zone_id                = aws_lb.nanda_alb.zone_id
    evaluate_target_health = true
  }
}

resource "aws_route53_record" "nanda_api_record" {
  zone_id = aws_route53_zone.nanda_zone.zone_id
  name    = "api.${var.domain_name}"
  type    = "A"
  
  alias {
    name                   = aws_lb.nanda_alb.dns_name
    zone_id                = aws_lb.nanda_alb.zone_id
    evaluate_target_health = true
  }
}

resource "aws_acm_certificate" "nanda_cert" {
  domain_name               = var.domain_name
  subject_alternative_names = ["*.${var.domain_name}"]
  validation_method         = "DNS"
  
  lifecycle {
    create_before_destroy = true
  }
  
  tags = {
    Name = "${var.project_name}-certificate"
  }
}

resource "aws_route53_record" "nanda_cert_validation" {
  for_each = {
    for dvo in aws_acm_certificate.nanda_cert.domain_validation_options : dvo.domain_name => {
      name   = dvo.resource_record_name
      record = dvo.resource_record_value
      type   = dvo.resource_record_type
    }
  }
  
  allow_overwrite = true
  name            = each.value.name
  records         = [each.value.record]
  ttl             = 60
  type            = each.value.type
  zone_id         = aws_route53_zone.nanda_zone.zone_id
}

resource "aws_acm_certificate_validation" "nanda_cert_validation" {
  certificate_arn         = aws_acm_certificate.nanda_cert.arn
  validation_record_fqdns = [for record in aws_route53_record.nanda_cert_validation : record.fqdn]
}

# IAM Roles and Policies
resource "aws_iam_role" "ecs_task_role" {
  name = "${var.project_name}-ecs-task-role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ecs-tasks.amazonaws.com"
        }
      }
    ]
  })
  
  tags = {
    Name = "${var.project_name}-ecs-task-role"
  }
}

resource "aws_iam_role" "ecs_execution_role" {
  name = "${var.project_name}-ecs-execution-role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ecs-tasks.amazonaws.com"
        }
      }
    ]
  })
  
  tags = {
    Name = "${var.project_name}-ecs-execution-role"
  }
}

resource "aws_iam_role_policy_attachment" "ecs_execution_role_policy" {
  role       = aws_iam_role.ecs_execution_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
}

resource "aws_iam_role_policy" "nanda_task_policy" {
  name = "${var.project_name}-task-policy"
  role = aws_iam_role.ecs_task_role.id
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "dynamodb:GetItem",
          "dynamodb:PutItem",
          "dynamodb:UpdateItem",
          "dynamodb:DeleteItem",
          "dynamodb:Query",
          "dynamodb:Scan",
          "dynamodb:BatchGetItem",
          "dynamodb:BatchWriteItem"
        ]
        Resource = [
          aws_dynamodb_table.agents.arn,
          aws_dynamodb_table.agent_facts.arn,
          aws_dynamodb_table.network_topology.arn,
          "${aws_dynamodb_table.agents.arn}/index/*",
          "${aws_dynamodb_table.agent_facts.arn}/index/*",
          "${aws_dynamodb_table.network_topology.arn}/index/*"
        ]
      },
      {
        Effect = "Allow"
        Action = [
          "s3:GetObject",
          "s3:PutObject",
          "s3:DeleteObject"
        ]
        Resource = [
          "${aws_s3_bucket.nanda_artifacts.arn}/*",
          "${aws_s3_bucket.nanda_backups.arn}/*"
        ]
      },
      {
        Effect = "Allow"
        Action = [
          "secretsmanager:GetSecretValue"
        ]
        Resource = "arn:aws:secretsmanager:${var.aws_region}:${data.aws_caller_identity.current.account_id}:secret:${var.project_name}/*"
      },
      {
        Effect = "Allow"
        Action = [
          "logs:CreateLogStream",
          "logs:PutLogEvents"
        ]
        Resource = [
          aws_cloudwatch_log_group.nanda_api_logs.arn,
          aws_cloudwatch_log_group.nanda_dashboard_logs.arn,
          "${aws_cloudwatch_log_group.nanda_api_logs.arn}:*",
          "${aws_cloudwatch_log_group.nanda_dashboard_logs.arn}:*"
        ]
      },
      {
        Effect = "Allow"
        Action = [
          "cloudwatch:PutMetricData"
        ]
        Resource = "*"
      }
    ]
  })
}

# Auto Scaling
resource "aws_appautoscaling_target" "ecs_target" {
  max_capacity       = var.ecs_max_capacity
  min_capacity       = var.ecs_min_capacity
  resource_id        = "service/${aws_ecs_cluster.nanda_cluster.name}/${aws_ecs_service.nanda_api.name}"
  scalable_dimension = "ecs:service:DesiredCount"
  service_namespace  = "ecs"
}

resource "aws_appautoscaling_policy" "ecs_scale_up" {
  name               = "${var.project_name}-scale-up"
  policy_type        = "StepScaling"
  resource_id        = aws_appautoscaling_target.ecs_target.resource_id
  scalable_dimension = aws_appautoscaling_target.ecs_target.scalable_dimension
  service_namespace  = aws_appautoscaling_target.ecs_target.service_namespace
  
  step_scaling_policy_configuration {
    adjustment_type         = "ChangeInCapacity"
    cooldown               = 300
    metric_aggregation_type = "Average"
    
    step_adjustment {
      metric_interval_lower_bound = 0
      scaling_adjustment         = 2
    }
  }
}

resource "aws_appautoscaling_policy" "ecs_scale_down" {
  name               = "${var.project_name}-scale-down"
  policy_type        = "StepScaling"
  resource_id        = aws_appautoscaling_target.ecs_target.resource_id
  scalable_dimension = aws_appautoscaling_target.ecs_target.scalable_dimension
  service_namespace  = aws_appautoscaling_target.ecs_target.service_namespace
  
  step_scaling_policy_configuration {
    adjustment_type         = "ChangeInCapacity"
    cooldown               = 300
    metric_aggregation_type = "Average"
    
    step_adjustment {
      metric_interval_upper_bound = 0
      scaling_adjustment         = -1
    }
  }
}

# CloudWatch Alarms
resource "aws_cloudwatch_metric_alarm" "cpu_high" {
  alarm_name          = "${var.project_name}-cpu-high"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = "2"
  metric_name         = "CPUUtilization"
  namespace           = "AWS/ECS"
  period              = "120"
  statistic           = "Average"
  threshold           = "80"
  alarm_description   = "This metric monitors ECS CPU utilization"
  alarm_actions       = [aws_appautoscaling_policy.ecs_scale_up.arn]
  
  dimensions = {
    ServiceName = aws_ecs_service.nanda_api.name
    ClusterName = aws_ecs_cluster.nanda_cluster.name
  }
}

resource "aws_cloudwatch_metric_alarm" "cpu_low" {
  alarm_name          = "${var.project_name}-cpu-low"
  comparison_operator = "LessThanThreshold"
  evaluation_periods  = "2"
  metric_name         = "CPUUtilization"
  namespace           = "AWS/ECS"
  period              = "120"
  statistic           = "Average"
  threshold           = "20"
  alarm_description   = "This metric monitors ECS CPU utilization"
  alarm_actions       = [aws_appautoscaling_policy.ecs_scale_down.arn]
  
  dimensions = {
    ServiceName = aws_ecs_service.nanda_api.name
    ClusterName = aws_ecs_cluster.nanda_cluster.name
  }
}