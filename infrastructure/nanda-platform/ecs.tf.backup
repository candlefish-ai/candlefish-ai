# ECS Task Definitions
resource "aws_ecs_task_definition" "nanda_api" {
  family                   = "${var.project_name}-api"
  requires_compatibilities = ["FARGATE"]
  network_mode             = "awsvpc"
  cpu                      = var.cpu_units
  memory                   = var.memory
  execution_role_arn       = aws_iam_role.ecs_execution_role.arn
  task_role_arn           = aws_iam_role.ecs_task_role.arn

  container_definitions = jsonencode([
    {
      name  = "nanda-api"
      image = "${aws_ecr_repository.nanda_api.repository_url}:${var.api_image_tag}"

      portMappings = [
        {
          containerPort = 3000
          hostPort      = 3000
          protocol      = "tcp"
        }
      ]

      environment = [
        {
          name  = "NODE_ENV"
          value = var.environment
        },
        {
          name  = "AWS_REGION"
          value = var.aws_region
        },
        {
          name  = "DYNAMO_TABLE_AGENTS"
          value = aws_dynamodb_table.agents.name
        },
        {
          name  = "DYNAMO_TABLE_AGENT_FACTS"
          value = aws_dynamodb_table.agent_facts.name
        },
        {
          name  = "DYNAMO_TABLE_NETWORK_TOPOLOGY"
          value = aws_dynamodb_table.network_topology.name
        },
        {
          name  = "REDIS_URL"
          value = "redis://${aws_elasticache_replication_group.redis.configuration_endpoint_address}:6379"
        },
        {
          name  = "S3_ARTIFACTS_BUCKET"
          value = aws_s3_bucket.nanda_artifacts.bucket
        },
        {
          name  = "S3_BACKUPS_BUCKET"
          value = aws_s3_bucket.nanda_backups.bucket
        },
        {
          name  = "CORS_ORIGINS"
          value = "https://${var.domain_name},https://api.${var.domain_name}"
        },
        {
          name  = "JWKS_URL"
          value = "https://paintbox.fly.dev/.well-known/jwks.json"
        },
        {
          name  = "JWT_ISSUER"
          value = "https://paintbox.fly.dev"
        },
        {
          name  = "JWT_AUDIENCE"
          value = "nanda-api"
        },
        {
          name  = "ENABLE_PRIVACY_LAYER"
          value = tostring(var.enable_privacy_layer)
        },
        {
          name  = "ENABLE_ENTERPRISE_CONNECTOR"
          value = tostring(var.enable_enterprise_connector)
        },
        {
          name  = "ENTERPRISE_REGISTRIES"
          value = join(",", var.enterprise_registries)
        },
        {
          name  = "TRUSTED_REGISTRIES"
          value = join(",", var.trusted_registries)
        },
        {
          name  = "MIX_NODES"
          value = join(",", var.mix_nodes)
        },
        {
          name  = "ZK_PRIME"
          value = var.zk_prime
        },
        {
          name  = "CACHE_TTL"
          value = tostring(var.cache_ttl_seconds)
        },
        {
          name  = "ENABLE_HTTP2"
          value = tostring(var.enable_http2)
        },
        {
          name  = "ENABLE_COMPRESSION"
          value = tostring(var.enable_compression)
        },
        {
          name  = "LOG_LEVEL"
          value = var.enable_debug_mode ? "debug" : "info"
        },
        {
          name  = "METRICS_ENABLED"
          value = "true"
        },
        {
          name  = "TRACING_ENABLED"
          value = "true"
        },
        {
          name  = "OTLP_ENDPOINT"
          value = "https://api.honeycomb.io"
        }
      ]

      secrets = [
        {
          name      = "REDIS_AUTH_TOKEN"
          valueFrom = "arn:aws:secretsmanager:${var.aws_region}:${data.aws_caller_identity.current.account_id}:secret:${var.project_name}/redis-auth-token"
        },
        {
          name      = "HONEYCOMB_API_KEY"
          valueFrom = "arn:aws:secretsmanager:${var.aws_region}:${data.aws_caller_identity.current.account_id}:secret:${var.project_name}/honeycomb-api-key"
        }
      ]

      logConfiguration = {
        logDriver = "awslogs"
        options = {
          awslogs-group         = aws_cloudwatch_log_group.nanda_api_logs.name
          awslogs-region        = var.aws_region
          awslogs-stream-prefix = "ecs"
        }
      }

      healthCheck = {
        command     = ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
        interval    = 30
        timeout     = 5
        retries     = 3
        startPeriod = 60
      }

      essential = true
    }
  ])

  tags = {
    Name = "${var.project_name}-api-task-definition"
  }
}

resource "aws_ecs_task_definition" "nanda_dashboard" {
  family                   = "${var.project_name}-dashboard"
  requires_compatibilities = ["FARGATE"]
  network_mode             = "awsvpc"
  cpu                      = var.cpu_units
  memory                   = var.memory
  execution_role_arn       = aws_iam_role.ecs_execution_role.arn
  task_role_arn           = aws_iam_role.ecs_task_role.arn

  container_definitions = jsonencode([
    {
      name  = "nanda-dashboard"
      image = "${aws_ecr_repository.nanda_dashboard.repository_url}:${var.dashboard_image_tag}"

      portMappings = [
        {
          containerPort = 3001
          hostPort      = 3001
          protocol      = "tcp"
        }
      ]

      environment = [
        {
          name  = "NODE_ENV"
          value = var.environment
        },
        {
          name  = "REACT_APP_API_URL"
          value = "https://api.${var.domain_name}"
        },
        {
          name  = "REACT_APP_GRAPHQL_URL"
          value = "https://api.${var.domain_name}/graphql"
        },
        {
          name  = "REACT_APP_WS_URL"
          value = "wss://api.${var.domain_name}/graphql"
        },
        {
          name  = "REACT_APP_DOMAIN"
          value = var.domain_name
        },
        {
          name  = "REACT_APP_ENVIRONMENT"
          value = var.environment
        },
        {
          name  = "REACT_APP_VERSION"
          value = var.dashboard_image_tag
        }
      ]

      logConfiguration = {
        logDriver = "awslogs"
        options = {
          awslogs-group         = aws_cloudwatch_log_group.nanda_dashboard_logs.name
          awslogs-region        = var.aws_region
          awslogs-stream-prefix = "ecs"
        }
      }

      healthCheck = {
        command     = ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
        interval    = 30
        timeout     = 5
        retries     = 3
        startPeriod = 60
      }

      essential = true
    }
  ])

  tags = {
    Name = "${var.project_name}-dashboard-task-definition"
  }
}

# ECS Services
resource "aws_ecs_service" "nanda_api" {
  name            = "${var.project_name}-api"
  cluster         = aws_ecs_cluster.nanda_cluster.id
  task_definition = aws_ecs_task_definition.nanda_api.arn
  desired_count   = var.ecs_desired_capacity
  launch_type     = "FARGATE"

  network_configuration {
    subnets          = aws_subnet.private_subnets[*].id
    security_groups  = [aws_security_group.ecs_sg.id]
    assign_public_ip = false
  }

  load_balancer {
    target_group_arn = aws_lb_target_group.nanda_api_tg.arn
    container_name   = "nanda-api"
    container_port   = 3000
  }

  depends_on = [
    aws_lb_listener.nanda_https_listener,
    aws_iam_role_policy_attachment.ecs_execution_role_policy
  ]

  deployment_configuration {
    maximum_percent         = 200
    minimum_healthy_percent = 100

    deployment_circuit_breaker {
      enable   = true
      rollback = true
    }
  }

  enable_execute_command = true

  tags = {
    Name = "${var.project_name}-api-service"
  }
}

resource "aws_ecs_service" "nanda_dashboard" {
  name            = "${var.project_name}-dashboard"
  cluster         = aws_ecs_cluster.nanda_cluster.id
  task_definition = aws_ecs_task_definition.nanda_dashboard.arn
  desired_count   = var.ecs_desired_capacity
  launch_type     = "FARGATE"

  network_configuration {
    subnets          = aws_subnet.private_subnets[*].id
    security_groups  = [aws_security_group.ecs_sg.id]
    assign_public_ip = false
  }

  load_balancer {
    target_group_arn = aws_lb_target_group.nanda_dashboard_tg.arn
    container_name   = "nanda-dashboard"
    container_port   = 3001
  }

  depends_on = [
    aws_lb_listener.nanda_https_listener,
    aws_iam_role_policy_attachment.ecs_execution_role_policy
  ]

  deployment_configuration {
    maximum_percent         = 200
    minimum_healthy_percent = 100

    deployment_circuit_breaker {
      enable   = true
      rollback = true
    }
  }

  enable_execute_command = true

  tags = {
    Name = "${var.project_name}-dashboard-service"
  }
}

# Service Auto Scaling for Dashboard
resource "aws_appautoscaling_target" "ecs_dashboard_target" {
  max_capacity       = var.ecs_max_capacity
  min_capacity       = var.ecs_min_capacity
  resource_id        = "service/${aws_ecs_cluster.nanda_cluster.name}/${aws_ecs_service.nanda_dashboard.name}"
  scalable_dimension = "ecs:service:DesiredCount"
  service_namespace  = "ecs"
}

resource "aws_appautoscaling_policy" "ecs_dashboard_scale_up" {
  name               = "${var.project_name}-dashboard-scale-up"
  policy_type        = "StepScaling"
  resource_id        = aws_appautoscaling_target.ecs_dashboard_target.resource_id
  scalable_dimension = aws_appautoscaling_target.ecs_dashboard_target.scalable_dimension
  service_namespace  = aws_appautoscaling_target.ecs_dashboard_target.service_namespace

  step_scaling_policy_configuration {
    adjustment_type         = "ChangeInCapacity"
    cooldown               = 300
    metric_aggregation_type = "Average"

    step_adjustment {
      metric_interval_lower_bound = 0
      scaling_adjustment         = 2
    }
  }
}

resource "aws_appautoscaling_policy" "ecs_dashboard_scale_down" {
  name               = "${var.project_name}-dashboard-scale-down"
  policy_type        = "StepScaling"
  resource_id        = aws_appautoscaling_target.ecs_dashboard_target.resource_id
  scalable_dimension = aws_appautoscaling_target.ecs_dashboard_target.scalable_dimension
  service_namespace  = aws_appautoscaling_target.ecs_dashboard_target.service_namespace

  step_scaling_policy_configuration {
    adjustment_type         = "ChangeInCapacity"
    cooldown               = 300
    metric_aggregation_type = "Average"

    step_adjustment {
      metric_interval_upper_bound = 0
      scaling_adjustment         = -1
    }
  }
}

# CloudWatch Alarms for Dashboard
resource "aws_cloudwatch_metric_alarm" "dashboard_cpu_high" {
  alarm_name          = "${var.project_name}-dashboard-cpu-high"
  comparison_operator = "GreaterThanThreshold"
  evaluation_periods  = "2"
  metric_name         = "CPUUtilization"
  namespace           = "AWS/ECS"
  period              = "120"
  statistic           = "Average"
  threshold           = "80"
  alarm_description   = "This metric monitors ECS Dashboard CPU utilization"
  alarm_actions       = [aws_appautoscaling_policy.ecs_dashboard_scale_up.arn]

  dimensions = {
    ServiceName = aws_ecs_service.nanda_dashboard.name
    ClusterName = aws_ecs_cluster.nanda_cluster.name
  }
}

resource "aws_cloudwatch_metric_alarm" "dashboard_cpu_low" {
  alarm_name          = "${var.project_name}-dashboard-cpu-low"
  comparison_operator = "LessThanThreshold"
  evaluation_periods  = "2"
  metric_name         = "CPUUtilization"
  namespace           = "AWS/ECS"
  period              = "120"
  statistic           = "Average"
  threshold           = "20"
  alarm_description   = "This metric monitors ECS Dashboard CPU utilization"
  alarm_actions       = [aws_appautoscaling_policy.ecs_dashboard_scale_down.arn]

  dimensions = {
    ServiceName = aws_ecs_service.nanda_dashboard.name
    ClusterName = aws_ecs_cluster.nanda_cluster.name
  }
}
