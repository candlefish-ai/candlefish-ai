apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-backup-script
  namespace: claude-resources
data:
  backup.sh: |
    #!/bin/bash
    set -e

    # Configuration
    BACKUP_DIR="/backups"
    TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
    BACKUP_FILE="postgres_backup_${TIMESTAMP}.sql"
    S3_BUCKET="${S3_BACKUP_BUCKET}"
    RETENTION_DAYS=30

    # Create backup directory
    mkdir -p ${BACKUP_DIR}

    # Perform database backup
    echo "Starting database backup at $(date)"

    pg_dump \
      --host=${POSTGRES_HOST} \
      --port=${POSTGRES_PORT} \
      --username=${POSTGRES_USER} \
      --dbname=${POSTGRES_DB} \
      --no-password \
      --verbose \
      --clean \
      --if-exists \
      --create \
      --format=custom \
      --file=${BACKUP_DIR}/${BACKUP_FILE}

    # Compress backup
    gzip ${BACKUP_DIR}/${BACKUP_FILE}
    BACKUP_FILE="${BACKUP_FILE}.gz"

    # Upload to S3
    echo "Uploading backup to S3"
    aws s3 cp ${BACKUP_DIR}/${BACKUP_FILE} s3://${S3_BUCKET}/database/${BACKUP_FILE}

    # Verify upload
    aws s3 ls s3://${S3_BUCKET}/database/${BACKUP_FILE}

    # Clean up local backup
    rm -f ${BACKUP_DIR}/${BACKUP_FILE}

    # Clean up old backups in S3 (keep last 30 days)
    CUTOFF_DATE=$(date -d "${RETENTION_DAYS} days ago" +%Y%m%d)
    aws s3 ls s3://${S3_BUCKET}/database/ | while read -r line; do
      BACKUP_DATE=$(echo $line | awk '{print $4}' | grep -o '[0-9]\{8\}' | head -1)
      if [[ "${BACKUP_DATE}" < "${CUTOFF_DATE}" ]]; then
        BACKUP_TO_DELETE=$(echo $line | awk '{print $4}')
        echo "Deleting old backup: ${BACKUP_TO_DELETE}"
        aws s3 rm s3://${S3_BUCKET}/database/${BACKUP_TO_DELETE}
      fi
    done

    echo "Database backup completed successfully at $(date)"

  restore.sh: |
    #!/bin/bash
    set -e

    # Configuration
    BACKUP_FILE=${1:-latest}
    S3_BUCKET="${S3_BACKUP_BUCKET}"
    RESTORE_DIR="/tmp/restore"

    if [ "${BACKUP_FILE}" == "latest" ]; then
      # Get the latest backup file
      BACKUP_FILE=$(aws s3 ls s3://${S3_BUCKET}/database/ --recursive | sort | tail -n 1 | awk '{print $4}')
      echo "Using latest backup: ${BACKUP_FILE}"
    fi

    # Create restore directory
    mkdir -p ${RESTORE_DIR}

    # Download backup from S3
    echo "Downloading backup from S3"
    aws s3 cp s3://${S3_BUCKET}/database/${BACKUP_FILE} ${RESTORE_DIR}/${BACKUP_FILE}

    # Extract if compressed
    if [[ ${BACKUP_FILE} == *.gz ]]; then
      gunzip ${RESTORE_DIR}/${BACKUP_FILE}
      BACKUP_FILE=${BACKUP_FILE%.gz}
    fi

    # Stop applications before restore
    echo "Scaling down applications"
    kubectl scale deployment backend-production --replicas=0 -n claude-resources
    kubectl wait --for=delete pod -l app=backend -n claude-resources --timeout=300s

    # Perform database restore
    echo "Starting database restore at $(date)"

    pg_restore \
      --host=${POSTGRES_HOST} \
      --port=${POSTGRES_PORT} \
      --username=${POSTGRES_USER} \
      --dbname=${POSTGRES_DB} \
      --no-password \
      --verbose \
      --clean \
      --if-exists \
      --single-transaction \
      ${RESTORE_DIR}/${BACKUP_FILE}

    # Scale applications back up
    echo "Scaling up applications"
    kubectl scale deployment backend-production --replicas=3 -n claude-resources
    kubectl rollout status deployment/backend-production -n claude-resources

    # Clean up
    rm -rf ${RESTORE_DIR}

    echo "Database restore completed successfully at $(date)"

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-backup
  namespace: claude-resources
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM UTC
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 3
  successfulJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: postgres-backup
          restartPolicy: OnFailure
          containers:
          - name: postgres-backup
            image: postgres:15-alpine
            command: ["/bin/bash", "/scripts/backup.sh"]
            env:
            - name: POSTGRES_HOST
              value: "postgres"
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: claude-resources-secrets
                  key: POSTGRES_USER
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: claude-resources-secrets
                  key: POSTGRES_DB
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: claude-resources-secrets
                  key: POSTGRES_PASSWORD
            - name: S3_BACKUP_BUCKET
              value: "candlefish-claude-resources-backups"
            - name: AWS_DEFAULT_REGION
              value: "us-west-2"
            volumeMounts:
            - name: backup-scripts
              mountPath: /scripts
            - name: backup-storage
              mountPath: /backups
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "1Gi"
                cpu: "500m"
            securityContext:
              runAsNonRoot: true
              runAsUser: 999
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                - ALL
          volumes:
          - name: backup-scripts
            configMap:
              name: postgres-backup-script
              defaultMode: 0755
          - name: backup-storage
            emptyDir:
              sizeLimit: 10Gi

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgres-backup
  namespace: claude-resources
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/PostgresBackupRole

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: claude-resources
  name: postgres-backup-role
rules:
- apiGroups: ["apps"]
  resources: ["deployments", "deployments/scale"]
  verbs: ["get", "list", "patch", "update"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: postgres-backup-rolebinding
  namespace: claude-resources
subjects:
- kind: ServiceAccount
  name: postgres-backup
  namespace: claude-resources
roleRef:
  kind: Role
  name: postgres-backup-role
  apiGroup: rbac.authorization.k8s.io
