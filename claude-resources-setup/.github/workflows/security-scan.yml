name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'requirements.txt'
      - 'Dockerfile.*'
      - 'package.json'
      - 'package-lock.json'

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run npm audit
        run: |
          npm audit --audit-level high

      - name: Run safety check on Python dependencies
        run: |
          pip install safety
          safety check -r requirements.txt --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            safety-report.json
            snyk-results.json

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build backend image for scanning
        run: |
          docker build -f Dockerfile.backend -t backend-scan:latest .

      - name: Build frontend image for scanning
        run: |
          docker build -f Dockerfile.frontend -t frontend-scan:latest .

      - name: Run Trivy scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'backend-scan:latest'
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: Run Trivy scanner on frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'frontend-scan:latest'
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'backend-trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'frontend-trivy-results.sarif'

  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install pip-licenses
        run: pip install pip-licenses

      - name: Generate Python license report
        run: |
          pip install -r requirements.txt
          pip-licenses --format json --output-file python-licenses.json

      - name: Install Node.js dependencies
        run: npm install

      - name: Generate Node.js license report
        run: |
          npx license-checker --json --out nodejs-licenses.json

      - name: Check for prohibited licenses
        run: |
          # Add script to check for GPL, AGPL, and other restrictive licenses
          python scripts/check-licenses.py

      - name: Upload license reports
        uses: actions/upload-artifact@v3
        with:
          name: license-reports
          path: |
            python-licenses.json
            nodejs-licenses.json

  security-policy-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security.md
        run: |
          if [ ! -f SECURITY.md ]; then
            echo "::error::SECURITY.md file is missing"
            exit 1
          fi

      - name: Validate Dockerfile security practices
        run: |
          # Check for non-root user
          grep -q "USER" Dockerfile.backend || (echo "::error::Backend Dockerfile should use non-root user" && exit 1)
          grep -q "USER" Dockerfile.frontend || (echo "::error::Frontend Dockerfile should use non-root user" && exit 1)

          # Check for health checks
          grep -q "HEALTHCHECK" Dockerfile.backend || (echo "::error::Backend Dockerfile missing health check" && exit 1)
          grep -q "HEALTHCHECK" Dockerfile.frontend || (echo "::error::Frontend Dockerfile missing health check" && exit 1)

      - name: Check environment variable security
        run: |
          # Ensure no secrets in environment files
          if find . -name "*.env*" -not -path "./node_modules/*" | head -1 | grep -q .; then
            echo "::warning::Environment files found - ensure no secrets are committed"
          fi

  notify-security-team:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, license-scan, security-policy-check]
    if: failure()

    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
