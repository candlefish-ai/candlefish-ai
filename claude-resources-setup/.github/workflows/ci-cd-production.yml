name: Production CI/CD Pipeline

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - '**.md'  
      - 'docs/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend
  CLUSTER_NAME: claude-resources-prod
  CLUSTER_ZONE: us-central1-a

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Secret scanning with GitGuardian
        uses: GitGuardian/ggshield/actions/secret@main
        env:
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
        with:
          args: --all-policies --show-secrets --exit-zero

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [security-scan]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Install Node.js dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Python tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
        run: |
          pytest --cov=src --cov-report=xml --cov-report=html
          
      - name: Run frontend tests
        run: |
          pnpm test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml,./coverage/lcov.info
          fail_ci_if_error: true

  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: [test]
    outputs:
      backend-image: ${{ steps.build-backend.outputs.image }}
      frontend-image: ${{ steps.build-frontend.outputs.image }}
      backend-digest: ${{ steps.build-backend.outputs.digest }}
      frontend-digest: ${{ steps.build-frontend.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push frontend image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run container structure tests
        run: |
          # Install container-structure-test
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
          
          # Test backend container
          container-structure-test test --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest --config tests/backend-structure-test.yaml
          
          # Test frontend container  
          container-structure-test test --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest --config tests/frontend-structure-test.yaml

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Set up kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Deploy to staging
        run: |
          # Update image tags in staging manifests
          sed -i 's|IMAGE_TAG_BACKEND|${{ needs.build.outputs.backend-image }}|g' k8s/staging/backend-deployment.yaml
          sed -i 's|IMAGE_TAG_FRONTEND|${{ needs.build.outputs.frontend-image }}|g' k8s/staging/frontend-deployment.yaml
          
          # Apply staging manifests
          kubectl apply -f k8s/staging/ --record
          kubectl rollout status deployment/backend-staging -n staging
          kubectl rollout status deployment/frontend-staging -n staging

      - name: Run smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Run smoke tests against staging environment
          pytest tests/smoke/ --base-url=https://staging.claude-resources.candlefish.ai

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Set up kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

      - name: Create backup before deployment
        run: |
          # Backup current production database
          kubectl exec -n production deployment/postgres -- pg_dump -U postgres claude_resources > backup-$(date +%Y%m%d-%H%M%S).sql
          aws s3 cp backup-$(date +%Y%m%d-%H%M%S).sql s3://${{ secrets.BACKUP_BUCKET }}/database/

      - name: Blue-Green deployment
        run: |
          # Update image tags in production manifests
          sed -i 's|IMAGE_TAG_BACKEND|${{ needs.build.outputs.backend-image }}|g' k8s/production/backend-deployment.yaml
          sed -i 's|IMAGE_TAG_FRONTEND|${{ needs.build.outputs.frontend-image }}|g' k8s/production/frontend-deployment.yaml
          
          # Deploy to green environment
          kubectl apply -f k8s/production/ --record
          
          # Wait for green deployment to be ready
          kubectl rollout status deployment/backend-production -n production
          kubectl rollout status deployment/frontend-production -n production
          
          # Run health checks
          kubectl exec -n production deployment/backend-production -- curl -f http://localhost:8000/health
          
          # Switch traffic to green (handled by service)
          echo "Production deployment completed successfully"

      - name: Run production smoke tests
        run: |
          # Wait for services to stabilize
          sleep 60
          
          # Run comprehensive smoke tests
          pytest tests/smoke/ --base-url=https://claude-resources.candlefish.ai
          
          # Run performance tests
          artillery run tests/performance/load-test.yml

      - name: Update monitoring dashboards
        run: |
          # Update deployment annotations for monitoring
          kubectl annotate deployment/backend-production -n production deployment.kubernetes.io/revision="$(date +%Y%m%d-%H%M%S)"
          kubectl annotate deployment/frontend-production -n production deployment.kubernetes.io/revision="$(date +%Y%m%d-%H%M%S)"

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: backend
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: false

      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: frontend
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: false