# External Secrets Operator installation via Helm
apiVersion: v1
kind: Namespace
metadata:
  name: external-secrets-system

---
# AWS IAM Role for Service Account (IRSA) configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-irsa-config
  namespace: external-secrets-system
data:
  trust-policy.json: |
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Principal": {
            "Federated": "arn:aws:iam::ACCOUNT_ID:oidc-provider/oidc.eks.REGION.amazonaws.com/id/OIDC_ID"
          },
          "Action": "sts:AssumeRoleWithWebIdentity",
          "Condition": {
            "StringEquals": {
              "oidc.eks.REGION.amazonaws.com/id/OIDC_ID:sub": "system:serviceaccount:external-secrets-system:external-secrets",
              "oidc.eks.REGION.amazonaws.com/id/OIDC_ID:aud": "sts.amazonaws.com"
            }
          }
        }
      ]
    }
  
  iam-policy.json: |
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Action": [
            "secretsmanager:GetSecretValue",
            "secretsmanager:DescribeSecret"
          ],
          "Resource": [
            "arn:aws:secretsmanager:*:ACCOUNT_ID:secret:claude-resources/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "kms:Decrypt"
          ],
          "Resource": [
            "arn:aws:kms:*:ACCOUNT_ID:key/*"
          ],
          "Condition": {
            "StringEquals": {
              "kms:ViaService": "secretsmanager.REGION.amazonaws.com"
            }
          }
        }
      ]
    }

---
# Secret Store for AWS Secrets Manager
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: claude-resources
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-operator

---
# External Secret for application secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: claude-resources-secrets
  namespace: claude-resources
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: claude-resources-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      engineVersion: v2
      data:
        # Database configuration
        DATABASE_URL: "postgresql://{{ .postgres_username }}:{{ .postgres_password }}@{{ .postgres_endpoint }}/{{ .postgres_database }}"
        POSTGRES_USER: "{{ .postgres_username }}"
        POSTGRES_PASSWORD: "{{ .postgres_password }}"
        POSTGRES_DB: "{{ .postgres_database }}"
        
        # Redis configuration
        REDIS_URL: "redis://{{ .redis_endpoint }}:6379"
        
        # Application secrets
        JWT_SECRET: "{{ .jwt_secret }}"
        API_SECRET_KEY: "{{ .api_secret_key }}"
        ENCRYPTION_KEY: "{{ .encryption_key }}"
        
        # External API keys
        ANTHROPIC_API_KEY: "{{ .anthropic_api_key }}"
        OPENAI_API_KEY: "{{ .openai_api_key }}"
        GITHUB_TOKEN: "{{ .github_token }}"
        
        # Monitoring
        SENTRY_DSN: "{{ .sentry_dsn }}"
  data:
  - secretKey: postgres_username
    remoteRef:
      key: claude-resources/database
      property: username
  - secretKey: postgres_password
    remoteRef:
      key: claude-resources/database
      property: password
  - secretKey: postgres_endpoint
    remoteRef:
      key: claude-resources/database
      property: endpoint
  - secretKey: postgres_database
    remoteRef:
      key: claude-resources/database
      property: database
  - secretKey: redis_endpoint
    remoteRef:
      key: claude-resources/cache
      property: endpoint
  - secretKey: jwt_secret
    remoteRef:
      key: claude-resources/application
      property: jwt_secret
  - secretKey: api_secret_key
    remoteRef:
      key: claude-resources/application
      property: api_secret_key
  - secretKey: encryption_key
    remoteRef:
      key: claude-resources/application
      property: encryption_key
  - secretKey: anthropic_api_key
    remoteRef:
      key: claude-resources/api-keys
      property: anthropic_api_key
  - secretKey: openai_api_key
    remoteRef:
      key: claude-resources/api-keys
      property: openai_api_key
  - secretKey: github_token
    remoteRef:
      key: claude-resources/api-keys
      property: github_token
  - secretKey: sentry_dsn
    remoteRef:
      key: claude-resources/monitoring
      property: sentry_dsn

---
# Cluster Secret Store for cluster-wide secrets
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: aws-secrets-manager-cluster
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-operator
            namespace: external-secrets-system

---
# Certificate secrets for TLS
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: tls-certificates
  namespace: claude-resources
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: claude-resources-tls
    creationPolicy: Owner
    template:
      type: kubernetes.io/tls
  data:
  - secretKey: tls.crt
    remoteRef:
      key: claude-resources/certificates
      property: tls_cert
  - secretKey: tls.key
    remoteRef:
      key: claude-resources/certificates
      property: tls_key