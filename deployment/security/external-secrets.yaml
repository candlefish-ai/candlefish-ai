apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager-store
  namespace: collaboration
  labels:
    app.kubernetes.io/name: candlefish-collaboration
    app.kubernetes.io/component: secrets-management
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        secretRef:
          accessKeyID:
            name: aws-credentials
            key: access-key-id
          secretAccessKey:
            name: aws-credentials
            key: secret-access-key
        jwt:
          serviceAccountRef:
            name: external-secrets-sa

---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-parameter-store
  namespace: collaboration
  labels:
    app.kubernetes.io/name: candlefish-collaboration
    app.kubernetes.io/component: secrets-management
spec:
  provider:
    aws:
      service: ParameterStore
      region: us-east-1
      auth:
        secretRef:
          accessKeyID:
            name: aws-credentials
            key: access-key-id
          secretAccessKey:
            name: aws-credentials
            key: secret-access-key

---
# External Secret for Database Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: collaboration
  labels:
    app.kubernetes.io/name: candlefish-collaboration
    app.kubernetes.io/component: database-secrets
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: aws-secrets-manager-store
    kind: SecretStore
  target:
    name: database-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        DATABASE_URL: "postgresql://{{ .username }}:{{ .password }}@{{ .host }}:{{ .port | default 5432 }}/{{ .dbname }}"
        DB_HOST: "{{ .host }}"
        DB_PORT: "{{ .port | default 5432 }}"
        DB_NAME: "{{ .dbname }}"
        DB_USERNAME: "{{ .username }}"
        DB_PASSWORD: "{{ .password }}"
  data:
  - secretKey: host
    remoteRef:
      key: candlefish/collaboration/database
      property: host
  - secretKey: port
    remoteRef:
      key: candlefish/collaboration/database
      property: port
  - secretKey: dbname
    remoteRef:
      key: candlefish/collaboration/database
      property: dbname
  - secretKey: username
    remoteRef:
      key: candlefish/collaboration/database
      property: username
  - secretKey: password
    remoteRef:
      key: candlefish/collaboration/database
      property: password

---
# External Secret for Redis Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-credentials
  namespace: collaboration
  labels:
    app.kubernetes.io/name: candlefish-collaboration
    app.kubernetes.io/component: redis-secrets
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: aws-secrets-manager-store
    kind: SecretStore
  target:
    name: redis-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        REDIS_URL: "redis://:{{ .password }}@{{ .host }}:{{ .port | default 6379 }}/0"
        REDIS_HOST: "{{ .host }}"
        REDIS_PORT: "{{ .port | default 6379 }}"
        REDIS_PASSWORD: "{{ .password }}"
        REDIS_AUTH_TOKEN: "{{ .password }}"
  data:
  - secretKey: host
    remoteRef:
      key: candlefish/collaboration/redis
      property: host
  - secretKey: port
    remoteRef:
      key: candlefish/collaboration/redis
      property: port
  - secretKey: password
    remoteRef:
      key: candlefish/collaboration/redis
      property: password

---
# External Secret for Application Secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: application-secrets
  namespace: collaboration
  labels:
    app.kubernetes.io/name: candlefish-collaboration
    app.kubernetes.io/component: app-secrets
spec:
  refreshInterval: 30m
  secretStoreRef:
    name: aws-secrets-manager-store
    kind: SecretStore
  target:
    name: application-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        JWT_SECRET: "{{ .jwt_secret }}"
        JWT_REFRESH_SECRET: "{{ .jwt_refresh_secret }}"
        ENCRYPTION_KEY: "{{ .encryption_key }}"
        WS_AUTH_SECRET: "{{ .ws_auth_secret }}"
        NEXTAUTH_SECRET: "{{ .nextauth_secret }}"
  data:
  - secretKey: jwt_secret
    remoteRef:
      key: candlefish/collaboration/app-secrets
      property: jwt_secret
  - secretKey: jwt_refresh_secret
    remoteRef:
      key: candlefish/collaboration/app-secrets
      property: jwt_refresh_secret
  - secretKey: encryption_key
    remoteRef:
      key: candlefish/collaboration/app-secrets
      property: encryption_key
  - secretKey: ws_auth_secret
    remoteRef:
      key: candlefish/collaboration/app-secrets
      property: ws_auth_secret
  - secretKey: nextauth_secret
    remoteRef:
      key: candlefish/collaboration/app-secrets
      property: nextauth_secret

---
# External Secret for AWS Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: aws-service-credentials
  namespace: collaboration
  labels:
    app.kubernetes.io/name: candlefish-collaboration
    app.kubernetes.io/component: aws-secrets
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager-store
    kind: SecretStore
  target:
    name: aws-service-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        AWS_ACCESS_KEY_ID: "{{ .access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ .secret_access_key }}"
        AWS_REGION: "{{ .region }}"
        S3_BUCKET_NAME: "{{ .s3_bucket_name }}"
  data:
  - secretKey: access_key_id
    remoteRef:
      key: candlefish/collaboration/aws-credentials
      property: access_key_id
  - secretKey: secret_access_key
    remoteRef:
      key: candlefish/collaboration/aws-credentials
      property: secret_access_key
  - secretKey: region
    remoteRef:
      key: candlefish/collaboration/aws-credentials
      property: region
  - secretKey: s3_bucket_name
    remoteRef:
      key: candlefish/collaboration/aws-credentials
      property: s3_bucket_name

---
# External Secret for Third-party API Keys
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: third-party-api-keys
  namespace: collaboration
  labels:
    app.kubernetes.io/name: candlefish-collaboration
    app.kubernetes.io/component: api-secrets
spec:
  refreshInterval: 6h
  secretStoreRef:
    name: aws-secrets-manager-store
    kind: SecretStore
  target:
    name: third-party-api-keys
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        ANTHROPIC_API_KEY: "{{ .anthropic_api_key }}"
        OPENAI_API_KEY: "{{ .openai_api_key }}"
        SENTRY_DSN: "{{ .sentry_dsn }}"
        SLACK_WEBHOOK_URL: "{{ .slack_webhook_url }}"
        PAGERDUTY_INTEGRATION_KEY: "{{ .pagerduty_integration_key }}"
  data:
  - secretKey: anthropic_api_key
    remoteRef:
      key: candlefish/collaboration/third-party-apis
      property: anthropic_api_key
  - secretKey: openai_api_key
    remoteRef:
      key: candlefish/collaboration/third-party-apis
      property: openai_api_key
  - secretKey: sentry_dsn
    remoteRef:
      key: candlefish/collaboration/third-party-apis
      property: sentry_dsn
  - secretKey: slack_webhook_url
    remoteRef:
      key: candlefish/collaboration/monitoring
      property: slack_webhook_url
  - secretKey: pagerduty_integration_key
    remoteRef:
      key: candlefish/collaboration/monitoring
      property: pagerduty_integration_key

---
# External Secret for TLS Certificates
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: tls-certificates
  namespace: collaboration
  labels:
    app.kubernetes.io/name: candlefish-collaboration
    app.kubernetes.io/component: tls-secrets
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: aws-secrets-manager-store
    kind: SecretStore
  target:
    name: candlefish-tls
    creationPolicy: Owner
    template:
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ .certificate }}"
        tls.key: "{{ .private_key }}"
        ca.crt: "{{ .ca_certificate }}"
  data:
  - secretKey: certificate
    remoteRef:
      key: candlefish/collaboration/tls-certificate
      property: certificate
  - secretKey: private_key
    remoteRef:
      key: candlefish/collaboration/tls-certificate
      property: private_key
  - secretKey: ca_certificate
    remoteRef:
      key: candlefish/collaboration/tls-certificate
      property: ca_certificate

---
# Service Account for External Secrets Operator
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: collaboration
  labels:
    app.kubernetes.io/name: candlefish-collaboration
    app.kubernetes.io/component: external-secrets
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/collaboration-external-secrets-role

---
# ClusterSecretStore for cluster-wide secrets
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: aws-secrets-manager-cluster-store
  labels:
    app.kubernetes.io/name: candlefish-collaboration
    app.kubernetes.io/component: secrets-management
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-sa
            namespace: external-secrets-system

---
# External Secret for monitoring secrets (cluster-wide)
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: monitoring-secrets
  namespace: monitoring
  labels:
    app.kubernetes.io/name: candlefish-collaboration
    app.kubernetes.io/component: monitoring-secrets
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager-cluster-store
    kind: ClusterSecretStore
  target:
    name: monitoring-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        GRAFANA_ADMIN_PASSWORD: "{{ .grafana_admin_password }}"
        SMTP_PASSWORD: "{{ .smtp_password }}"
        SLACK_WEBHOOK_URL: "{{ .slack_webhook_url }}"
        PAGERDUTY_INTEGRATION_KEY: "{{ .pagerduty_integration_key }}"
        WEBHOOK_TOKEN: "{{ .webhook_token }}"
  data:
  - secretKey: grafana_admin_password
    remoteRef:
      key: candlefish/collaboration/monitoring
      property: grafana_admin_password
  - secretKey: smtp_password
    remoteRef:
      key: candlefish/collaboration/monitoring
      property: smtp_password
  - secretKey: slack_webhook_url
    remoteRef:
      key: candlefish/collaboration/monitoring
      property: slack_webhook_url
  - secretKey: pagerduty_integration_key
    remoteRef:
      key: candlefish/collaboration/monitoring
      property: pagerduty_integration_key
  - secretKey: webhook_token
    remoteRef:
      key: candlefish/collaboration/monitoring
      property: webhook_token

---
# Backup secrets for disaster recovery
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: backup-secrets
  namespace: collaboration
  labels:
    app.kubernetes.io/name: candlefish-collaboration
    app.kubernetes.io/component: backup-secrets
spec:
  refreshInterval: 24h
  secretStoreRef:
    name: aws-secrets-manager-store
    kind: SecretStore
  target:
    name: backup-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        BACKUP_ENCRYPTION_KEY: "{{ .backup_encryption_key }}"
        BACKUP_S3_ACCESS_KEY_ID: "{{ .backup_s3_access_key_id }}"
        BACKUP_S3_SECRET_ACCESS_KEY: "{{ .backup_s3_secret_access_key }}"
        BACKUP_S3_BUCKET: "{{ .backup_s3_bucket }}"
  data:
  - secretKey: backup_encryption_key
    remoteRef:
      key: candlefish/collaboration/backup
      property: encryption_key
  - secretKey: backup_s3_access_key_id
    remoteRef:
      key: candlefish/collaboration/backup
      property: s3_access_key_id
  - secretKey: backup_s3_secret_access_key
    remoteRef:
      key: candlefish/collaboration/backup
      property: s3_secret_access_key
  - secretKey: backup_s3_bucket
    remoteRef:
      key: candlefish/collaboration/backup
      property: s3_bucket
