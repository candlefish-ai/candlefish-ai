apiVersion: v1
kind: ConfigMap
metadata:
  name: inventory-config
  namespace: inventory-production
data:
  # Backend Configuration
  GO_ENV: "production"
  PORT: "8080"
  LOG_LEVEL: "info"

  # Database Configuration
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  DB_NAME: "inventory_production"
  DB_MAX_OPEN_CONNS: "25"
  DB_MAX_IDLE_CONNS: "5"
  DB_CONN_MAX_LIFETIME: "300s"

  # Redis Configuration
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  REDIS_DB: "0"

  # API Configuration
  API_RATE_LIMIT: "100"
  API_RATE_WINDOW: "60s"
  CORS_ALLOWED_ORIGINS: "https://inventory.candlefish.ai,https://app.candlefish.ai"

  # File Storage Configuration
  STORAGE_TYPE: "s3"
  S3_BUCKET: "candlefish-inventory-production"
  S3_REGION: "us-east-1"

  # WebSocket Configuration
  WS_PING_INTERVAL: "30s"
  WS_PONG_WAIT: "60s"
  WS_WRITE_WAIT: "10s"

  # Photo Processing Configuration
  PHOTO_MAX_SIZE: "10485760"  # 10MB
  PHOTO_ALLOWED_TYPES: "image/jpeg,image/png,image/webp"
  PHOTO_THUMBNAIL_SIZE: "300x300"
  PHOTO_PREVIEW_SIZE: "800x600"

  # Monitoring Configuration
  METRICS_PORT: "9090"
  HEALTH_CHECK_INTERVAL: "30s"

  # Frontend Configuration (for Nginx)
  nginx.conf: |
    upstream backend {
        server inventory-backend:8080 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    server {
        listen 80;
        server_name inventory.candlefish.ai;
        root /usr/share/nginx/html;
        index index.html;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self' https://api.candlefish.ai wss://api.candlefish.ai" always;

        # Compression
        gzip on;
        gzip_comp_level 6;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        # API proxy
        location /api/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # WebSocket proxy
        location /ws {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }

        # Static assets with caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # SPA routing
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
