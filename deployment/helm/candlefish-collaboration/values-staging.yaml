# Staging values for Candlefish Collaboration System
# This file contains staging-specific overrides

# Global configuration
global:
  imageRegistry: "123456789012.dkr.ecr.us-east-1.amazonaws.com"
  storageClass: "gp3-csi"

# Application configuration
app:
  environment: staging
  domain: staging.candlefish.ai

# Image configuration
image:
  registry: "123456789012.dkr.ecr.us-east-1.amazonaws.com/candlefish"
  tag: "{{ .Values.image.tag | default .Chart.AppVersion }}"
  pullPolicy: Always  # Always pull latest for staging

# Replica counts for staging
replicaCount:
  graphqlApi: 2
  websocketService: 2
  documentService: 2
  collaborationEditor: 2

# GraphQL API Service - Staging Configuration
graphqlApi:
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  env:
    LOG_LEVEL: debug
    GRAPHQL_PLAYGROUND_ENABLED: "true"
    GRAPHQL_INTROSPECTION_ENABLED: "true"
    RATE_LIMIT_MAX_REQUESTS: "500"

# WebSocket Service - Staging Configuration
websocketService:
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    metrics:
    - type: Pods
      pods:
        metric:
          name: websocket_connections_per_pod
        target:
          type: AverageValue
          averageValue: "200"

  env:
    LOG_LEVEL: debug
    WS_MAX_CONNECTIONS_PER_IP: "5"
    UV_THREADPOOL_SIZE: "64"

# Document Service - Staging Configuration
documentService:
  resources:
    requests:
      memory: "384Mi"
      cpu: "150m"
    limits:
      memory: "768Mi"
      cpu: "750m"

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  persistence:
    enabled: true
    storageClass: "gp3-csi"
    size: 5Gi

  env:
    LOG_LEVEL: debug
    CRDT_HISTORY_LIMIT: "500"
    CRDT_BATCH_SIZE: "25"
    MAX_FILE_SIZE: "5242880"  # 5MB

# Collaboration Editor - Staging Configuration
collaborationEditor:
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  env:
    NEXT_PUBLIC_GRAPHQL_URL: "https://api-staging.candlefish.ai/graphql"
    NEXT_PUBLIC_WS_URL: "wss://ws-staging.candlefish.ai/graphql"
    NEXTAUTH_URL: "https://editor-staging.candlefish.ai"
    NEXT_PUBLIC_SENTRY_DSN: ""  # Disabled in staging

# PostgreSQL - Staging uses smaller instance
postgresql:
  enabled: true
  auth:
    username: "collaboration_user"
    database: "collaboration_staging_db"
  primary:
    persistence:
      enabled: true
      storageClass: "gp3-csi"
      size: 20Gi
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        memory: 512Mi
        cpu: 500m

# Redis - Staging configuration
redis:
  enabled: true
  auth:
    enabled: true
  master:
    persistence:
      enabled: true
      storageClass: "gp3-csi"
      size: 5Gi
    resources:
      requests:
        memory: 128Mi
        cpu: 50m
      limits:
        memory: 256Mi
        cpu: 250m
  replica:
    replicaCount: 1
    persistence:
      enabled: false  # No persistence for staging replicas

# Ingress - Staging Configuration
ingress:
  enabled: true
  className: "alb"
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:us-east-1:123456789012:certificate/staging-cert-id"
    alb.ingress.kubernetes.io/healthcheck-path: /api/health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '30'
    # Allow access from office networks
    alb.ingress.kubernetes.io/inbound-cidrs: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"

  hosts:
    - host: editor-staging.candlefish.ai
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: collaboration-editor
              port:
                number: 3000
    - host: api-staging.candlefish.ai
      paths:
        - path: /graphql
          pathType: Prefix
          backend:
            service:
              name: graphql-api-service
              port:
                number: 4000
        - path: /documents
          pathType: Prefix
          backend:
            service:
              name: document-service
              port:
                number: 4003
    - host: ws-staging.candlefish.ai
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: websocket-service
              port:
                number: 4001

# Pod disruption budget - Staging
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Network policies - Staging (more permissive)
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from: []  # Allow all ingress for staging
  egress:
    - to: []  # Allow all egress for staging

# Monitoring - Staging Configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 60s
    scrapeTimeout: 15s

  prometheus:
    enabled: true
    alertmanager:
      enabled: true
      config:
        global:
          slack_api_url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
        route:
          group_by: ['alertname', 'cluster', 'service']
          group_wait: 30s
          group_interval: 30s
          repeat_interval: 4h
          receiver: 'staging-webhook'
        receivers:
        - name: 'staging-webhook'
          slack_configs:
          - channel: '#alerts-staging'
            title: 'Staging Environment Alert'
            text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
    server:
      persistentVolume:
        enabled: true
        storageClass: "gp3-csi"
        size: 20Gi
      resources:
        requests:
          memory: 512Mi
          cpu: 100m
        limits:
          memory: 1Gi
          cpu: 500m
      retention: "7d"  # Shorter retention for staging

  grafana:
    enabled: true
    persistence:
      enabled: true
      storageClass: "gp3-csi"
      size: 5Gi
    resources:
      requests:
        memory: 128Mi
        cpu: 50m
      limits:
        memory: 256Mi
        cpu: 250m

# Security Context - Standard for staging
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000

# Secrets management - Staging
secrets:
  create: true  # Create secrets directly for staging
  externalSecrets:
    enabled: true
    refreshInterval: 30m
    secretStore:
      name: aws-secret-store
      kind: SecretStore
    secrets:
      - secretKey: DATABASE_URL
        remoteRef:
          key: candlefish/staging/collaboration/database-url
      - secretKey: REDIS_URL
        remoteRef:
          key: candlefish/staging/collaboration/redis-url
      - secretKey: JWT_SECRET
        remoteRef:
          key: candlefish/staging/collaboration/jwt-secret
      - secretKey: ENCRYPTION_KEY
        remoteRef:
          key: candlefish/staging/collaboration/encryption-key

# Backup configuration - Staging (reduced retention)
backup:
  enabled: true
  schedule: "0 6 * * *"  # Daily at 6 AM
  retention: "7d"
  storageClass: "gp3-csi"
  resources:
    requests:
      memory: 128Mi
      cpu: 50m
    limits:
      memory: 256Mi
      cpu: 250m

# Node selector for staging workloads (smaller instances)
nodeSelector:
  node.kubernetes.io/instance-type: "m6i.large"

# No specific tolerations for staging
tolerations: []

# Basic affinity for staging
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 50
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - candlefish-collaboration
        topologyKey: kubernetes.io/hostname

# Staging annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "4000"
  prometheus.io/path: "/metrics"
  environment: "staging"

# No priority class for staging
priorityClassName: ""

# Standard termination grace period
terminationGracePeriodSeconds: 30

# Debug features for staging
debug:
  enabled: true
  verbose: true
  profiling: true

# Feature flags for staging
features:
  experimentalFeatures: true
  betaFeatures: true
  debugMode: true
