# Production-optimized Dockerfile for RTPM API
# Multi-stage build with security hardening and performance optimizations

# Build stage
FROM python:3.11-slim AS builder

# Set build-time environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    postgresql-client \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy and install Python dependencies
COPY apps/rtpm-api/requirements.txt /tmp/requirements.txt
RUN pip install --upgrade pip && \
    pip install -r /tmp/requirements.txt && \
    pip install gunicorn

# Production stage
FROM python:3.11-slim AS production

# Security: Install security updates and minimal runtime dependencies
RUN apt-get update && apt-get install -y \
    postgresql-client \
    curl \
    dumb-init \
    && apt-get upgrade -y \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get autoremove -y \
    && apt-get autoclean

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Create non-root user with specific UID for Kubernetes compatibility
RUN groupadd -r rtpm --gid=1000 && \
    useradd -r -g rtpm --uid=1000 --shell=/bin/bash --create-home rtpm

# Set working directory
WORKDIR /app

# Copy application code with proper ownership
COPY --chown=rtpm:rtpm apps/rtpm-api/src/ ./src/
COPY --chown=rtpm:rtpm apps/rtpm-api/scripts/ ./scripts/
COPY --chown=rtpm:rtpm apps/rtpm-api/pytest.ini ./

# Create necessary directories for logs and data
RUN mkdir -p /app/logs /app/tmp && \
    chown -R rtpm:rtpm /app

# Security: Set file permissions
RUN chmod -R 755 /app && \
    chmod +x /app/scripts/*.sh

# Set environment variables
ENV PYTHONPATH=/app/src \
    ENVIRONMENT=production \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# Switch to non-root user
USER rtpm

# Health check with better timeout
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Production command with optimized Gunicorn settings
CMD ["gunicorn", "src.main:app", \
     "-k", "uvicorn.workers.UvicornWorker", \
     "--bind", "0.0.0.0:8000", \
     "--workers", "4", \
     "--worker-connections", "1000", \
     "--max-requests", "10000", \
     "--max-requests-jitter", "1000", \
     "--preload", \
     "--access-logfile", "-", \
     "--error-logfile", "-", \
     "--log-level", "info", \
     "--timeout", "120", \
     "--keepalive", "5"]

# Worker stage for Celery
FROM production AS worker

# Override command for Celery worker
CMD ["celery", "worker", \
     "-A", "src.workers.aggregation.celery_app", \
     "--loglevel=info", \
     "--concurrency=4", \
     "--prefetch-multiplier=1", \
     "--max-tasks-per-child=1000", \
     "--optimization=fair"]

# Beat scheduler stage
FROM production AS scheduler

# Override command for Celery beat
CMD ["celery", "beat", \
     "-A", "src.workers.aggregation.celery_app", \
     "--loglevel=info", \
     "--schedule=/app/tmp/celerybeat-schedule"]

# Flower monitoring stage
FROM production AS flower

# Install flower
RUN pip install flower

# Expose flower port
EXPOSE 5555

# Override command for Flower
CMD ["celery", "flower", \
     "-A", "src.workers.aggregation.celery_app", \
     "--port=5555", \
     "--broker=${CELERY_BROKER_URL}", \
     "--basic_auth=${FLOWER_BASIC_AUTH}"]