# Multi-stage build for GraphQL API service
FROM node:20-alpine AS base
WORKDIR /app
RUN apk add --no-cache libc6-compat
RUN npm install -g pnpm

# Dependencies stage
FROM base AS deps
COPY package.json pnpm-lock.yaml ./
COPY graphql/package.json ./graphql/
RUN pnpm install --frozen-lockfile --prod=false

# Build stage
FROM base AS builder
COPY . .
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/graphql/node_modules ./graphql/node_modules

# Build GraphQL schema and resolvers
RUN pnpm build:graphql
RUN pnpm prune --prod

# Runtime stage
FROM node:20-alpine AS runtime

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 graphql

WORKDIR /app

# Install production dependencies
RUN apk add --no-cache \
    ca-certificates \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Copy built application
COPY --from=builder --chown=graphql:nodejs /app/graphql/dist ./dist
COPY --from=builder --chown=graphql:nodejs /app/graphql/package.json ./
COPY --from=builder --chown=graphql:nodejs /app/node_modules ./node_modules

# Copy GraphQL schema files
COPY --from=builder --chown=graphql:nodejs /app/graphql/schema ./schema

# Health check script
COPY --chown=graphql:nodejs deployment/docker/healthcheck-graphql.js ./healthcheck.js

# Set permissions
RUN chown -R graphql:nodejs /app
RUN chmod +x /app/healthcheck.js

USER graphql

# Environment variables
ENV NODE_ENV=production
ENV PORT=4000
ENV NODE_OPTIONS="--max-old-space-size=1024"

EXPOSE 4000

HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
    CMD node /app/healthcheck.js

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/index.js"]
