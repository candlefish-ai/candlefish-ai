# Optimized GraphQL API service with security hardening
# Build argument for cache busting
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=latest

# Use security-hardened base image
FROM candlefish/base:latest AS base

# Dependencies stage - install and cache dependencies separately
FROM base AS deps
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/shared/package.json ./packages/shared/
COPY graphql/package.json ./graphql/

# Install all dependencies (including dev dependencies for build)
RUN --mount=type=cache,target=/tmp/.npm \
    --mount=type=cache,target=/app/.pnpm-store \
    PNPM_STORE_DIR=/app/.pnpm-store pnpm install --frozen-lockfile

# Build stage - compile TypeScript and generate GraphQL artifacts
FROM deps AS builder

# Copy source code
COPY packages/ ./packages/
COPY graphql/ ./graphql/
COPY tsconfig.json ./
COPY turbo.json ./

# Build the GraphQL service and shared packages
RUN pnpm turbo build --filter=graphql

# Prune to production dependencies only
RUN --mount=type=cache,target=/tmp/.npm \
    --mount=type=cache,target=/app/.pnpm-store \
    PNPM_STORE_DIR=/app/.pnpm-store pnpm prune --prod --config.ignore-scripts=true

# Production runtime stage
FROM base AS runtime

# Labels for image metadata
LABEL org.opencontainers.image.title="Candlefish GraphQL API" \
      org.opencontainers.image.description="GraphQL Federation API for Candlefish AI Platform" \
      org.opencontainers.image.source="https://github.com/candlefish-ai/platform" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.vendor="Candlefish AI" \
      org.opencontainers.image.licenses="MIT"

# Copy built application with proper ownership
COPY --from=builder --chown=nodejs:nodejs /app/graphql/dist ./graphql/dist
COPY --from=builder --chown=nodejs:nodejs /app/graphql/package.json ./graphql/
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/packages/shared/dist ./packages/shared/dist

# Copy GraphQL schema files and configuration
COPY --from=builder --chown=nodejs:nodejs /app/graphql/schema ./graphql/schema
COPY --from=builder --chown=nodejs:nodejs /app/graphql/src/config ./graphql/config

# Copy optimized health check script
COPY --chown=nodejs:nodejs deployment/docker/scripts/health-check-graphql.js ./health-check.js
RUN chmod +x ./health-check.js

# Switch to non-root user
USER nodejs

# Environment variables
ENV SERVICE_NAME="graphql-api" \
    PORT=4000 \
    NODE_ENV=production \
    NODE_OPTIONS="--max-old-space-size=1024 --enable-source-maps" \
    LOG_LEVEL=info \
    GRAPHQL_INTROSPECTION=false \
    GRAPHQL_PLAYGROUND=false \
    HTTP_HEALTH_CHECK=true

# Expose port
EXPOSE 4000

# Custom health check for GraphQL
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD node ./health-check.js

# Set working directory to GraphQL service
WORKDIR /app/graphql

# Start the application
CMD ["node", "dist/server.js"]
