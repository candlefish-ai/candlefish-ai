# Multi-stage build for React Native mobile app
FROM node:20-alpine AS base

# Install system dependencies for mobile development
RUN apk add --no-cache \
    git \
    python3 \
    make \
    g++ \
    bash \
    curl \
    openjdk11-jdk

WORKDIR /app

# Dependencies stage
FROM base AS deps

# Copy package files
COPY 5470_S_Highline_Circle/mobile/package*.json ./

# Install dependencies
RUN npm ci

# Install Android SDK
ENV ANDROID_HOME=/opt/android-sdk
ENV PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools

RUN mkdir -p ${ANDROID_HOME} && \
    wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/android-sdk.zip && \
    unzip -q /tmp/android-sdk.zip -d ${ANDROID_HOME}/cmdline-tools && \
    mv ${ANDROID_HOME}/cmdline-tools/cmdline-tools ${ANDROID_HOME}/cmdline-tools/latest && \
    rm /tmp/android-sdk.zip

# Accept Android SDK licenses
RUN yes | ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager --licenses

# Install Android build tools and platform
RUN ${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager \
    "platforms;android-33" \
    "build-tools;33.0.0" \
    "platform-tools"

# Development stage
FROM base AS development
WORKDIR /app

# Install React Native CLI and Expo CLI
RUN npm install -g @react-native-community/cli expo-cli

# Copy package files
COPY package.json package-lock.json ./

# Install dependencies
RUN npm ci

# Copy source code
COPY . .

# Expose Metro bundler port
EXPOSE 8081

# Start Metro bundler
CMD ["npm", "start"]

# Build stage for Android
FROM base AS build-android
WORKDIR /app

# Copy dependencies and source
COPY package.json package-lock.json ./
RUN npm ci

COPY . .

# Build Android APK
RUN cd android && ./gradlew assembleRelease

# Extract APK
RUN mkdir -p /app/dist && \
    cp android/app/build/outputs/apk/release/app-release.apk /app/dist/

# iOS build stage (requires macOS runner in CI)
FROM base AS build-ios
WORKDIR /app

# Note: iOS builds require macOS environment
# This stage is for reference and would run on macOS runners
COPY package.json package-lock.json ./
RUN npm ci

COPY . .

# Install iOS dependencies (would require CocoaPods)
# RUN cd ios && pod install

# Build iOS app (would require Xcode)
# RUN xcodebuild -workspace ios/CandlefishMobile.xcworkspace \
#     -scheme CandlefishMobile \
#     -configuration Release \
#     -destination generic/platform=iOS \
#     -archivePath build/CandlefishMobile.xcarchive \
#     archive

# Test stage
FROM development AS test
WORKDIR /app

# Run tests
RUN npm test -- --watchAll=false --coverage

# Run linting
RUN npm run lint

# Run type checking
RUN npm run typecheck

# Production artifact stage
FROM alpine:latest AS artifacts

# Install curl for health checks
RUN apk add --no-cache curl

WORKDIR /app

# Copy built artifacts
COPY --from=build-android /app/dist/ ./android/
# COPY --from=build-ios /app/build/ ./ios/

# Create metadata file
RUN echo "Built at: $(date)" > build-info.txt

# Health check endpoint for container orchestration
EXPOSE 8080
CMD ["sh", "-c", "echo 'Mobile artifacts ready' && sleep infinity"]
