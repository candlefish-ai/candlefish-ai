# Multi-stage build for React frontend
FROM node:20-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    libc6-compat \
    git

WORKDIR /app

# Dependencies stage
FROM base AS deps

# Copy package files
COPY 5470_S_Highline_Circle/frontend/package*.json ./

# Install dependencies with npm ci for faster, reliable builds
RUN npm ci --only=production && \
    cp -R node_modules prod_node_modules && \
    npm ci

# Development stage
FROM base AS development

WORKDIR /app

# Copy all dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY 5470_S_Highline_Circle/frontend/ .

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

USER nextjs

EXPOSE 5173

# Development server with hot reload
CMD ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

# Build stage
FROM base AS builder

WORKDIR /app

# Copy dependencies and source
COPY --from=deps /app/node_modules ./node_modules
COPY 5470_S_Highline_Circle/frontend/ .

# Build arguments for environment variables
ARG VITE_API_URL
ARG VITE_APP_VERSION
ARG BUILD_DATE
ARG VCS_REF

ENV VITE_API_URL=${VITE_API_URL:-http://localhost:8080/api/v1}
ENV VITE_APP_VERSION=${VITE_APP_VERSION:-unknown}
ENV VITE_BUILD_DATE=${BUILD_DATE}
ENV VITE_GIT_COMMIT=${VCS_REF}

# Build application
RUN npm run build

# Test stage
FROM builder AS test

# Install test dependencies
RUN npm ci

# Run tests
RUN npm run type-check
RUN npm run lint
# RUN npm run test:ci (if tests exist)

# Production stage
FROM nginx:alpine AS production

# Install curl for health checks
RUN apk add --no-cache curl

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Copy nginx configuration
COPY deployment/docker/nginx/frontend.conf /etc/nginx/conf.d/default.conf

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/dist /usr/share/nginx/html

# Copy security headers configuration
COPY deployment/docker/nginx/security-headers.conf /etc/nginx/conf.d/security-headers.conf
COPY deployment/docker/nginx/compression.conf /etc/nginx/conf.d/compression.conf

# Add metadata labels
LABEL maintainer="Patrick Smith <patrick@candlefish.ai>"
LABEL org.opencontainers.image.title="Inventory Frontend"
LABEL org.opencontainers.image.description="React frontend for inventory management system"
LABEL org.opencontainers.image.vendor="Candlefish AI"
LABEL org.opencontainers.image.version="${VITE_APP_VERSION}"
LABEL org.opencontainers.image.created="${BUILD_DATE}"
LABEL org.opencontainers.image.revision="${VCS_REF}"
LABEL org.opencontainers.image.source="https://github.com/candlefish-ai/candlefish-ai"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80/health || exit 1

# Expose port
EXPOSE 80

# Run nginx
CMD ["nginx", "-g", "daemon off;"]
