# Multi-stage build for optimal production image
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
WORKDIR /app

# Install pnpm
RUN corepack enable pnpm

# Copy package files
COPY package.json pnpm-lock.yaml ./

# Install dependencies with security optimizations
RUN pnpm install --frozen-lockfile --production=false

# Build stage
FROM base AS builder
WORKDIR /app

# Install pnpm
RUN corepack enable pnpm

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Build arguments for environment-specific builds
ARG BUILD_ENV=production
ARG API_URL
ARG GRAPHQL_URL
ARG WS_URL
ARG SENTRY_DSN
ARG APP_VERSION

# Set build environment variables
ENV NODE_ENV=production
ENV BUILD_ENV=${BUILD_ENV}
ENV VITE_API_URL=${API_URL}
ENV VITE_GRAPHQL_URL=${GRAPHQL_URL}
ENV VITE_WS_URL=${WS_URL}
ENV VITE_SENTRY_DSN=${SENTRY_DSN}
ENV VITE_APP_VERSION=${APP_VERSION}

# Build the application
RUN pnpm build

# Production stage with nginx
FROM nginx:1.25-alpine AS production

# Install security updates
RUN apk update && apk upgrade && apk add --no-cache \
    ca-certificates \
    tzdata

# Create nginx user for security
RUN addgroup -g 1001 -S nginx-user && \
    adduser -S nginx-user -G nginx-user -u 1001

# Copy nginx configuration
COPY deployment/nginx/nginx.conf /etc/nginx/nginx.conf
COPY deployment/nginx/default.conf /etc/nginx/conf.d/default.conf

# Copy built application
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy security headers and CSP configuration
COPY deployment/nginx/security-headers.conf /etc/nginx/conf.d/security-headers.conf

# Create directories for nginx
RUN mkdir -p /var/cache/nginx/client_temp && \
    mkdir -p /var/cache/nginx/proxy_temp && \
    mkdir -p /var/cache/nginx/fastcgi_temp && \
    mkdir -p /var/cache/nginx/uwsgi_temp && \
    mkdir -p /var/cache/nginx/scgi_temp && \
    chown -R nginx-user:nginx-user /var/cache/nginx && \
    chown -R nginx-user:nginx-user /usr/share/nginx/html && \
    chown -R nginx-user:nginx-user /var/log/nginx

# Set proper file permissions
RUN chmod -R 755 /usr/share/nginx/html

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80/health || exit 1

# Run as non-root user
USER nginx-user

# Expose port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]

# Development stage
FROM base AS development
WORKDIR /app

# Install pnpm
RUN corepack enable pnpm

# Copy package files
COPY package.json pnpm-lock.yaml ./

# Install all dependencies including dev dependencies
RUN pnpm install --frozen-lockfile

# Copy application code
COPY . .

# Expose Vite dev server port
EXPOSE 5173

# Start development server
CMD ["pnpm", "dev", "--host", "0.0.0.0"]

# Test stage for CI/CD
FROM development AS test
WORKDIR /app

# Run tests
RUN pnpm test:ci

# Run linting
RUN pnpm lint

# Run type checking
RUN pnpm typecheck

# Build test
RUN pnpm build
