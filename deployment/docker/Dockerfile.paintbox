# Multi-stage Dockerfile for Paintbox Service
# Next.js application with PDF generation capabilities

# Stage 1: Dependencies
FROM node:20-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Copy package files
COPY projects/paintbox/package.json projects/paintbox/pnpm-lock.yaml ./
RUN pnpm install --frozen-lockfile

# Stage 2: Builder
FROM node:20-alpine AS builder
WORKDIR /app

# Install build dependencies for native modules
RUN apk add --no-cache python3 make g++ cairo-dev pango-dev giflib-dev libjpeg-turbo-dev

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules

# Copy source code
COPY projects/paintbox .

# Build application
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
RUN pnpm build

# Stage 3: Runtime
FROM node:20-alpine AS runtime
WORKDIR /app

# Install runtime dependencies for PDF generation and canvas
RUN apk add --no-cache \
    cairo \
    pango \
    giflib \
    libjpeg-turbo \
    fontconfig \
    ttf-dejavu \
    curl

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Copy additional assets
COPY --from=builder --chown=nextjs:nodejs /app/lib ./lib

# Set up environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# PDF generation settings
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

# Install chromium for PDF generation
RUN apk add --no-cache chromium

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node healthcheck.js || exit 1

# Create healthcheck script
RUN echo 'const http = require("http"); \
const options = { host: "localhost", port: 3000, timeout: 2000 }; \
const request = http.request(options, (res) => { \
  if (res.statusCode === 200) process.exit(0); \
  else process.exit(1); \
}); \
request.on("error", () => process.exit(1)); \
request.end();' > healthcheck.js && \
    chown nextjs:nodejs healthcheck.js

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Start application
CMD ["node", "server.js"]
