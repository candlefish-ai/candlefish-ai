# Multi-stage Docker build for Performance Monitoring System
# Optimized for production deployment with security best practices

# Build stage
FROM node:18-alpine AS builder

# Build arguments
ARG NODE_VERSION=18
ARG BUILD_DATE
ARG VCS_REF

# Add build metadata
LABEL build.date=$BUILD_DATE \
      build.vcs-ref=$VCS_REF \
      build.version="1.0.0"

# Security: Create non-root user
RUN addgroup -g 1001 -S nodejs && adduser -S nextjs -u 1001

# Set working directory
WORKDIR /app

# Copy package files for dependency installation
COPY backend/monitor-service/package*.json ./
COPY backend/monitor-service/tsconfig.json ./

# Install dependencies with security optimizations
RUN npm ci --only=production --no-audit --ignore-scripts && \
    npm cache clean --force

# Copy source code
COPY backend/monitor-service/src ./src
COPY backend/monitor-service/config ./config

# Build TypeScript application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Security updates and runtime dependencies
RUN apk upgrade --no-cache && \
    apk add --no-cache \
    curl \
    ca-certificates \
    tzdata \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && adduser -S nextjs -u 1001

# Set working directory
WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=nextjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./package.json
COPY --from=builder --chown=nextjs:nodejs /app/config ./config

# Create required directories
RUN mkdir -p /app/logs /app/metrics /app/alerts && \
    chown -R nextjs:nodejs /app/logs /app/metrics /app/alerts

# Switch to non-root user
USER nextjs

# Environment variables
ENV NODE_ENV=production \
    PORT=8002 \
    LOG_LEVEL=info \
    METRICS_INTERVAL=30000 \
    ALERT_CHECK_INTERVAL=60000 \
    RETENTION_DAYS=30

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8002/health || exit 1

# Expose port
EXPOSE 8002

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/index.js"]

# Security metadata
LABEL org.opencontainers.image.title="Performance Monitoring System" \
      org.opencontainers.image.description="Real-time monitoring and alerting service for Netlify extension performance" \
      org.opencontainers.image.version="1.0.0" \
      org.opencontainers.image.vendor="Candlefish Enterprise" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.source="https://github.com/candlefish-enterprise/candlefish-ai" \
      org.opencontainers.image.documentation="https://docs.candlefish.ai/netlify-extension" \
      org.opencontainers.image.created=$BUILD_DATE \
      org.opencontainers.image.revision=$VCS_REF
