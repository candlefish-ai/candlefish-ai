# Production Docker Compose for Candlefish Collaboration System
version: '3.8'

services:
  # PostgreSQL with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: collaboration-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: collaboration_db
      POSTGRES_USER: collaboration_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U collaboration_user -d collaboration_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis for caching and pub/sub
  redis:
    image: redis:7.2-alpine
    container_name: collaboration-redis
    restart: unless-stopped
    command: redis-server /etc/redis/redis.conf
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # GraphQL API Service
  graphql-api:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.graphql-api
      target: runtime
    container_name: collaboration-graphql-api
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://collaboration_user:${DB_PASSWORD}@postgres:5432/collaboration_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      PORT: 4000
      LOG_LEVEL: info
      CORS_ORIGINS: https://editor.candlefish.ai,https://app.candlefish.ai
      RATE_LIMIT_WINDOW_MS: 60000
      RATE_LIMIT_MAX_REQUESTS: 1000
      SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "/app/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # WebSocket Service
  websocket-service:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.websocket-service
      target: runtime
    container_name: collaboration-websocket
    restart: unless-stopped
    ports:
      - "4001:4001"
      - "4002:4002"
    environment:
      NODE_ENV: production
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      JWT_SECRET: ${JWT_SECRET}
      WS_AUTH_SECRET: ${WS_AUTH_SECRET}
      WS_PORT: 4001
      METRICS_PORT: 4002
      WS_HEARTBEAT_INTERVAL: 30000
      WS_MAX_CONNECTIONS_PER_IP: 10
      LOG_LEVEL: info
      UV_THREADPOOL_SIZE: 128
      SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "/app/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Document Service with CRDT
  document-service:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.document-service
      target: runtime
    container_name: collaboration-document
    restart: unless-stopped
    ports:
      - "4003:4003"
      - "4004:4004"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://collaboration_user:${DB_PASSWORD}@postgres:5432/collaboration_db
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      PORT: 4003
      STORAGE_PORT: 4004
      LOG_LEVEL: info
      CRDT_CONFLICT_RESOLUTION: last-writer-wins
      CRDT_HISTORY_LIMIT: 1000
      CRDT_BATCH_SIZE: 50
      MAX_FILE_SIZE: 10485760
      SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - document_storage:/app/storage
      - document_cache:/app/cache
    healthcheck:
      test: ["CMD", "node", "/app/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1.5G
          cpus: '1.5'
        reservations:
          memory: 768M
          cpus: '0.3'

  # Collaboration Editor Frontend
  collaboration-editor:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.collaboration-editor
      target: runner
    container_name: collaboration-editor
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      HOSTNAME: 0.0.0.0
      NEXT_TELEMETRY_DISABLED: 1
      NEXT_PUBLIC_GRAPHQL_URL: https://api.candlefish.ai/graphql
      NEXT_PUBLIC_WS_URL: wss://ws.candlefish.ai/graphql
      NEXTAUTH_URL: https://editor.candlefish.ai
      NEXTAUTH_SECRET: ${JWT_SECRET}
      NEXT_PUBLIC_SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      - graphql-api
      - websocket-service
      - document-service
    healthcheck:
      test: ["CMD", "node", "/app/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Load Balancer / Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: collaboration-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - collaboration-editor
      - graphql-api
      - websocket-service
      - document-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: collaboration-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.1'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: collaboration-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/collaboration/data/postgres

  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/collaboration/data/redis

  document_storage:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/collaboration/storage/documents

  document_cache:
    driver: local

  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/collaboration/monitoring/prometheus

  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/collaboration/monitoring/grafana

  nginx_logs:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
