# Optimized Next.js Frontend Applications (docs, partners, API sites)
# Build arguments for cache busting and configuration
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=latest
ARG APP_NAME=docs-site
ARG NODE_ENV=production

# Use security-hardened base image
FROM candlefish/base:latest AS base

# Dependencies stage with enhanced caching
FROM base AS deps
ARG APP_NAME

# Copy workspace configuration
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/shared/package.json ./packages/shared/
COPY packages/ui/package.json ./packages/ui/
COPY apps/${APP_NAME}/package.json ./apps/${APP_NAME}/

# Install dependencies with caching
RUN --mount=type=cache,target=/tmp/.npm \
    --mount=type=cache,target=/app/.pnpm-store \
    PNPM_STORE_DIR=/app/.pnpm-store pnpm install --frozen-lockfile

# Build stage with optimization
FROM deps AS builder
ARG APP_NAME
ARG NODE_ENV

# Copy source code
COPY packages/ ./packages/
COPY apps/${APP_NAME}/ ./apps/${APP_NAME}/
COPY tsconfig.json turbo.json ./
COPY Branding/ ./Branding/

# Set build environment
ENV NODE_ENV=${NODE_ENV}
ENV NEXT_TELEMETRY_DISABLED=1
ENV GENERATE_SOURCEMAP=false

# Brand sync and build
RUN pnpm brand:sync
RUN pnpm turbo build --filter=apps/${APP_NAME}

# Production runtime stage
FROM nginx:1.25.3-alpine AS runtime
ARG APP_NAME
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

# Labels for image metadata
LABEL org.opencontainers.image.title="Candlefish Frontend - ${APP_NAME}" \
      org.opencontainers.image.description="Frontend application for Candlefish AI Platform" \
      org.opencontainers.image.source="https://github.com/candlefish-ai/platform" \
      org.opencontainers.image.version="${VERSION}" \
      org.opencontainers.image.created="${BUILD_DATE}" \
      org.opencontainers.image.revision="${VCS_REF}" \
      org.opencontainers.image.vendor="Candlefish AI" \
      org.opencontainers.image.licenses="MIT"

# Install security updates and required tools
RUN apk update && apk upgrade && apk add --no-cache \
    curl \
    nodejs \
    npm \
    && rm -rf /var/cache/apk/*

# Copy built application
COPY --from=builder /app/apps/${APP_NAME}/out /usr/share/nginx/html
COPY --from=builder /app/apps/${APP_NAME}/public /usr/share/nginx/html/public

# Copy optimized nginx configuration
COPY deployment/docker/nginx/frontend.conf /etc/nginx/conf.d/default.conf
COPY deployment/docker/nginx/security-headers.conf /etc/nginx/conf.d/security-headers.conf
COPY deployment/docker/nginx/compression.conf /etc/nginx/conf.d/compression.conf

# Create health check endpoint
RUN echo '<!DOCTYPE html><html><head><title>Health Check</title></head><body><h1>OK</h1><script>window.APP_NAME="'${APP_NAME}'";window.BUILD_DATE="'${BUILD_DATE}'";</script></body></html>' \
    > /usr/share/nginx/html/health.html

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid

# Create nginx user if it doesn't exist
RUN addgroup -g 101 -S nginx || true && \
    adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx || true

# Switch to non-root user
USER nginx

# Environment variables
ENV APP_NAME=${APP_NAME} \
    NGINX_WORKER_PROCESSES=auto \
    NGINX_WORKER_CONNECTIONS=1024 \
    NGINX_KEEPALIVE_TIMEOUT=65

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health.html || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
