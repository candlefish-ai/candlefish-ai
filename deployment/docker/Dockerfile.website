# Multi-stage Dockerfile for Candlefish AI Website
# Optimized for production with security and performance best practices

# Stage 1: Dependencies
FROM node:20-alpine AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Copy package files
COPY apps/website/package.json apps/website/pnpm-lock.yaml* ./
COPY components/package.json ./components/
COPY pnpm-workspace.yaml ./

# Install dependencies
RUN pnpm install --frozen-lockfile

# Stage 2: Builder
FROM node:20-alpine AS builder
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/.pnpm-store ./.pnpm-store

# Copy source code
COPY apps/website ./apps/website
COPY components ./components
COPY public/logo ./public/logo
COPY pnpm-workspace.yaml ./

# Set build environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Build application
WORKDIR /app/apps/website
RUN pnpm build

# Stage 3: Runtime
FROM node:20-alpine AS runner
WORKDIR /app

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder /app/apps/website/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/apps/website/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/apps/website/.next/static ./.next/static

# Set up environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node healthcheck.js || exit 1

# Create healthcheck script
RUN echo 'const http = require("http"); \
const options = { host: "localhost", port: 3000, timeout: 2000 }; \
const request = http.request(options, (res) => { \
  if (res.statusCode === 200) process.exit(0); \
  else process.exit(1); \
}); \
request.on("error", () => process.exit(1)); \
request.end();' > healthcheck.js

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Start application
CMD ["node", "server.js"]
