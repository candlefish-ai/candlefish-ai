# Kibana Deployment for RTPM Log Visualization
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: rtpm-system
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/component: logging
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: kibana
      app.kubernetes.io/component: logging
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kibana
        app.kubernetes.io/component: logging
    spec:
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: kibana
        image: docker.elastic.co/kibana/kibana:8.11.1
        ports:
        - containerPort: 5601
          name: http
        env:
        - name: ELASTICSEARCH_HOSTS
          value: "https://elasticsearch:9200"
        - name: ELASTICSEARCH_USERNAME
          valueFrom:
            secretKeyRef:
              name: elasticsearch-credentials
              key: username
        - name: ELASTICSEARCH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: elasticsearch-credentials
              key: password
        - name: SERVER_NAME
          value: "kibana.rtpm.candlefish.ai"
        - name: SERVER_BASEPATH
          value: "/kibana"
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1
            memory: 1Gi
        volumeMounts:
        - name: kibana-config
          mountPath: /usr/share/kibana/config/kibana.yml
          subPath: kibana.yml
        livenessProbe:
          httpGet:
            path: /kibana/api/status
            port: 5601
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /kibana/api/status
            port: 5601
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: kibana-config
        configMap:
          name: kibana-config
---
apiVersion: v1
kind: Service
metadata:
  name: kibana
  namespace: rtpm-system
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/component: logging
spec:
  type: ClusterIP
  ports:
  - port: 5601
    targetPort: 5601
    name: http
  selector:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/component: logging
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kibana-config
  namespace: rtpm-system
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/component: logging
data:
  kibana.yml: |
    # Server configuration
    server.name: "kibana"
    server.host: "0.0.0.0"
    server.port: 5601
    server.basePath: "/kibana"
    server.rewriteBasePath: true

    # Elasticsearch configuration
    elasticsearch.hosts: ["${ELASTICSEARCH_HOSTS}"]
    elasticsearch.username: "${ELASTICSEARCH_USERNAME}"
    elasticsearch.password: "${ELASTICSEARCH_PASSWORD}"
    elasticsearch.ssl.verificationMode: none

    # Security
    elasticsearch.requestHeadersAllowlist: ["authorization"]

    # Monitoring
    monitoring.ui.container.elasticsearch.enabled: true
    monitoring.ui.container.logstash.enabled: true

    # Logging
    logging.level: info
    logging.quiet: false
    logging.dest: stdout

    # UI Configuration
    newsfeed.enabled: false
    telemetry.enabled: false
    telemetry.optIn: false

    # Maps configuration
    map.includeElasticMapsService: true

    # Advanced settings
    data.search.aggs.shardDelay.enabled: true

    # Index patterns
    kibana.index: ".kibana-rtpm"

    # Default index pattern
    kibana.defaultAppId: "discover"

    # Visualization settings
    vis_type_vega.enableExternalUrls: false

    # CSV export settings
    csv.maxSizeBytes: 1048576

    # Saved objects settings
    savedObjects.maxImportPayloadBytes: 26214400
---
apiVersion: batch/v1
kind: Job
metadata:
  name: kibana-setup
  namespace: rtpm-system
  labels:
    app.kubernetes.io/name: kibana-setup
    app.kubernetes.io/component: logging
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: setup
        image: curlimages/curl:8.4.0
        command:
        - /bin/sh
        - -c
        - |
          # Wait for Kibana to be ready
          until curl -s -f http://kibana:5601/kibana/api/status; do
            echo "Waiting for Kibana..."
            sleep 10
          done

          # Create index patterns
          curl -X POST "http://kibana:5601/kibana/api/saved_objects/index-pattern/rtpm-logs-api" \
            -H "Content-Type: application/json" \
            -H "kbn-xsrf: true" \
            -d '{
              "attributes": {
                "title": "rtpm-logs-api-*",
                "timeFieldName": "@timestamp"
              }
            }'

          curl -X POST "http://kibana:5601/kibana/api/saved_objects/index-pattern/rtpm-logs-celery" \
            -H "Content-Type: application/json" \
            -H "kbn-xsrf: true" \
            -d '{
              "attributes": {
                "title": "rtpm-logs-celery-worker-*",
                "timeFieldName": "@timestamp"
              }
            }'

          curl -X POST "http://kibana:5601/kibana/api/saved_objects/index-pattern/rtpm-logs-db" \
            -H "Content-Type: application/json" \
            -H "kbn-xsrf: true" \
            -d '{
              "attributes": {
                "title": "rtpm-logs-timescaledb-*",
                "timeFieldName": "@timestamp"
              }
            }'

          # Set default index pattern
          curl -X POST "http://kibana:5601/kibana/api/kibana/settings" \
            -H "Content-Type: application/json" \
            -H "kbn-xsrf: true" \
            -d '{
              "changes": {
                "defaultIndex": "rtpm-logs-api"
              }
            }'

          echo "Kibana setup completed successfully"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kibana-ingress
  namespace: rtpm-system
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/component: logging
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: kibana-auth
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required - RTPM Logs"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - logs.rtpm.candlefish.ai
    secretName: kibana-tls
  rules:
  - host: logs.rtpm.candlefish.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kibana
            port:
              number: 5601
---
apiVersion: v1
kind: Secret
metadata:
  name: kibana-auth
  namespace: rtpm-system
  labels:
    app.kubernetes.io/name: kibana
    app.kubernetes.io/component: logging
type: Opaque
data:
  # Generated with: htpasswd -nb admin password | base64
  auth: YWRtaW46JGFwcjEkSE9WeU9Ua24kUzVNZjZ6T3VyNUhKRzRWME5LdUlZLgoK  # admin:password
