# Blue-Green Deployment Strategy for RTPM
# Zero-downtime deployment with automated testing and rollback

apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: rtpm-api-rollout
  namespace: rtpm-system
  labels:
    app.kubernetes.io/name: rtpm
    app.kubernetes.io/component: api-rollout
spec:
  replicas: 6
  strategy:
    blueGreen:
      # Service names for blue/green environments
      activeService: rtpm-api-service-active
      previewService: rtpm-api-service-preview
      
      # Auto-promotion after successful pre-promotion analysis
      autoPromotionEnabled: false
      
      # Scale down the old ReplicaSet after promotion
      scaleDownDelaySeconds: 30
      
      # Pre-promotion analysis
      prePromotionAnalysis:
        templates:
        - templateName: health-check
        - templateName: load-test
        - templateName: integration-test
        args:
        - name: service-name
          value: rtmp-api-service-preview
        - name: namespace
          value: rtpm-system
      
      # Post-promotion analysis
      postPromotionAnalysis:
        templates:
        - templateName: monitoring-check
        args:
        - name: service-name
          value: rtpm-api-service-active
        - name: namespace
          value: rtpm-system
      
      # Preview replica count
      previewReplicaCount: 3
      
      # Anti-affinity for blue/green pods
      antiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution: {}
        preferredDuringSchedulingIgnoredDuringExecution:
          weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values: ["rtpm"]
            topologyKey: kubernetes.io/hostname
  
  selector:
    matchLabels:
      app.kubernetes.io/name: rtpm
      app.kubernetes.io/component: api
      app.kubernetes.io/instance: rtpm-api
  
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rtpm
        app.kubernetes.io/component: api
        app.kubernetes.io/instance: rtpm-api
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: api
        image: 681214184463.dkr.ecr.us-east-1.amazonaws.com/rtpm-api:latest
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: rtpm-secrets
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: rtpm-secrets
              key: REDIS_URL
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 1
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
---
# Active Service (Blue Environment)
apiVersion: v1
kind: Service
metadata:
  name: rtpm-api-service-active
  namespace: rtpm-system
  labels:
    app.kubernetes.io/name: rtpm
    app.kubernetes.io/component: api-service-active
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: rtpm
    app.kubernetes.io/component: api
    app.kubernetes.io/instance: rtpm-api
---
# Preview Service (Green Environment)
apiVersion: v1
kind: Service
metadata:
  name: rtpm-api-service-preview
  namespace: rtpm-system
  labels:
    app.kubernetes.io/name: rtpm
    app.kubernetes.io/component: api-service-preview
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: rtpm
    app.kubernetes.io/component: api
    app.kubernetes.io/instance: rtpm-api
---
# Analysis Templates for Blue-Green Deployment
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: health-check
  namespace: rtpm-system
spec:
  args:
  - name: service-name
  - name: namespace
    value: rtpm-system
  metrics:
  - name: health-check
    provider:
      web:
        url: "http://{{args.service-name}}.{{args.namespace}}.svc.cluster.local:8000/health"
        headers:
        - key: "User-Agent"
          value: "Argo-Rollouts-Health-Check"
        jsonPath: "{$.status}"
        successCondition: "result == 'healthy'"
    successCondition: "result == 'healthy'"
    failureLimit: 3
    interval: 10s
    count: 6
---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: load-test
  namespace: rtpm-system
spec:
  args:
  - name: service-name
  - name: namespace
    value: rtpm-system
  metrics:
  - name: load-test
    provider:
      job:
        spec:
          template:
            spec:
              containers:
              - name: load-test
                image: loadimpact/k6:latest
                command: ["/bin/sh"]
                args:
                - -c
                - |
                  cat <<EOF > /tmp/test.js
                  import http from 'k6/http';
                  import { check, sleep } from 'k6';
                  
                  export let options = {
                    stages: [
                      { duration: '30s', target: 20 },
                      { duration: '1m', target: 50 },
                      { duration: '30s', target: 0 },
                    ],
                    thresholds: {
                      http_req_duration: ['p(95)<500'],
                      http_req_failed: ['rate<0.05'],
                    },
                  };
                  
                  export default function () {
                    let response = http.get('http://{{args.service-name}}.{{args.namespace}}.svc.cluster.local:8000/health');
                    check(response, {
                      'status is 200': (r) => r.status === 200,
                      'response time < 500ms': (r) => r.timings.duration < 500,
                    });
                    sleep(1);
                  }
                  EOF
                  k6 run /tmp/test.js
              restartPolicy: Never
    successCondition: "result.status == 'Passed'"
    failureLimit: 1
---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: integration-test
  namespace: rtpm-system
spec:
  args:
  - name: service-name
  - name: namespace
    value: rtpm-system
  metrics:
  - name: integration-test
    provider:
      job:
        spec:
          template:
            spec:
              containers:
              - name: integration-test
                image: curlimages/curl:8.4.0
                command: ["/bin/sh"]
                args:
                - -c
                - |
                  # Test API endpoints
                  echo "Testing health endpoint..."
                  curl -f http://{{args.service-name}}.{{args.namespace}}.svc.cluster.local:8000/health || exit 1
                  
                  echo "Testing metrics endpoint..."
                  curl -f http://{{args.service-name}}.{{args.namespace}}.svc.cluster.local:8000/metrics || exit 1
                  
                  echo "Testing agents endpoint..."
                  curl -f -X GET http://{{args.service-name}}.{{args.namespace}}.svc.cluster.local:8000/api/v1/agents || exit 1
                  
                  echo "All integration tests passed!"
              restartPolicy: Never
    successCondition: "result.status == 'Succeeded'"
    failureLimit: 1
---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: monitoring-check
  namespace: rtpm-system
spec:
  args:
  - name: service-name
  - name: namespace
    value: rtpm-system
  metrics:
  - name: error-rate
    provider:
      prometheus:
        address: http://prometheus.monitoring.svc.cluster.local:9090
        query: |
          sum(rate(http_requests_total{job="rtpm-api",status=~"5.."}[5m])) /
          sum(rate(http_requests_total{job="rtmp-api"}[5m])) * 100
    successCondition: "result[0] < 5"
    interval: 30s
    count: 10
    failureLimit: 3
  
  - name: response-time
    provider:
      prometheus:
        address: http://prometheus.monitoring.svc.cluster.local:9090
        query: |
          histogram_quantile(0.95,
            sum(rate(http_request_duration_seconds_bucket{job="rtpm-api"}[5m])) by (le)
          )
    successCondition: "result[0] < 1"
    interval: 30s
    count: 10
    failureLimit: 3
  
  - name: cpu-usage
    provider:
      prometheus:
        address: http://prometheus.monitoring.svc.cluster.local:9090
        query: |
          avg(rate(container_cpu_usage_seconds_total{namespace="rtpm-system",pod=~"rtpm-api-.*"}[5m])) * 100
    successCondition: "result[0] < 80"
    interval: 30s
    count: 10
    failureLimit: 3
---
# Blue-Green Deployment for Frontend
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: rtpm-frontend-rollout
  namespace: rtpm-system
  labels:
    app.kubernetes.io/name: rtpm
    app.kubernetes.io/component: frontend-rollout
spec:
  replicas: 4
  strategy:
    blueGreen:
      activeService: rtpm-frontend-service-active
      previewService: rtpm-frontend-service-preview
      autoPromotionEnabled: false
      scaleDownDelaySeconds: 30
      prePromotionAnalysis:
        templates:
        - templateName: frontend-health-check
        - templateName: frontend-e2e-test
        args:
        - name: service-name
          value: rtpm-frontend-service-preview
        - name: namespace
          value: rtpm-system
  
  selector:
    matchLabels:
      app.kubernetes.io/name: rtpm
      app.kubernetes.io/component: frontend
      app.kubernetes.io/instance: rtpm-frontend
  
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rtpm
        app.kubernetes.io/component: frontend
        app.kubernetes.io/instance: rtpm-frontend
    spec:
      containers:
      - name: frontend
        image: 681214184463.dkr.ecr.us-east-1.amazonaws.com/rtpm-frontend:latest
        ports:
        - containerPort: 80
          name: http
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Frontend Services
apiVersion: v1
kind: Service
metadata:
  name: rtpm-frontend-service-active
  namespace: rtpm-system
  labels:
    app.kubernetes.io/name: rtpm
    app.kubernetes.io/component: frontend-service-active
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: rtpm
    app.kubernetes.io/component: frontend
    app.kubernetes.io/instance: rtpm-frontend
---
apiVersion: v1
kind: Service
metadata:
  name: rtpm-frontend-service-preview
  namespace: rtpm-system
  labels:
    app.kubernetes.io/name: rtpm
    app.kubernetes.io/component: frontend-service-preview
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: rtpm
    app.kubernetes.io/component: frontend
    app.kubernetes.io/instance: rtpm-frontend
---
# Frontend Analysis Templates
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: frontend-health-check
  namespace: rtpm-system
spec:
  args:
  - name: service-name
  - name: namespace
    value: rtpm-system
  metrics:
  - name: frontend-health
    provider:
      web:
        url: "http://{{args.service-name}}.{{args.namespace}}.svc.cluster.local/health"
        headers:
        - key: "User-Agent"
          value: "Argo-Rollouts-Frontend-Check"
    successCondition: "result != ''"
    failureLimit: 3
    interval: 10s
    count: 6
---
apiVersion: argoproj.io/v1alpha1
kind: AnalysisTemplate
metadata:
  name: frontend-e2e-test
  namespace: rtpm-system
spec:
  args:
  - name: service-name
  - name: namespace
    value: rtpm-system
  metrics:
  - name: e2e-test
    provider:
      job:
        spec:
          template:
            spec:
              containers:
              - name: e2e-test
                image: mcr.microsoft.com/playwright:v1.40.0-focal
                command: ["/bin/bash"]
                args:
                - -c
                - |
                  npm init -y
                  npm install @playwright/test
                  
                  cat <<EOF > test.spec.js
                  const { test, expect } = require('@playwright/test');
                  
                  test('homepage loads', async ({ page }) => {
                    await page.goto('http://{{args.service-name}}.{{args.namespace}}.svc.cluster.local');
                    await expect(page).toHaveTitle(/RTPM/);
                  });
                  
                  test('dashboard loads', async ({ page }) => {
                    await page.goto('http://{{args.service-name}}.{{args.namespace}}.svc.cluster.local/dashboard');
                    await expect(page.locator('text=Dashboard')).toBeVisible();
                  });
                  EOF
                  
                  npx playwright test --reporter=list
              restartPolicy: Never
    successCondition: "result.status == 'Succeeded'"
    failureLimit: 1