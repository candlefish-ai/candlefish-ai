# Candlefish AI Monorepo - Production Environment
# Use this for production deployments with optimized containers
version: '3.8'

services:
  # Core Services
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: candlefish-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - candlefish
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: candlefish-redis-prod
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - candlefish
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # RTPM API Service
  rtpm-api:
    build:
      context: ./apps/rtpm-api
      dockerfile: Dockerfile
      target: production
    container_name: candlefish-rtpm-api-prod
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "127.0.0.1:8080:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - candlefish
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # NANDA Services
  nanda-api:
    build:
      context: ./apps/nanda-api
      dockerfile: Dockerfile
      target: production
    container_name: candlefish-nanda-api-prod
    environment:
      NODE_ENV: production
      PORT: 3000
      AWS_REGION: ${AWS_REGION}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "127.0.0.1:3000:3000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - candlefish
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nanda-dashboard:
    build:
      context: ./apps/nanda-dashboard
      dockerfile: Dockerfile
      target: production
    container_name: candlefish-nanda-dashboard-prod
    environment:
      NODE_ENV: production
      PORT: 3001
    ports:
      - "127.0.0.1:3001:3001"
    depends_on:
      nanda-api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - candlefish
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Temporal Platform
  temporal-server:
    build:
      context: ./candlefish-temporal-platform
      dockerfile: Dockerfile.production
    container_name: candlefish-temporal-prod
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      NODE_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "127.0.0.1:7233:7233"
      - "127.0.0.1:8088:8088"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    networks:
      - candlefish
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Main Website
  website:
    build:
      context: ./apps/website
      dockerfile: Dockerfile
      target: production
    container_name: candlefish-website-prod
    environment:
      NODE_ENV: production
      PORT: 3002
    ports:
      - "127.0.0.1:3002:3002"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - candlefish
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Clark County Permits Scraper
  clark-county-scraper:
    build:
      context: ./clark_county_permits_emergency
      dockerfile: Dockerfile
    container_name: candlefish-clark-scraper-prod
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      NODE_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-info}
      AWS_REGION: ${AWS_REGION}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - candlefish
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: candlefish-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      - rtpm-api
      - nanda-api
      - nanda-dashboard
      - website
      - temporal-server
    restart: unless-stopped
    networks:
      - candlefish
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
    name: candlefish_postgres_prod
  redis_data:
    name: candlefish_redis_prod

networks:
  candlefish:
    name: candlefish-prod
    driver: bridge
