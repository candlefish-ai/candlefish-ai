name: Comprehensive Test Suite

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run full test suite daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci --only=production
          npm ci --only=dev

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run ESLint (Backend)
        run: |
          cd backend
          npx eslint src/ --ext .js --format json --output-file ../eslint-backend.json
          npx eslint src/ --ext .js

      - name: Run ESLint (Frontend)
        run: |
          cd frontend
          npm run lint

      - name: Run TypeScript check (Frontend)
        run: |
          cd frontend
          npx tsc --noEmit

      - name: Check code formatting
        run: |
          cd backend
          npx prettier --check src/
          cd ../frontend
          npx prettier --check src/

      - name: Upload ESLint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-results
          path: eslint-*.json

  # Job 2: Unit Tests with Coverage
  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        component: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.component }}/package-lock.json

      - name: Install dependencies
        run: |
          cd ${{ matrix.component }}
          npm ci

      - name: Run unit tests (Backend)
        if: matrix.component == 'backend'
        run: |
          cd backend
          npm test -- --coverage --coverageReporters=text --coverageReporters=json --coverageReporters=lcov
        env:
          NODE_ENV: test
          JWT_SECRET: test-secret-key
          TEST_DATABASE_URL: postgresql://test:test@localhost:5432/tyler_test
          TEST_REDIS_URL: redis://localhost:6379/1

      - name: Run unit tests (Frontend)
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          npm run test:coverage -- --reporter=json --outputFile=../coverage-frontend.json
        env:
          NODE_ENV: test
          VITE_API_URL: http://localhost:3001

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./${{ matrix.component }}/coverage/lcov.info
          flags: ${{ matrix.component }}
          name: ${{ matrix.component }}-coverage
          fail_ci_if_error: false

      - name: Store coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.component }}
          path: ${{ matrix.component }}/coverage/

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: tyler_integration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Wait for services
        run: |
          timeout 30 sh -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
          timeout 30 sh -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'

      - name: Run database migrations
        run: |
          cd backend
          npm run migrate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/tyler_integration_test

      - name: Run integration tests
        run: |
          cd backend
          npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/tyler_integration_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key
          AWS_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: backend/test-results/

  # Job 4: Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend
          npm ci
          cd ../frontend
          npm ci

      - name: Run security audit (Backend)
        run: |
          cd backend
          npm audit --audit-level=high --json > ../security-audit-backend.json || true
          npm audit --audit-level=high
        continue-on-error: true

      - name: Run security audit (Frontend)
        run: |
          cd frontend
          npm audit --audit-level=high --json > ../security-audit-frontend.json || true
          npm audit --audit-level=high
        continue-on-error: true

      - name: Run security tests
        run: |
          cd backend
          npm run test:security
        env:
          NODE_ENV: test
          JWT_SECRET: test-secret-key

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: security-*.json

  # Job 5: E2E Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: tyler_e2e_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Start services
        run: |
          cd backend && npm start &
          cd frontend && npm run preview &

          # Wait for services to be ready
          timeout 60 sh -c 'until curl -f http://localhost:3001/health; do sleep 2; done'
          timeout 60 sh -c 'until curl -f http://localhost:3000; do sleep 2; done'
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/tyler_e2e_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key

      - name: Run E2E tests
        run: |
          cd frontend
          npm run test:e2e
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:3001

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/

      - name: Upload E2E videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-videos
          path: frontend/test-results/**/video.*

  # Job 6: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: tyler_perf_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Run performance tests
        run: |
          cd backend
          npm run test:performance
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/tyler_perf_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: backend/performance-results/

  # Job 7: Test Result Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, security-tests, e2e-tests]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Display test results
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Code Quality Status
          if [ "${{ needs.code-quality.result }}" == "success" ]; then
            echo "✅ Code Quality: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Code Quality: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          # Unit Tests Status
          if [ "${{ needs.unit-tests.result }}" == "success" ]; then
            echo "✅ Unit Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Unit Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          # Integration Tests Status
          if [ "${{ needs.integration-tests.result }}" == "success" ]; then
            echo "✅ Integration Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Integration Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          # Security Tests Status
          if [ "${{ needs.security-tests.result }}" == "success" ]; then
            echo "✅ Security Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Security Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

          # E2E Tests Status
          if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "✅ E2E Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ E2E Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check coverage thresholds
        run: |
          if [ -f "coverage-backend/coverage-summary.json" ]; then
            echo "Backend Coverage:" >> $GITHUB_STEP_SUMMARY
            node -e "
              const coverage = require('./coverage-backend/coverage-summary.json');
              const total = coverage.total;
              console.log('Lines: ' + total.lines.pct + '%');
              console.log('Functions: ' + total.functions.pct + '%');
              console.log('Branches: ' + total.branches.pct + '%');
              console.log('Statements: ' + total.statements.pct + '%');

              if (total.lines.pct < 80 || total.functions.pct < 80 || total.branches.pct < 80 || total.statements.pct < 80) {
                process.exit(1);
              }
            " || echo "⚠️ Coverage below threshold" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail if critical tests failed
        run: |
          if [ "${{ needs.unit-tests.result }}" != "success" ] ||
             [ "${{ needs.integration-tests.result }}" != "success" ] ||
             [ "${{ needs.security-tests.result }}" != "success" ]; then
            echo "Critical tests failed"
            exit 1
          fi

  # Job 8: Deploy to Staging (on success)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: github.ref == 'refs/heads/develop' && success()
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment steps here

      - name: Run smoke tests on staging
        run: |
          echo "Running smoke tests on staging..."
          curl -f https://staging.tyler-setup.example.com/health

      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: "Tyler Setup deployed to staging successfully! 🚀"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

# Additional workflow for PR-specific testing
---
name: PR Test Suite

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-tests:
    name: PR Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run affected tests only
        run: |
          # Determine which files changed
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..HEAD)
          echo "Changed files: $CHANGED_FILES"

          # Run relevant tests based on changed files
          if echo "$CHANGED_FILES" | grep -q "backend/"; then
            echo "Backend changes detected, running backend tests..."
            cd backend && npm test
          fi

          if echo "$CHANGED_FILES" | grep -q "frontend/"; then
            echo "Frontend changes detected, running frontend tests..."
            cd frontend && npm test
          fi

      - name: Comment PR with test results
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ All PR tests passed! Ready for review.'
            });
