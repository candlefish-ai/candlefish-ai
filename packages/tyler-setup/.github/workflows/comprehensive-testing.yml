name: Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'
  AWS_REGION: 'us-east-1'

jobs:
  # Unit Tests for Lambda Functions
  unit-tests-backend:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: serverless-lean/package-lock.json

    - name: Install backend dependencies
      working-directory: ./serverless-lean
      run: npm ci

    - name: Setup test environment
      run: |
        echo "DYNAMODB_ENDPOINT=http://localhost:8000" >> $GITHUB_ENV
        echo "AWS_ACCESS_KEY_ID=test" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=test" >> $GITHUB_ENV
        echo "AWS_REGION=${{ env.AWS_REGION }}" >> $GITHUB_ENV
        echo "SECRETS_PREFIX=test" >> $GITHUB_ENV

    - name: Run unit tests
      working-directory: ./serverless-lean
      run: npm test

    - name: Generate coverage report
      working-directory: ./serverless-lean
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./serverless-lean/coverage/lcov.info
        flags: backend-unit-tests
        name: backend-coverage

    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-unit-test-results
        path: |
          serverless-lean/coverage/
          serverless-lean/test-results.xml

  # Unit Tests for Frontend Components
  unit-tests-frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run unit tests
      working-directory: ./frontend
      run: npm test

    - name: Generate coverage report
      working-directory: ./frontend
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend-unit-tests
        name: frontend-coverage

    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-unit-test-results
        path: |
          frontend/coverage/
          frontend/test-results/

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [unit-tests-backend]
    if: github.event_name != 'schedule'

    services:
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000

      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: s3,secretsmanager,ses,cloudwatch
          DATA_DIR: /tmp/localstack/data

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test environment
      run: |
        echo "TEST_API_URL=http://localhost:3000" >> $GITHUB_ENV
        echo "AWS_ENDPOINT=http://localhost:4566" >> $GITHUB_ENV
        echo "AWS_ACCESS_KEY_ID=test" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=test" >> $GITHUB_ENV
        echo "AWS_REGION=${{ env.AWS_REGION }}" >> $GITHUB_ENV

    - name: Start local API server
      run: |
        cd serverless-lean
        npm run dev &
        sleep 30 # Wait for server to start

    - name: Run integration tests
      run: npm run test:integration

    - name: Archive integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          __tests__/integration/results/
          integration-test-report.html

  # End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [unit-tests-frontend, integration-tests]
    if: github.event_name != 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Install Playwright browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Start frontend server
      working-directory: ./frontend
      run: |
        npm run preview &
        sleep 10

    - name: Setup test users
      run: |
        echo "TEST_ADMIN_TOKEN=${{ secrets.TEST_ADMIN_TOKEN }}" >> $GITHUB_ENV
        echo "TEST_EMPLOYEE_TOKEN=${{ secrets.TEST_EMPLOYEE_TOKEN }}" >> $GITHUB_ENV
        echo "TEST_API_URL=${{ secrets.TEST_API_URL }}" >> $GITHUB_ENV

    - name: Run E2E tests
      working-directory: ./frontend
      run: npx playwright test

    - name: Archive E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          frontend/playwright-report/
          frontend/test-results/

  # Load Testing
  load-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [integration-tests]
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[load-test]')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install k6
      run: |
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run load tests
      env:
        TEST_BASE_URL: ${{ secrets.TEST_API_URL }}
        FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
      run: k6 run __tests__/performance/load-test.js

    - name: Install Artillery (alternative load tester)
      run: npm install -g artillery@latest

    - name: Run Artillery load tests
      run: artillery run __tests__/performance/artillery-load-test.yml --output load-test-results.json

    - name: Generate load test report
      run: artillery report load-test-results.json --output load-test-report.html

    - name: Archive load test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: load-test-results
        path: |
          load-test-results.json
          load-test-report.html

  # Security Testing
  security-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[security-test]')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install k6
      run: |
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run security tests
      env:
        BASE_URL: ${{ secrets.TEST_API_URL }}
        FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
      run: k6 run __tests__/security/security-tests.js

    - name: Install OWASP ZAP
      run: |
        sudo apt-get update
        sudo apt-get install -y openjdk-11-jdk wget
        wget -q https://github.com/zaproxy/zaproxy/releases/download/v2.14.0/ZAP_2.14.0_Linux.tar.gz
        tar -xzf ZAP_2.14.0_Linux.tar.gz
        chmod +x ZAP_2.14.0/zap.sh

    - name: Run OWASP ZAP baseline scan
      run: |
        ZAP_2.14.0/zap.sh -cmd -quickurl ${{ secrets.FRONTEND_URL }} -quickprogress -quickout zap-baseline-report.html

    - name: Run ZAP API scan
      run: |
        ZAP_2.14.0/zap.sh -cmd -quickurl ${{ secrets.TEST_API_URL }} -quickprogress -quickout zap-api-report.html

    - name: Archive security test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-test-results
        path: |
          zap-baseline-report.html
          zap-api-report.html
          security-test-results.json

  # Dependency Security Audit
  security-audit:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Run npm audit (Backend)
      working-directory: ./serverless-lean
      run: |
        npm audit --audit-level=moderate --production
        npm audit --json > ../backend-audit-results.json || true

    - name: Run npm audit (Frontend)
      working-directory: ./frontend
      run: |
        npm audit --audit-level=moderate --production
        npm audit --json > ../frontend-audit-results.json || true

    - name: Install Snyk
      run: npm install -g snyk

    - name: Run Snyk security scan
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        snyk auth ${{ secrets.SNYK_TOKEN }}
        snyk test --json > snyk-results.json || true
        snyk monitor || true

    - name: Archive security audit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-audit-results
        path: |
          backend-audit-results.json
          frontend-audit-results.json
          snyk-results.json

  # Test Summary and Notifications
  test-summary:
    runs-on: ubuntu-latest
    needs: [unit-tests-backend, unit-tests-frontend, integration-tests, e2e-tests, security-audit]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate test summary
      run: |
        echo "# Test Results Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Status Overview" >> test-summary.md
        echo "" >> test-summary.md
        echo "| Test Suite | Status |" >> test-summary.md
        echo "|------------|--------|" >> test-summary.md
        echo "| Backend Unit Tests | ${{ needs.unit-tests-backend.result }} |" >> test-summary.md
        echo "| Frontend Unit Tests | ${{ needs.unit-tests-frontend.result }} |" >> test-summary.md
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> test-summary.md
        echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> test-summary.md
        echo "| Security Audit | ${{ needs.security-audit.result }} |" >> test-summary.md
        echo "" >> test-summary.md
        echo "## Build Information" >> test-summary.md
        echo "- **Commit:** ${{ github.sha }}" >> test-summary.md
        echo "- **Branch:** ${{ github.ref_name }}" >> test-summary.md
        echo "- **Actor:** ${{ github.actor }}" >> test-summary.md
        echo "- **Workflow:** ${{ github.workflow }}" >> test-summary.md

    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

    - name: Slack Notification on Failure
      if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#tyler-setup-alerts'
        text: 'Tyler Setup testing pipeline failed! Check the details in GitHub Actions.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Teams Notification on Failure
      if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
      uses: skitionek/notify-microsoft-teams@master
      with:
        webhook_url: ${{ secrets.TEAMS_WEBHOOK_URL }}
        title: 'Tyler Setup Testing Pipeline Failed'
        summary: 'The comprehensive testing pipeline has failed. Immediate attention required.'
        theme_color: 'FF0000'
        sections: |
          [
            {
              "activityTitle": "Pipeline Failure Details",
              "facts": [
                {
                  "name": "Repository",
                  "value": "${{ github.repository }}"
                },
                {
                  "name": "Branch",
                  "value": "${{ github.ref_name }}"
                },
                {
                  "name": "Commit",
                  "value": "${{ github.sha }}"
                },
                {
                  "name": "Triggered by",
                  "value": "${{ github.actor }}"
                }
              ]
            }
          ]

    - name: Archive complete test summary
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: complete-test-summary
        path: test-summary.md

  # Performance Monitoring
  performance-monitoring:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Lighthouse CLI
      run: npm install -g lighthouse

    - name: Run Lighthouse audit
      run: |
        lighthouse ${{ secrets.FRONTEND_URL }} --output=json --output-path=lighthouse-results.json --chrome-flags="--headless --no-sandbox"
        lighthouse ${{ secrets.FRONTEND_URL }} --output=html --output-path=lighthouse-report.html --chrome-flags="--headless --no-sandbox"

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          lighthouse-results.json
          lighthouse-report.html

    - name: Comment performance score
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('lighthouse-results.json', 'utf8'));
          const scores = results.lhr.categories;

          const comment = `
          ## 🚀 Performance Audit Results

          | Category | Score |
          |----------|-------|
          | Performance | ${Math.round(scores.performance.score * 100)}/100 |
          | Accessibility | ${Math.round(scores.accessibility.score * 100)}/100 |
          | Best Practices | ${Math.round(scores['best-practices'].score * 100)}/100 |
          | SEO | ${Math.round(scores.seo.score * 100)}/100 |

          View the full report in the artifacts section.
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

# Cleanup old artifacts
  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: [test-summary]

    steps:
    - name: Delete old artifacts
      uses: geekyeggo/delete-artifact@v2
      with:
        name: |
          backend-unit-test-results
          frontend-unit-test-results
          integration-test-results
          e2e-test-results
        failOnError: false
