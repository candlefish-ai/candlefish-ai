{
  "service": {
    "service": "candlefish-employee-setup-lean",
    "serviceObject": {
      "name": "candlefish-employee-setup-lean"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "stage": "prod",
      "region": "us-east-1",
      "memorySize": 1024,
      "timeout": 30,
      "environment": {
        "STAGE": "prod",
        "SECRETS_PREFIX": "candlefish-employee-setup-lean-prod",
        "ENABLE_CONTRACTOR_ACCESS": "true",
        "MAX_TEAM_SIZE": "20"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "secretsmanager:GetSecretValue",
                "secretsmanager:CreateSecret",
                "secretsmanager:UpdateSecret",
                "secretsmanager:RotateSecret",
                "secretsmanager:ListSecrets"
              ],
              "Resource": "arn:aws:secretsmanager:us-east-1:*:secret:candlefish-employee-setup-lean-prod/*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "kms:Decrypt",
                "kms:Encrypt"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudwatch:PutMetricData"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": "arn:aws:dynamodb:us-east-1:*:table/candlefish-employee-setup-lean-prod-*"
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "HealthLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/candlefish-employee-setup-lean-prod-health"
            }
          },
          "AuthLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/candlefish-employee-setup-lean-prod-auth"
            }
          },
          "ManageUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/candlefish-employee-setup-lean-prod-manageUsers"
            }
          },
          "ContractorAccessLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/candlefish-employee-setup-lean-prod-contractorAccess"
            }
          },
          "SecretsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/candlefish-employee-setup-lean-prod-secrets"
            }
          },
          "RotateSecretsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/candlefish-employee-setup-lean-prod-rotateSecrets"
            }
          },
          "ConfigLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/candlefish-employee-setup-lean-prod-config"
            }
          },
          "ClaudeAssistLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/candlefish-employee-setup-lean-prod-claudeAssist"
            }
          },
          "AuditLogLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/candlefish-employee-setup-lean-prod-auditLog"
            }
          },
          "AuthVerifyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/candlefish-employee-setup-lean-prod-authVerify"
            }
          },
          "CleanupContractorsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/candlefish-employee-setup-lean-prod-cleanupContractors"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "candlefish-employee-setup-lean",
                        "prod",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/candlefish-employee-setup-lean-prod*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/candlefish-employee-setup-lean-prod*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][3]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "candlefish-employee-setup-lean",
                    "prod",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "HealthLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/candlefish-employee-setup-lean/prod/1754624443581-2025-08-08T03:40:43.581Z/candlefish-employee-setup-lean.zip"
              },
              "Handler": "src/handlers/health.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "candlefish-employee-setup-lean-prod-health",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "prod",
                  "SECRETS_PREFIX": "candlefish-employee-setup-lean-prod",
                  "ENABLE_CONTRACTOR_ACCESS": "true",
                  "MAX_TEAM_SIZE": "20"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HealthLogGroup"
            ]
          },
          "AuthLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/candlefish-employee-setup-lean/prod/1754624443581-2025-08-08T03:40:43.581Z/candlefish-employee-setup-lean.zip"
              },
              "Handler": "src/handlers/auth.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "candlefish-employee-setup-lean-prod-auth",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "prod",
                  "SECRETS_PREFIX": "candlefish-employee-setup-lean-prod",
                  "ENABLE_CONTRACTOR_ACCESS": "true",
                  "MAX_TEAM_SIZE": "20"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AuthLogGroup"
            ]
          },
          "ManageUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/candlefish-employee-setup-lean/prod/1754624443581-2025-08-08T03:40:43.581Z/candlefish-employee-setup-lean.zip"
              },
              "Handler": "src/handlers/users.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "candlefish-employee-setup-lean-prod-manageUsers",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "prod",
                  "SECRETS_PREFIX": "candlefish-employee-setup-lean-prod",
                  "ENABLE_CONTRACTOR_ACCESS": "true",
                  "MAX_TEAM_SIZE": "20"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ManageUsersLogGroup"
            ]
          },
          "ContractorAccessLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/candlefish-employee-setup-lean/prod/1754624443581-2025-08-08T03:40:43.581Z/candlefish-employee-setup-lean.zip"
              },
              "Handler": "src/handlers/contractors.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "candlefish-employee-setup-lean-prod-contractorAccess",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "prod",
                  "SECRETS_PREFIX": "candlefish-employee-setup-lean-prod",
                  "ENABLE_CONTRACTOR_ACCESS": "true",
                  "MAX_TEAM_SIZE": "20"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ContractorAccessLogGroup"
            ]
          },
          "SecretsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/candlefish-employee-setup-lean/prod/1754624443581-2025-08-08T03:40:43.581Z/candlefish-employee-setup-lean.zip"
              },
              "Handler": "src/handlers/secrets.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "candlefish-employee-setup-lean-prod-secrets",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "prod",
                  "SECRETS_PREFIX": "candlefish-employee-setup-lean-prod",
                  "ENABLE_CONTRACTOR_ACCESS": "true",
                  "MAX_TEAM_SIZE": "20"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "ReservedConcurrentExecutions": 2
            },
            "DependsOn": [
              "SecretsLogGroup"
            ]
          },
          "RotateSecretsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/candlefish-employee-setup-lean/prod/1754624443581-2025-08-08T03:40:43.581Z/candlefish-employee-setup-lean.zip"
              },
              "Handler": "src/handlers/rotation.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "candlefish-employee-setup-lean-prod-rotateSecrets",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "prod",
                  "SECRETS_PREFIX": "candlefish-employee-setup-lean-prod",
                  "ENABLE_CONTRACTOR_ACCESS": "true",
                  "MAX_TEAM_SIZE": "20"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RotateSecretsLogGroup"
            ]
          },
          "ConfigLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/candlefish-employee-setup-lean/prod/1754624443581-2025-08-08T03:40:43.581Z/candlefish-employee-setup-lean.zip"
              },
              "Handler": "src/handlers/config.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "candlefish-employee-setup-lean-prod-config",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "prod",
                  "SECRETS_PREFIX": "candlefish-employee-setup-lean-prod",
                  "ENABLE_CONTRACTOR_ACCESS": "true",
                  "MAX_TEAM_SIZE": "20"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ConfigLogGroup"
            ]
          },
          "ClaudeAssistLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/candlefish-employee-setup-lean/prod/1754624443581-2025-08-08T03:40:43.581Z/candlefish-employee-setup-lean.zip"
              },
              "Handler": "src/handlers/claude.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "candlefish-employee-setup-lean-prod-claudeAssist",
              "MemorySize": 1024,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "STAGE": "prod",
                  "SECRETS_PREFIX": "candlefish-employee-setup-lean-prod",
                  "ENABLE_CONTRACTOR_ACCESS": "true",
                  "MAX_TEAM_SIZE": "20"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ClaudeAssistLogGroup"
            ]
          },
          "AuditLogLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/candlefish-employee-setup-lean/prod/1754624443581-2025-08-08T03:40:43.581Z/candlefish-employee-setup-lean.zip"
              },
              "Handler": "src/handlers/audit.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "candlefish-employee-setup-lean-prod-auditLog",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "prod",
                  "SECRETS_PREFIX": "candlefish-employee-setup-lean-prod",
                  "ENABLE_CONTRACTOR_ACCESS": "true",
                  "MAX_TEAM_SIZE": "20"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AuditLogLogGroup"
            ]
          },
          "AuthVerifyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/candlefish-employee-setup-lean/prod/1754624443581-2025-08-08T03:40:43.581Z/candlefish-employee-setup-lean.zip"
              },
              "Handler": "src/handlers/authorizer.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "candlefish-employee-setup-lean-prod-authVerify",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "prod",
                  "SECRETS_PREFIX": "candlefish-employee-setup-lean-prod",
                  "ENABLE_CONTRACTOR_ACCESS": "true",
                  "MAX_TEAM_SIZE": "20"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AuthVerifyLogGroup"
            ]
          },
          "CleanupContractorsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/candlefish-employee-setup-lean/prod/1754624443581-2025-08-08T03:40:43.581Z/candlefish-employee-setup-lean.zip"
              },
              "Handler": "src/handlers/cleanup.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "candlefish-employee-setup-lean-prod-cleanupContractors",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "prod",
                  "SECRETS_PREFIX": "candlefish-employee-setup-lean-prod",
                  "ENABLE_CONTRACTOR_ACCESS": "true",
                  "MAX_TEAM_SIZE": "20"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CleanupContractorsLogGroup"
            ]
          },
          "HealthLambdaVersionZ7J45p2JqFjIegb8imNbK6UfFZelBRXDOtOGrbzUQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HealthLambdaFunction"
              },
              "CodeSha256": "m55vQRoeavRWLdJwOCyYn4bU4X+G9BiBf406mH8b3aU="
            }
          },
          "AuthLambdaVersionHk4VkIIqTEnrtu4OKZvDJcA2PsaCRMhlCKtaafWyI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AuthLambdaFunction"
              },
              "CodeSha256": "m55vQRoeavRWLdJwOCyYn4bU4X+G9BiBf406mH8b3aU="
            }
          },
          "ManageUsersLambdaVersionNLBzuoD7vyv1Bdg8dYTZIkoaiv2whtJE6uGgqMYzY6E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ManageUsersLambdaFunction"
              },
              "CodeSha256": "m55vQRoeavRWLdJwOCyYn4bU4X+G9BiBf406mH8b3aU="
            }
          },
          "ContractorAccessLambdaVersionlv1LL7xBOaH9BEff6g9zuzs7Zw5PxwDxCBLCeWb6PMI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ContractorAccessLambdaFunction"
              },
              "CodeSha256": "m55vQRoeavRWLdJwOCyYn4bU4X+G9BiBf406mH8b3aU="
            }
          },
          "SecretsLambdaVersionTgLVMnHrgQHKFxGTf22sap5KeZdIwTsxWBmAgnkw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SecretsLambdaFunction"
              },
              "CodeSha256": "m55vQRoeavRWLdJwOCyYn4bU4X+G9BiBf406mH8b3aU="
            }
          },
          "RotateSecretsLambdaVersionBxZ1iwF65gjeFy26NXxFzdirIC9c3ul122vLdVI9Es": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RotateSecretsLambdaFunction"
              },
              "CodeSha256": "m55vQRoeavRWLdJwOCyYn4bU4X+G9BiBf406mH8b3aU="
            }
          },
          "ConfigLambdaVersionjPeahiX225bYgkwnX3G86lW2XMr7WkCJ9yhrtHcai0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ConfigLambdaFunction"
              },
              "CodeSha256": "m55vQRoeavRWLdJwOCyYn4bU4X+G9BiBf406mH8b3aU="
            }
          },
          "ClaudeAssistLambdaVersionzl0n9FKGcLCxmCtvNG7X4Ci3KrVOP9DEaNVUuGM4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ClaudeAssistLambdaFunction"
              },
              "CodeSha256": "m55vQRoeavRWLdJwOCyYn4bU4X+G9BiBf406mH8b3aU="
            }
          },
          "AuditLogLambdaVersionXCBljC0beFgDm6wnYHOzWgafSGTrsQXntHHnED7lhFg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AuditLogLambdaFunction"
              },
              "CodeSha256": "m55vQRoeavRWLdJwOCyYn4bU4X+G9BiBf406mH8b3aU="
            }
          },
          "AuthVerifyLambdaVersionFn0w82vMcyz5PtTFkp2OF2mhUtUzJIq5STlFiHy7I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AuthVerifyLambdaFunction"
              },
              "CodeSha256": "m55vQRoeavRWLdJwOCyYn4bU4X+G9BiBf406mH8b3aU="
            }
          },
          "CleanupContractorsLambdaVersion6iL8YGwd5xP4V6uAgGC5yk7E2UFgRpIL6FfZH2PYM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CleanupContractorsLambdaFunction"
              },
              "CodeSha256": "m55vQRoeavRWLdJwOCyYn4bU4X+G9BiBf406mH8b3aU="
            }
          },
          "RotateSecretsEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(30 days)",
              "State": "ENABLED",
              "Description": "Rotate secrets monthly",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "RotateSecretsLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "rotateSecretsSchedule"
                }
              ]
            }
          },
          "RotateSecretsLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RotateSecretsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "RotateSecretsEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "CleanupContractorsEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(1 day)",
              "State": "ENABLED",
              "Description": "Clean up expired contractor access",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "CleanupContractorsLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "cleanupContractorsSchedule"
                }
              ]
            }
          },
          "CleanupContractorsLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CleanupContractorsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "CleanupContractorsEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "prod-candlefish-employee-setup-lean",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceHealth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "health",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "auth",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthRefresh": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "refresh",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthLogout": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "logout",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsersIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContractors": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "contractors",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContractorsInvite": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceContractors"
              },
              "PathPart": "invite",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContractorsAccess": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceContractors"
              },
              "PathPart": "access",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContractorsAccessTokenVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceContractorsAccess"
              },
              "PathPart": "{token}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContractorsRevoke": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceContractors"
              },
              "PathPart": "revoke",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContractorsRevokeIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceContractorsRevoke"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSecrets": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "secrets",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSecretsNameVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSecrets"
              },
              "PathPart": "{name}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceConfig": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "config",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAssist": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "assist",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAssistOnboarding": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAssist"
              },
              "PathPart": "onboarding",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAssistSetup": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAssist"
              },
              "PathPart": "setup",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAudit": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "audit",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHealthOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceHealth"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthLoginOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthRefreshOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthRefresh"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthLogoutOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthLogout"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsersIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodContractorsInviteOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceContractorsInvite"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodContractorsAccessTokenVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceContractorsAccessTokenVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodContractorsRevokeIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceContractorsRevokeIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSecretsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSecrets"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSecretsNameVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSecretsNameVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodConfigOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceConfig"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAssistOnboardingOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAssistOnboarding"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAssistSetupOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAssistSetup"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuditOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAudit"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHealthGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHealth"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HealthLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HealthLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AuthLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthRefreshPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthRefresh"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AuthLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAuthLogoutPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthLogout"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AuthLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthVerifyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ManageUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthVerifyApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodUsersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthVerifyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ManageUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthVerifyApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodUsersIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthVerifyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ManageUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthVerifyApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodUsersIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthVerifyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ManageUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthVerifyApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodUsersIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthVerifyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ManageUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthVerifyApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodContractorsInvitePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceContractorsInvite"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthVerifyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ContractorAccessLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthVerifyApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodContractorsAccessTokenVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceContractorsAccessTokenVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ContractorAccessLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ContractorAccessLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodContractorsRevokeIdVarPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceContractorsRevokeIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthVerifyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ContractorAccessLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthVerifyApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodSecretsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSecrets"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthVerifyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SecretsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthVerifyApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodSecretsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSecrets"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthVerifyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SecretsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthVerifyApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodSecretsNameVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSecretsNameVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthVerifyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SecretsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthVerifyApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodSecretsNameVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSecretsNameVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthVerifyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SecretsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthVerifyApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodSecretsNameVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSecretsNameVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthVerifyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SecretsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthVerifyApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodConfigGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceConfig"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthVerifyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ConfigLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthVerifyApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodConfigPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceConfig"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthVerifyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ConfigLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthVerifyApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAssistOnboardingPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAssistOnboarding"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthVerifyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ClaudeAssistLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthVerifyApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAssistSetupPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAssistSetup"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthVerifyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ClaudeAssistLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthVerifyApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAuditGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAudit"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthVerifyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AuditLogLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthVerifyApiGatewayAuthorizer"
            ]
          },
          "AuthVerifyApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "IdentitySource": "method.request.header.Authorization",
              "Name": "authVerify",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "AuthVerifyLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "Type": "TOKEN"
            }
          },
          "ApiGatewayDeployment1754624438093": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "prod"
            },
            "DependsOn": [
              "ApiGatewayMethodHealthOptions",
              "ApiGatewayMethodAuthLoginOptions",
              "ApiGatewayMethodAuthRefreshOptions",
              "ApiGatewayMethodAuthLogoutOptions",
              "ApiGatewayMethodUsersOptions",
              "ApiGatewayMethodUsersIdVarOptions",
              "ApiGatewayMethodContractorsInviteOptions",
              "ApiGatewayMethodContractorsAccessTokenVarOptions",
              "ApiGatewayMethodContractorsRevokeIdVarOptions",
              "ApiGatewayMethodSecretsOptions",
              "ApiGatewayMethodSecretsNameVarOptions",
              "ApiGatewayMethodConfigOptions",
              "ApiGatewayMethodAssistOnboardingOptions",
              "ApiGatewayMethodAssistSetupOptions",
              "ApiGatewayMethodAuditOptions",
              "ApiGatewayMethodHealthGet",
              "ApiGatewayMethodAuthLoginPost",
              "ApiGatewayMethodAuthRefreshPost",
              "ApiGatewayMethodAuthLogoutPost",
              "ApiGatewayMethodUsersGet",
              "ApiGatewayMethodUsersPost",
              "ApiGatewayMethodUsersIdVarGet",
              "ApiGatewayMethodUsersIdVarPut",
              "ApiGatewayMethodUsersIdVarDelete",
              "ApiGatewayMethodContractorsInvitePost",
              "ApiGatewayMethodContractorsAccessTokenVarGet",
              "ApiGatewayMethodContractorsRevokeIdVarPost",
              "ApiGatewayMethodSecretsGet",
              "ApiGatewayMethodSecretsPost",
              "ApiGatewayMethodSecretsNameVarGet",
              "ApiGatewayMethodSecretsNameVarPut",
              "ApiGatewayMethodSecretsNameVarDelete",
              "ApiGatewayMethodConfigGet",
              "ApiGatewayMethodConfigPut",
              "ApiGatewayMethodAssistOnboardingPost",
              "ApiGatewayMethodAssistSetupPost",
              "ApiGatewayMethodAuditGet"
            ]
          },
          "HealthLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HealthLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuthLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ManageUsersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ManageUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuthVerifyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthVerifyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ContractorAccessLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ContractorAccessLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SecretsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SecretsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ConfigLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ConfigLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ClaudeAssistLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ClaudeAssistLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuditLogLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuditLogLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "candlefish-employee-setup-lean-prod-users",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "email-index",
                  "KeySchema": [
                    {
                      "AttributeName": "email",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "StreamSpecification": {
                "StreamViewType": "NEW_AND_OLD_IMAGES"
              },
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              },
              "SSESpecification": {
                "SSEEnabled": true
              }
            }
          },
          "ContractorsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "candlefish-employee-setup-lean-prod-contractors",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "token",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "expiresAt",
                  "AttributeType": "N"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "token-index",
                  "KeySchema": [
                    {
                      "AttributeName": "token",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "expiry-index",
                  "KeySchema": [
                    {
                      "AttributeName": "expiresAt",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "KEYS_ONLY"
                  }
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              }
            }
          },
          "RefreshTokensTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "candlefish-employee-setup-lean-prod-refresh-tokens",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "token",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "expiresAt",
                  "AttributeType": "N"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "token",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "userId-index",
                  "KeySchema": [
                    {
                      "AttributeName": "userId",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "expiresAt",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "TimeToLiveSpecification": {
                "AttributeName": "ttl",
                "Enabled": true
              },
              "SSESpecification": {
                "SSEEnabled": true
              }
            }
          },
          "AuditTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "candlefish-employee-setup-lean-prod-audit",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "timestamp",
                  "AttributeType": "N"
                },
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "timestamp-index",
                  "KeySchema": [
                    {
                      "AttributeName": "timestamp",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "user-index",
                  "KeySchema": [
                    {
                      "AttributeName": "userId",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "timestamp",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "ConfigTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "candlefish-employee-setup-lean-prod-config",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "key",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "key",
                  "KeyType": "HASH"
                }
              ],
              "SSESpecification": {
                "SSEEnabled": true
              }
            }
          },
          "WebsiteBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "candlefish-employee-setup-lean-prod-web",
              "WebsiteConfiguration": {
                "IndexDocument": "index.html",
                "ErrorDocument": "error.html"
              },
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": true,
                "BlockPublicPolicy": false,
                "IgnorePublicAcls": true,
                "RestrictPublicBuckets": false
              },
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedOrigins": [
                      "*"
                    ],
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET",
                      "HEAD"
                    ],
                    "MaxAge": 3000
                  }
                ]
              }
            }
          },
          "WebsiteBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "WebsiteBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Sid": "PublicReadGetObject",
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": [
                      "s3:GetObject"
                    ],
                    "Resource": {
                      "Fn::Sub": "${WebsiteBucket.Arn}/*"
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-candlefish-employee-setup-lean-prod-ServerlessDeploymentBucketName"
            }
          },
          "HealthLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HealthLambdaVersionZ7J45p2JqFjIegb8imNbK6UfFZelBRXDOtOGrbzUQ"
            },
            "Export": {
              "Name": "sls-candlefish-employee-setup-lean-prod-HealthLambdaFunctionQualifiedArn"
            }
          },
          "AuthLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AuthLambdaVersionHk4VkIIqTEnrtu4OKZvDJcA2PsaCRMhlCKtaafWyI"
            },
            "Export": {
              "Name": "sls-candlefish-employee-setup-lean-prod-AuthLambdaFunctionQualifiedArn"
            }
          },
          "ManageUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ManageUsersLambdaVersionNLBzuoD7vyv1Bdg8dYTZIkoaiv2whtJE6uGgqMYzY6E"
            },
            "Export": {
              "Name": "sls-candlefish-employee-setup-lean-prod-ManageUsersLambdaFunctionQualifiedArn"
            }
          },
          "ContractorAccessLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ContractorAccessLambdaVersionlv1LL7xBOaH9BEff6g9zuzs7Zw5PxwDxCBLCeWb6PMI"
            },
            "Export": {
              "Name": "sls-candlefish-employee-setup-lean-prod-ContractorAccessLambdaFunctionQualifiedArn"
            }
          },
          "SecretsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SecretsLambdaVersionTgLVMnHrgQHKFxGTf22sap5KeZdIwTsxWBmAgnkw"
            },
            "Export": {
              "Name": "sls-candlefish-employee-setup-lean-prod-SecretsLambdaFunctionQualifiedArn"
            }
          },
          "RotateSecretsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RotateSecretsLambdaVersionBxZ1iwF65gjeFy26NXxFzdirIC9c3ul122vLdVI9Es"
            },
            "Export": {
              "Name": "sls-candlefish-employee-setup-lean-prod-RotateSecretsLambdaFunctionQualifiedArn"
            }
          },
          "ConfigLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ConfigLambdaVersionjPeahiX225bYgkwnX3G86lW2XMr7WkCJ9yhrtHcai0"
            },
            "Export": {
              "Name": "sls-candlefish-employee-setup-lean-prod-ConfigLambdaFunctionQualifiedArn"
            }
          },
          "ClaudeAssistLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ClaudeAssistLambdaVersionzl0n9FKGcLCxmCtvNG7X4Ci3KrVOP9DEaNVUuGM4"
            },
            "Export": {
              "Name": "sls-candlefish-employee-setup-lean-prod-ClaudeAssistLambdaFunctionQualifiedArn"
            }
          },
          "AuditLogLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AuditLogLambdaVersionXCBljC0beFgDm6wnYHOzWgafSGTrsQXntHHnED7lhFg"
            },
            "Export": {
              "Name": "sls-candlefish-employee-setup-lean-prod-AuditLogLambdaFunctionQualifiedArn"
            }
          },
          "AuthVerifyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AuthVerifyLambdaVersionFn0w82vMcyz5PtTFkp2OF2mhUtUzJIq5STlFiHy7I"
            },
            "Export": {
              "Name": "sls-candlefish-employee-setup-lean-prod-AuthVerifyLambdaFunctionQualifiedArn"
            }
          },
          "CleanupContractorsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CleanupContractorsLambdaVersion6iL8YGwd5xP4V6uAgGC5yk7E2UFgRpIL6FfZH2PYM"
            },
            "Export": {
              "Name": "sls-candlefish-employee-setup-lean-prod-CleanupContractorsLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/prod"
                ]
              ]
            },
            "Export": {
              "Name": "sls-candlefish-employee-setup-lean-prod-ServiceEndpoint"
            }
          },
          "ApiEndpoint": {
            "Description": "API Gateway endpoint URL",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  "us-east-1",
                  ".amazonaws.com/",
                  "prod"
                ]
              ]
            },
            "Export": {
              "Name": "candlefish-employee-setup-lean-prod-api-endpoint"
            }
          },
          "WebsiteURL": {
            "Description": "S3 Website URL",
            "Value": {
              "Fn::GetAtt": [
                "WebsiteBucket",
                "WebsiteURL"
              ]
            },
            "Export": {
              "Name": "candlefish-employee-setup-lean-prod-website-url"
            }
          },
          "S3BucketName": {
            "Description": "S3 bucket for static website",
            "Value": {
              "Ref": "WebsiteBucket"
            },
            "Export": {
              "Name": "candlefish-employee-setup-lean-prod-bucket"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "webpack": {
        "webpackConfig": "webpack.config.cjs",
        "includeModules": true,
        "packager": "npm",
        "excludeFiles": "**/*.test.js"
      },
      "serverless-offline": {
        "httpPort": 3000,
        "lambdaPort": 3001
      },
      "dynamodb": {
        "stages": [
          "dev"
        ],
        "start": {
          "port": 8000,
          "inMemory": true,
          "migrate": true
        }
      }
    },
    "plugins": [
      "serverless-webpack",
      "serverless-offline",
      "serverless-dynamodb-local"
    ],
    "pluginsData": {},
    "functions": {
      "health": {
        "handler": "src/handlers/health.handler",
        "events": [
          {
            "http": {
              "path": "health",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "candlefish-employee-setup-lean-prod-health",
        "package": {
          "artifact": ".serverless/candlefish-employee-setup-lean.zip"
        },
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "HealthLambdaVersionZ7J45p2JqFjIegb8imNbK6UfFZelBRXDOtOGrbzUQ"
      },
      "auth": {
        "handler": "src/handlers/auth.handler",
        "events": [
          {
            "http": {
              "path": "auth/login",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "auth/refresh",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "auth/logout",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "candlefish-employee-setup-lean-prod-auth",
        "package": {
          "artifact": ".serverless/candlefish-employee-setup-lean.zip"
        },
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AuthLambdaVersionHk4VkIIqTEnrtu4OKZvDJcA2PsaCRMhlCKtaafWyI"
      },
      "manageUsers": {
        "handler": "src/handlers/users.handler",
        "events": [
          {
            "http": {
              "path": "users",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "authVerify",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthVerifyLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "users",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "authVerify",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthVerifyLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "users/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "authVerify",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthVerifyLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "users/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "authVerify",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthVerifyLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "users/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "authVerify",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthVerifyLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "candlefish-employee-setup-lean-prod-manageUsers",
        "package": {
          "artifact": ".serverless/candlefish-employee-setup-lean.zip"
        },
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ManageUsersLambdaVersionNLBzuoD7vyv1Bdg8dYTZIkoaiv2whtJE6uGgqMYzY6E"
      },
      "contractorAccess": {
        "handler": "src/handlers/contractors.handler",
        "events": [
          {
            "http": {
              "path": "contractors/invite",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "authVerify",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthVerifyLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "contractors/access/{token}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "contractors/revoke/{id}",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "authVerify",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthVerifyLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "candlefish-employee-setup-lean-prod-contractorAccess",
        "package": {
          "artifact": ".serverless/candlefish-employee-setup-lean.zip"
        },
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ContractorAccessLambdaVersionlv1LL7xBOaH9BEff6g9zuzs7Zw5PxwDxCBLCeWb6PMI"
      },
      "secrets": {
        "handler": "src/handlers/secrets.handler",
        "reservedConcurrency": 2,
        "events": [
          {
            "http": {
              "path": "secrets",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "authVerify",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthVerifyLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "secrets",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "authVerify",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthVerifyLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "secrets/{name}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "authVerify",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthVerifyLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "secrets/{name}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "authVerify",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthVerifyLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "secrets/{name}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "authVerify",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthVerifyLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "candlefish-employee-setup-lean-prod-secrets",
        "package": {
          "artifact": ".serverless/candlefish-employee-setup-lean.zip"
        },
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SecretsLambdaVersionTgLVMnHrgQHKFxGTf22sap5KeZdIwTsxWBmAgnkw"
      },
      "rotateSecrets": {
        "handler": "src/handlers/rotation.handler",
        "events": [
          {
            "schedule": {
              "rate": [
                "rate(30 days)"
              ],
              "description": "Rotate secrets monthly"
            }
          }
        ],
        "name": "candlefish-employee-setup-lean-prod-rotateSecrets",
        "package": {
          "artifact": ".serverless/candlefish-employee-setup-lean.zip"
        },
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "RotateSecretsLambdaVersionBxZ1iwF65gjeFy26NXxFzdirIC9c3ul122vLdVI9Es"
      },
      "config": {
        "handler": "src/handlers/config.handler",
        "events": [
          {
            "http": {
              "path": "config",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "authVerify",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthVerifyLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "config",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "authVerify",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthVerifyLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "candlefish-employee-setup-lean-prod-config",
        "package": {
          "artifact": ".serverless/candlefish-employee-setup-lean.zip"
        },
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ConfigLambdaVersionjPeahiX225bYgkwnX3G86lW2XMr7WkCJ9yhrtHcai0"
      },
      "claudeAssist": {
        "handler": "src/handlers/claude.handler",
        "timeout": 60,
        "events": [
          {
            "http": {
              "path": "assist/onboarding",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "authVerify",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthVerifyLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "assist/setup",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "authVerify",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthVerifyLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "candlefish-employee-setup-lean-prod-claudeAssist",
        "package": {
          "artifact": ".serverless/candlefish-employee-setup-lean.zip"
        },
        "memory": 1024,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ClaudeAssistLambdaVersionzl0n9FKGcLCxmCtvNG7X4Ci3KrVOP9DEaNVUuGM4"
      },
      "auditLog": {
        "handler": "src/handlers/audit.handler",
        "events": [
          {
            "http": {
              "path": "audit",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "authVerify",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"AuthVerifyLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "candlefish-employee-setup-lean-prod-auditLog",
        "package": {
          "artifact": ".serverless/candlefish-employee-setup-lean.zip"
        },
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AuditLogLambdaVersionXCBljC0beFgDm6wnYHOzWgafSGTrsQXntHHnED7lhFg"
      },
      "authVerify": {
        "handler": "src/handlers/authorizer.handler",
        "events": [],
        "name": "candlefish-employee-setup-lean-prod-authVerify",
        "package": {
          "artifact": ".serverless/candlefish-employee-setup-lean.zip"
        },
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AuthVerifyLambdaVersionFn0w82vMcyz5PtTFkp2OF2mhUtUzJIq5STlFiHy7I"
      },
      "cleanupContractors": {
        "handler": "src/handlers/cleanup.handler",
        "events": [
          {
            "schedule": {
              "rate": [
                "rate(1 day)"
              ],
              "description": "Clean up expired contractor access"
            }
          }
        ],
        "name": "candlefish-employee-setup-lean-prod-cleanupContractors",
        "package": {
          "artifact": ".serverless/candlefish-employee-setup-lean.zip"
        },
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CleanupContractorsLambdaVersion6iL8YGwd5xP4V6uAgGC5yk7E2UFgRpIL6FfZH2PYM"
      }
    },
    "resources": {
      "Resources": {
        "UsersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "candlefish-employee-setup-lean-prod-users",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "email",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "email-index",
                "KeySchema": [
                  {
                    "AttributeName": "email",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "StreamSpecification": {
              "StreamViewType": "NEW_AND_OLD_IMAGES"
            },
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            },
            "SSESpecification": {
              "SSEEnabled": true
            }
          }
        },
        "ContractorsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "candlefish-employee-setup-lean-prod-contractors",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "token",
                "AttributeType": "S"
              },
              {
                "AttributeName": "expiresAt",
                "AttributeType": "N"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "token-index",
                "KeySchema": [
                  {
                    "AttributeName": "token",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "expiry-index",
                "KeySchema": [
                  {
                    "AttributeName": "expiresAt",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "KEYS_ONLY"
                }
              }
            ],
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            }
          }
        },
        "RefreshTokensTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "candlefish-employee-setup-lean-prod-refresh-tokens",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "token",
                "AttributeType": "S"
              },
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "expiresAt",
                "AttributeType": "N"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "token",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "userId-index",
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "expiresAt",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "TimeToLiveSpecification": {
              "AttributeName": "ttl",
              "Enabled": true
            },
            "SSESpecification": {
              "SSEEnabled": true
            }
          }
        },
        "AuditTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "candlefish-employee-setup-lean-prod-audit",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "timestamp",
                "AttributeType": "N"
              },
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "timestamp-index",
                "KeySchema": [
                  {
                    "AttributeName": "timestamp",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "user-index",
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "timestamp",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "ConfigTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "candlefish-employee-setup-lean-prod-config",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "key",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "key",
                "KeyType": "HASH"
              }
            ],
            "SSESpecification": {
              "SSEEnabled": true
            }
          }
        },
        "WebsiteBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "candlefish-employee-setup-lean-prod-web",
            "WebsiteConfiguration": {
              "IndexDocument": "index.html",
              "ErrorDocument": "error.html"
            },
            "PublicAccessBlockConfiguration": {
              "BlockPublicAcls": true,
              "BlockPublicPolicy": false,
              "IgnorePublicAcls": true,
              "RestrictPublicBuckets": false
            },
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedOrigins": [
                    "*"
                  ],
                  "AllowedHeaders": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "GET",
                    "HEAD"
                  ],
                  "MaxAge": 3000
                }
              ]
            }
          }
        },
        "WebsiteBucketPolicy": {
          "Type": "AWS::S3::BucketPolicy",
          "Properties": {
            "Bucket": {
              "Ref": "WebsiteBucket"
            },
            "PolicyDocument": {
              "Statement": [
                {
                  "Sid": "PublicReadGetObject",
                  "Effect": "Allow",
                  "Principal": "*",
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Resource": {
                    "Fn::Sub": "${WebsiteBucket.Arn}/*"
                  }
                }
              ]
            }
          }
        }
      },
      "Outputs": {
        "ApiEndpoint": {
          "Description": "API Gateway endpoint URL",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                "us-east-1",
                ".amazonaws.com/",
                "prod"
              ]
            ]
          },
          "Export": {
            "Name": "candlefish-employee-setup-lean-prod-api-endpoint"
          }
        },
        "WebsiteURL": {
          "Description": "S3 Website URL",
          "Value": {
            "Fn::GetAtt": [
              "WebsiteBucket",
              "WebsiteURL"
            ]
          },
          "Export": {
            "Name": "candlefish-employee-setup-lean-prod-website-url"
          }
        },
        "S3BucketName": {
          "Description": "S3 bucket for static website",
          "Value": {
            "Ref": "WebsiteBucket"
          },
          "Export": {
            "Name": "candlefish-employee-setup-lean-prod-bucket"
          }
        }
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "candlefish-employee-setup-lean",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/candlefish-employee-setup-lean/prod/1754624443581-2025-08-08T03:40:43.581Z",
    "artifact": ""
  }
}
