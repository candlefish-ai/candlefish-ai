{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(cursor:*)",
      "Bash(mkdir:*)",
      "Bash(uv init:*)",
      "Bash(uv add:*)",
      "Bash(python:*)",
      "Bash(uv run:*)",
      "Bash(mv:*)",
      "Bash(true)",
      "Bash(uv lock:*)",
      "Bash(mkdir:*)",
      "Bash(infisical login:*)",
      "Bash(aws:*)",
      "Bash(ls:*)",
      "Bash(pip3 install:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(PYTHONPATH=/Users/patricksmith/candlefish-ai/projects/fogg/calendar python -m pytest tests/ --cov=src --cov-report=term-missing --cov-report=html -v)",
      "Bash(docker build:*)",
      "Bash(PYTHONPATH=/Users/patricksmith/candlefish-ai/projects/fogg/calendar python -m pytest tests/ --cov=src --cov-report=term-missing -v -x)",
      "Bash(PYTHONPATH=/Users/patricksmith/candlefish-ai/projects/fogg/calendar python -m pytest tests/test_api_client.py::test_execute_google_api_call_non_retryable -v)",
      "Bash(PYTHONPATH=/Users/patricksmith/candlefish-ai/projects/fogg/calendar python -m pytest tests/ --cov=src --cov-report=term-missing --tb=short)",
      "Bash(PYTHONPATH=/Users/patricksmith/candlefish-ai/projects/fogg/calendar python -m pytest tests/ --cov=src --cov-report=term-missing --cov-report=html -q)",
      "Bash(PYTHONPATH=/Users/patricksmith/candlefish-ai/projects/fogg/calendar python -m pytest tests/test_models.py tests/test_logging.py tests/test_metrics.py tests/test_mcp_server.py tests/test_calendar_manager_idempotent.py -v)",
      "Bash(PYTHONPATH=/Users/patricksmith/candlefish-ai/projects/fogg/calendar python -m pytest tests/ --cov=src --cov-report=term:skip-covered --cov-report=html -q --tb=short)",
      "Bash(PYTHONPATH=/Users/patricksmith/candlefish-ai/projects/fogg/calendar python -m pytest tests/ --cov=src --cov-report=term-missing --tb=no -q)",
      "Bash(for server in postgres github aws context7 huggingface anthropic openai)",
      "Bash(do npx @modelcontextprotocol/server-$server --version)",
      "Bash(echo:*)",
      "Bash(done)",
      "Bash(infisical run:*)",
      "Bash(gh pr create:*)",
      "Bash(npm audit:*)",
      "Bash(find:*)",
      "Bash(gh auth:*)",
      "Bash(unset GITHUB_TOKEN)",
      "Bash(grep:*)",
      "Bash(find:*)",
      "Bash(gh gist create:*)",
      "Bash(terraform init:*)",
      "Bash(brew install:*)",
      "Bash(bfg:*)",
      "Bash(terraform plan:*)",
      "Bash(cp:*)",
      "Bash(true)",
      "Bash(gh pr merge:*)",
      "Bash(gh pr view:*)",
      "Bash(env)",
      "Bash(ls:*)",
      "Bash(unset AI_GITHUB_TOKEN)",
      "Bash(export GH_TOKEN=\"\")",
      "Bash(open:*)",
      "Bash(cat:*)",
      "Bash(zsh:*)",
      "Bash(claude /doctor)",
      "Bash(~/.claude/local/node_modules/.bin/claude:*)",
      "Bash(unset:*)",
      "Bash(grep:*)",
      "Bash(osascript:*)",
      "Bash(/bin/zsh:*)",
      "Bash(infisical secrets set:*)",
      "Bash(chmod:*)",
      "Bash(./test-claude-config.sh:*)",
      "Bash(rm:*)",
      "Bash(sed:*)",
      "Bash(python3:*)",
      "Bash(pip install:*)",
      "Bash(python3 evaluate_with_kimi_k2.py)",
      "Bash(python3 evaluate_kimi_quick.py)",
      "Bash(./scripts/credentials/validate-security.sh:*)",
      "Bash(pre-commit:*)",
      "Bash(./scripts/credentials/install.sh:*)",
      "Bash(npm run lint:*)",
      "Bash(npm install:*)",
      "Bash(npm run:*)",
      "Bash(chmod:*)",
      "Bash(npm install:*)",
      "Bash(npm run build:*)",
      "Bash(bash:*)",
      "Bash(pkill:*)",
      "Bash(npx:*)",
      "Bash(npm search:*)",
      "Bash(test:*)",
      "Bash(./scripts/credentials/test_fireworks_kimi.py:*)",
      "Bash(detect-secrets scan:*)",
      "Bash(./verify-kimi-implementations.sh:*)",
      "Bash(pip3 install:*)",
      "Bash(pipx install:*)",
      "Bash(npm run lint)",
      "Bash(npx tsc:*)",
      "Bash(npx tsc:*)",
      "Bash(npm run build:*)",
      "Bash(npm run benchmark:*)",
      "Bash(touch:*)",
      "Bash(pip3 show:*)",
      "Bash(bash:*)",
      "Bash(npm audit:*)",
      "Bash(curl:*)",
      "Bash(npm test:*)",
      "Bash(npm run lint:*)",
      "Bash(npx ts-unused-exports:*)",
      "Bash(npm test)",
      "Bash(./scripts/setup-monitoring.sh:*)",
      "Bash(node:*)",
      "Bash(npm:*)",
      "Bash(touch:*)",
      "Bash(node:*)",
      "Bash(npm:*)",
      "Bash(pnpm:*)",
      "Bash(npm test:*)",
      "Bash(pkill:*)",
      "Bash(source:*)",
      "Bash(npx tsc:*)",
      "Bash(node:*)",
      "Bash(npm:*)",
      "Bash(tree:*)",
      "Bash(npx prisma generate:*)",
      "Bash(psql:*)",
      "Bash(pg_isready:*)",
      "Bash(npx prisma:*)",
      "Bash(export DATABASE_URL=\"postgresql://patricksmith@localhost:5432/candlefish\")",
      "Bash(touch:*)",
      "Bash(npx prisma:*)",
      "Bash(mv:*)",
      "Bash(kill:*)",
      "Bash(pnpm add:*)",
      "Bash(vercel:*)",
      "mcp__memory__search_nodes",
      "Bash(curl:*)",
      "Bash(./setup-vercel-aws.sh)",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(pnpm tsx:*)",
      "mcp__memory__read_graph",
      "Bash(# AWS Integration files\ncp /Users/patricksmith/candlefish-ai/lib/aws-secrets.ts /tmp/candlefish-audit/lib/ 2>/dev/null || echo \"\"lib/aws-secrets.ts not found\"\"\ncp /Users/patricksmith/candlefish-ai/lib/anthropic-config.ts /tmp/candlefish-audit/lib/ 2>/dev/null || echo \"\"lib/anthropic-config.ts not found\"\"\ncp /Users/patricksmith/candlefish-ai/instrumentation.ts /tmp/candlefish-audit/ 2>/dev/null || echo \"\"instrumentation.ts not found\"\"\ncp /Users/patricksmith/candlefish-ai/infra/vercel-iam-policy.json /tmp/candlefish-audit/infra/ 2>/dev/null || echo \"\"infra/vercel-iam-policy.json not found\"\"\ncp /Users/patricksmith/candlefish-ai/infra/setup-vercel-aws.sh /tmp/candlefish-audit/infra/ 2>/dev/null || echo \"\"infra/setup-vercel-aws.sh not found\"\")",
      "Bash(# Service files\ncp /Users/patricksmith/candlefish-ai/services/ai/unifiedAIService.ts /tmp/candlefish-audit/services/ai/ 2>/dev/null || echo \"\"services/ai/unifiedAIService.ts not found\"\"\ncp /Users/patricksmith/candlefish-ai/services/ai/claudeService.ts /tmp/candlefish-audit/services/ai/ 2>/dev/null || echo \"\"services/ai/claudeService.ts not found\"\"\ncp /Users/patricksmith/candlefish-ai/services/ai/fireworksService.ts /tmp/candlefish-audit/services/ai/ 2>/dev/null || echo \"\"services/ai/fireworksService.ts not found\"\")",
      "Bash(# API endpoints\ncp /Users/patricksmith/candlefish-ai/app/api/v2/generate/route.ts /tmp/candlefish-audit/app/api/v2/generate/ 2>/dev/null || echo \"\"app/api/v2/generate/route.ts not found\"\"\ncp /Users/patricksmith/candlefish-ai/app/api/health/route.ts /tmp/candlefish-audit/app/api/health/ 2>/dev/null || echo \"\"app/api/health/route.ts not found\"\")",
      "Bash(# Configuration files\ncp /Users/patricksmith/candlefish-ai/next.config.js /tmp/candlefish-audit/ 2>/dev/null || echo \"\"next.config.js not found\"\"\ncp /Users/patricksmith/candlefish-ai/package.json /tmp/candlefish-audit/ 2>/dev/null || echo \"\"package.json not found\"\"\ncp /Users/patricksmith/candlefish-ai/.github/workflows/ci-cd.yml /tmp/candlefish-audit/.github/workflows/ 2>/dev/null || echo \"\".github/workflows/ci-cd.yml not found\"\")",
      "Bash(# Documentation files\ncp /Users/patricksmith/candlefish-ai/AWS_DEPLOYMENT_GUIDE.md /tmp/candlefish-audit/ 2>/dev/null || echo \"\"AWS_DEPLOYMENT_GUIDE.md not found\"\"\ncp /Users/patricksmith/candlefish-ai/DEPLOYMENT.md /tmp/candlefish-audit/ 2>/dev/null || echo \"\"DEPLOYMENT.md not found\"\")",
      "Bash(# Test files\ncp /Users/patricksmith/candlefish-ai/scripts/test-aws-secrets.ts /tmp/candlefish-audit/scripts/ 2>/dev/null || echo \"\"scripts/test-aws-secrets.ts not found\"\"\ncp /Users/patricksmith/candlefish-ai/scripts/test-anthropic-integration.ts /tmp/candlefish-audit/scripts/ 2>/dev/null || echo \"\"scripts/test-anthropic-integration.ts not found\"\"\ncp /Users/patricksmith/candlefish-ai/scripts/test-deployment-summary.ts /tmp/candlefish-audit/scripts/ 2>/dev/null || echo \"\"scripts/test-deployment-summary.ts not found\"\"\ncp /Users/patricksmith/candlefish-ai/tests/k6/load-test.js /tmp/candlefish-audit/tests/k6/ 2>/dev/null || echo \"\"tests/k6/load-test.js not found\"\")",
      "Bash(# Deployment scripts\ncp /Users/patricksmith/candlefish-ai/scripts/deploy-vercel.sh /tmp/candlefish-audit/scripts/ 2>/dev/null || echo \"\"scripts/deploy-vercel.sh not found\"\"\ncp /Users/patricksmith/candlefish-ai/scripts/setup-aws-secrets.ts /tmp/candlefish-audit/scripts/ 2>/dev/null || echo \"\"scripts/setup-aws-secrets.ts not found\"\")",
      "Bash(./scripts/run-audit-suite.sh:*)",
      "Bash(DEPLOY_URL=https://candlefish-7dw8dkjrd-temppjs.vercel.app ./scripts/run-audit-suite.sh)",
      "Bash(infisical whoami:*)",
      "Bash(infisical:*)",
      "Bash(./verify-setup.sh:*)",
      "Bash(./scripts/deploy.sh:*)",
      "Bash(./scripts/setup-upstash.sh:*)",
      "Bash(tsx scripts/test-redis-connection.ts:*)",
      "Bash(./scripts/setup-elephantsql.sh:*)",
      "Bash(tsx scripts/test-elephantsql.ts:*)",
      "Bash(./scripts/verify-anthropic-setup.sh:*)",
      "Bash(tsx scripts/test-all-connections.ts:*)",
      "Bash(./scripts/validate-terminal-setup.sh:*)",
      "Bash(./scripts/test-fresh-terminal.sh:*)",
      "Bash(creds-verify)",
      "Bash(verify_credentials)",
      "Bash(pip3 list:*)",
      "Bash(tsx scripts/setup-redis-cloud.ts:*)",
      "Bash(tsx scripts/setup-redis-properly.ts:*)",
      "Bash(security find-generic-password:*)",
      "Bash(tsx scripts/validate-deployment.ts:*)",
      "Bash(./load-infisical-credentials.sh:*)",
      "Bash(./scripts/update-infisical-keys.sh:*)",
      "Bash(./scripts/cleanup-infisical-cli.sh:*)",
      "Bash(./scripts/infisical-auth-test.sh:*)",
      "Bash(./scripts/cleanup-infisical-final.sh:*)",
      "Bash(createdb:*)",
      "Bash(ts-node:*)",
      "mcp__memory__create_entities",
      "mcp__memory__add_observations",
      "mcp__memory__create_relations",
      "mcp__memory__delete_observations",
      "WebFetch(domain:candlefish.ai)",
      "Bash(/Users/patricksmith/candlefish-ai/scripts/verify-2fa-status.sh:*)",
      "Bash(/Users/patricksmith/candlefish-ai/scripts/complete-github-2fa.sh:*)",
      "Bash(git worktree:*)",
      "Bash(./scripts/setup-worktrees.sh:*)",
      "Bash(git remote set-head:*)",
      "Bash(./scripts/list-worktrees.sh:*)",
      "Bash(for region in us-east-1 us-west-2)",
      "Bash(do)",
      "Bash(--region $region )",
      "Bash(--query 'DBInstances[*].[DBInstanceIdentifier,DBInstanceClass,Engine,DBInstanceStatus,AllocatedStorage]' )",
      "Bash(--output table)",
      "Bash(kubectl get:*)",
      "WebFetch(domain:docs.anthropic.com)",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "Bash(./scripts/test-integrations.sh:*)",
      "Bash(./scripts/setup-aws-profiles.sh:*)",
      "Bash(./09-cleanup-cloudwatch-logs.sh:*)",
      "Bash(./scripts/create-slack-app.sh:*)",
      "Bash(./scripts/setup-slack-automated.sh:*)",
      "Bash(./11-optimize-secrets-manager.sh:*)",
      "Bash(./monitor-cost-savings.sh:*)",
      "Bash(./scripts/complete-slack-setup.sh:*)",
      "Bash(for nat_id in nat-0d339e04be6ddf080 nat-0196c56733e984d39 nat-07799e377562b4f72)",
      "Bash(scripts/quick-deploy-solution.sh:*)",
      "Bash(netlify:*)",
      "Bash(./scripts/setup-netlify-functions.sh:*)",
      "Bash(./deploy-slack-api.sh:*)",
      "Bash(./deploy-slack-functions.sh:*)",
      "Bash(./deploy-slack-v2.sh:*)",
      "Bash(git -C /Users/patricksmith/candlefish-ai worktree list)",
      "Bash(/Users/patricksmith/candlefish-ai/scripts/worktree-status.sh:*)",
      "Bash(./generate-letter-pdf.sh:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git add -A)",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"Add test page combining V4 architecture with V2 features\")",
      "Bash(git config:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git add -A)",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"Add password-protected family letter August 2025\")",
      "Bash(git checkout:*)",
      "Bash(git stash:*)",
      "Bash(./scripts/test-setup.sh:*)",
      "Bash(./deploy.sh)",
      "Bash(git submodule:*)",
      "Bash(git rm:*)",
      "Bash(./manual-deploy.sh)",
      "Bash(./optimize-images.sh:*)",
      "Bash(./direct-deploy.sh:*)",
      "Bash(./deploy-now.sh:*)",
      "Bash(./scripts/validate-deployment-setup.sh:*)",
      "Bash(zip:*)",
      "Bash(tar:*)",
      "Bash(zip:*)",
      "Bash(git submodule:*)",
      "Bash(./master-deployment.sh)",
      "Bash(./automated-deployment-runner.sh)",
      "Bash(gh api:*)",
      "Bash(gh org:*)",
      "Bash(gh repo list:*)",
      "Bash(unzip:*)",
      "Bash(NETLIFY_SITE_ID=ed200909-886f-47ca-950c-58727dca0b9c netlify deploy --prod --dir=. --site ed200909-886f-47ca-950c-58727dca0b9c)",
      "Bash(/Users/patricksmith/candlefish-ai/scripts/remove-hardcoded-passwords.sh:*)",
      "Bash(cflist:*)",
      "Bash(unfunction cflist)",
      "Bash(cfweb)",
      "Bash(rsync:*)",
      "Bash(./phase2-leadership-onboarding-simple.sh:*)",
      "Bash(./scripts/emergency-security-patches.sh:*)",
      "Bash(./scripts/migrate-secrets-to-aws.sh:*)",
      "Bash(./phase3-team-rollout.sh:*)",
      "Bash(/Users/patricksmith/candlefish-ai/apps/website/scripts/test-identity-signup.sh:*)",
      "Bash(./scripts/setup-summary.sh:*)",
      "Bash(./update-google-oauth.sh:*)",
      "Bash(./scripts/open-correct-oauth-page.sh:*)",
      "Bash(zip:*)",
      "Bash(nslookup:*)",
      "Bash(gh workflow run:*)",
      "Bash(./scripts/setup-secret-rotation.sh:*)",
      "Bash(gh workflow list:*)",
      "Bash(git clone:*)",
      "Bash(GIT_TRACE=1 git commit -m \"docs: Add comprehensive production deployment guide with security best practices\")",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"Fix candlefish.ai visual issues\n\n- Add missing GSAP dependency to package.json\n- Implement mobile navigation menu with hamburger button\n- Add smooth scroll functionality for mobile menu links\n- Fix responsive navigation for mobile devices\")",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"Add comprehensive onboarding package for Mike McIntosh (General Counsel)\n\n- Created complete onboarding documentation and setup scripts\n- Organized by priority: Critical, Important, and Nice-to-Have systems\n- Included executable setup scripts for each system\n- Added master orchestration script for Tyler to run\n- Created quick reference guides and training materials\n- Documented all system access requirements and permissions\n- Included emergency procedures and support contacts\n- Tailored for less tech-savvy user with simplified interfaces\")",
      "Bash(ln:*)",
      "Bash(README.md )",
      "Bash(TYLER_ONBOARDING_GUIDE.md )",
      "Bash(scripts/00-master-setup.sh:*)",
      "Bash(--desc \"Mike McIntosh (General Counsel) Onboarding Package - Candlefish.ai\")",
      "Bash(./scripts/migrate-to-secrets-manager.sh:*)",
      "Bash(sudo dscacheutil:*)",
      "Bash(./DEPLOY_PRODUCTION.sh:*)",
      "Bash(./scripts/setup-deployment-env.sh:*)",
      "WebFetch(domain:claude.candlefish.ai)",
      "Bash(claude --version)",
      "Bash(claude-code:*)",
      "Bash(claude --list-agents)",
      "WebFetch(domain:docs.warp.dev)",
      "Bash(time zsh:*)",
      "Bash(REDIS_URL=redis://nonexistent:6379 python -c \"\nfrom security import SecurityConfig, RateLimiter\nimport asyncio\n\nasync def test_rate_limiting():\n    config = SecurityConfig()\n    config.RATE_LIMIT_REQUESTS = 3  # Small limit for testing\n    print(f''Rate limit set to: {config.RATE_LIMIT_REQUESTS}'')\n    \n    rate_limiter = RateLimiter(config)\n    print(f''Using Redis: {rate_limiter.redis_client is not None}'')\n    \n    client_ip = ''192.168.1.500''\n    endpoint = ''test-endpoint''\n    \n    # Test multiple requests\n    for i in range(6):\n        is_limited, remaining = await rate_limiter.is_rate_limited(client_ip, endpoint)\n        print(f''Request {i+1}: limited={is_limited}, remaining={remaining}'')\n\nasyncio.run(test_rate_limiting())\n\")",
      "Bash(REDIS_URL=redis://nonexistent:6379 python -m pytest test_security.py::TestRateLimiter::test_memory_rate_limiting -v -s)",
      "Bash(./setup-terraform-backend.sh:*)",
      "Bash(./deploy-production.sh)",
      "Bash(terraform apply:*)",
      "Bash(terraform state:*)",
      "Bash(terraform force-unlock:*)",
      "Bash(./verification/verify-deployment.sh:*)",
      "Bash(terraform destroy:*)",
      "Bash(/Users/patricksmith/candlefish-ai/deployment/check-security-status.sh:*)",
      "Bash(./scripts/setup-global-deployment.sh:*)",
      "Bash(for i in {1..5})",
      "Bash(do env:*)",
      "Bash(TERM_PROGRAM=WarpTerminal /usr/bin/time -p zsh -c 'source ~/.zshrc.warp-optimized >/dev/null 2>&1')",
      "Bash(/usr/bin/time:*)",
      "Bash(/Users/patricksmith/candlefish-ai/scripts/optimize-terminal-config.sh test:*)",
      "Bash(/Users/patricksmith/candlefish-ai/scripts/optimize-terminal-config.sh analyze:*)",
      "Bash(/dev/null)",
      "Bash(/Users/patricksmith/candlefish-ai/scripts/optimize-terminal-config.sh:*)",
      "Bash(./scripts/optimize-terminal-config.sh:*)",
      "Bash(/Users/patricksmith/.claude/local/node_modules/.bin/claude:*)",
      "Bash(/Users/patricksmith/candlefish-ai/warp-performance-analysis.sh:*)",
      "Bash(./scripts/deploy-vpc-endpoints.sh:*)",
      "Bash(/Users/patricksmith/.local/bin/claude-auto-login:*)",
      "Bash(terraform show:*)",
      "Bash(__NEW_LINE__ cp ~/.zshrc ~/candlefish-ai/terminal-backup/)",
      "Bash(__NEW_LINE__ cp ~/.config/candlefish-complete-setup.zsh ~/candlefish-ai/terminal-backup/)",
      "Bash(__NEW_LINE__ cp ~/.local/bin/claude-code ~/candlefish-ai/terminal-backup/)",
      "Bash(__NEW_LINE__ cp ~/.local/bin/claude-auto-login ~/candlefish-ai/terminal-backup/)",
      "Bash(__NEW_LINE__ cp ~/.claude/settings.json ~/candlefish-ai/terminal-backup/)",
      "Bash(__NEW_LINE__ echo \"✅ Backup created successfully\")",
      "Bash(__NEW_LINE__ ls -la ~/candlefish-ai/terminal-backup/)",
      "Bash(__NEW_LINE__ git add TERMINAL_SETUP.md PROJECTS.md SHORTCUTS.md terminal-backup/)",
      "Bash(__NEW_LINE__ git commit -m \"Add comprehensive terminal configuration and documentation\n\n- Complete terminal setup with projects table on every prompt\n- Claude Pro Max auto-login (claude-opus-4-1-20250805)\n- All project shortcuts and navigation documented\n- Backup of all configuration files\n- Clean, organized terminal experience\")",
      "Bash(__NEW_LINE__ PRE_COMMIT_ALLOW_NO_CONFIG=1 git add TERMINAL_SETUP.md PROJECTS.md SHORTCUTS.md terminal-backup/)",
      "Bash(__NEW_LINE__ PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"Add comprehensive terminal configuration and documentation\n\n- Complete terminal setup with projects table on every prompt\n- Claude Pro Max auto-login (claude-opus-4-1-20250805)\n- All project shortcuts and navigation documented\n- Backup of all configuration files\n- Clean, organized terminal experience\")",
      "Bash(__NEW_LINE__ git add -f TERMINAL_SETUP.md PROJECTS.md SHORTCUTS.md terminal-backup/ 2)",
      "Bash(/dev/null git status --short)",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"Add comprehensive terminal configuration and documentation\n\n- Complete terminal setup with projects table on every prompt\n- Claude Pro Max auto-login (claude-opus-4-1-20250805)\n- All project shortcuts and navigation documented\n- Backup of all configuration files\n- Clean, organized terminal experience\n- Projects: Paintbox, Fogg, PromoterOS, Brewkit, Crown Trophy, BART\")",
      "Bash(./scripts/enable-nat-gateway.sh:*)",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"$(cat <<''EOF''\nAdd production API test deployment with Netlify Functions\n\n- Convert Python FastAPI endpoints to Netlify Functions in Node.js\n- Update test-fetch.html to use production API endpoints\n- Configure netlify.toml for API test page deployment\n- Add comprehensive DNS setup instructions for api-test.candlefish.ai\n- Include automated DNS setup script for Porkbun API\n- Set up environment variables for AWS secrets integration\n- Enable auto-deployment with perpetual server functionality\n\nAll endpoints working:\n- Health check: /.netlify/functions/health\n- Security status: /.netlify/functions/security-status  \n- Security check: /.netlify/functions/security-check\n- Performance metrics: /.netlify/functions/performance\n- Performance aggregates: /.netlify/functions/performance-aggregate\n- Performance pages: /.netlify/functions/performance-pages\n- Security health: /.netlify/functions/security-health\n\n🤖 Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(__NEW_LINE__ cp ~/candlefish-ai/terminal-backup/.zshrc ~/candlefish-ai/packages/tyler-setup/templates/zshrc.template)",
      "Bash(__NEW_LINE__ cp ~/candlefish-ai/terminal-backup/claude-code ~/candlefish-ai/packages/tyler-setup/templates/claude-code.sh)",
      "Bash(__NEW_LINE__ cp ~/candlefish-ai/terminal-backup/claude-auto-login ~/candlefish-ai/packages/tyler-setup/templates/claude-auto-login.sh)",
      "Bash(__NEW_LINE__ echo \"✅ Templates copied\")",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"Fix homepage deployment configuration\n\n- Update netlify.toml with proper redirects for static pages\n- Ensure main index.html is properly configured for deployment\n- Homepage should now show Candlefish AI website instead of 404 page\")",
      "Bash(./quick-deploy-api.sh:*)",
      "Bash(/Users/patricksmith/candlefish-ai/apps/website/api-test-site/direct-deploy.sh)",
      "Bash(command -v:*)",
      "Bash(timeout:*)",
      "Bash(/Users/patricksmith/candlefish-ai/deployment/nurture/master-deploy-dev.sh)",
      "Bash(./scripts/validate-deployment-readiness.sh:*)",
      "Bash(terraform validate:*)",
      "Bash(./scripts/deploy-render-comprehensive.sh:*)",
      "Bash(NODE_ENV=development npm run build)",
      "Bash(./scripts/build-for-production.sh:*)",
      "Bash(./scripts/deploy-production-ready.sh:*)",
      "Bash(ENVIRONMENT=staging ./scripts/automated-deployment.sh --dry-run)",
      "Bash(export AWS_ACCOUNT_ID=207567767039)",
      "Bash(export DOMAIN_NAME=paintbox.candlefish.ai)",
      "Bash(export ENVIRONMENT=staging)",
      "Bash(./scripts/automated-deployment.sh:*)",
      "Bash(export SKIP_TESTS=true)",
      "Bash(./deploy-to-production.sh:*)",
      "Bash(git init:*)",
      "Bash(gh repo create:*)",
      "Bash(brew list:*)",
      "Bash(glow:*)",
      "WebFetch(domain:tyler-setup-frontend.netlify.app)",
      "Bash(git rebase:*)",
      "Bash(git reset:*)",
      "WebFetch(domain:swagger.io)",
      "Bash(./DEPLOY_LEAN.sh:*)",
      "Bash(serverless info:*)",
      "Bash(serverless deploy:*)",
      "Bash(serverless remove:*)",
      "Bash(./deploy-security-fixes.sh:*)",
      "Bash(NETLIFY_SITE_ID=9650bb87-e619-4fdf-9b9b-7ff2eae31ba6 netlify deploy --prod --dir=dist --skip-functions-cache)",
      "Bash(./direct-netlify-deploy.sh:*)",
      "Bash(tmux list-sessions:*)",
      "Bash(set -o)",
      "Bash(reset)",
      "Bash(tput:*)",
      "Bash(printf '\\033[?1049l\\033[?47l\\033[?1000l\\033[?1002l\\033[?1003l')",
      "Bash(printf '\\033c\\033[?1000l\\033[?1001l\\033[?1002l\\033[?1003l\\033[?1005l\\033[?1006l\\033[?1015l')",
      "Bash(defaults read:*)",
      "Bash(tty)",
      "Bash(/Users/patricksmith/reset-terminal-completely.sh:*)"
    ],
    "deny": []
  },
  "enabledMcpjsonServers": [
    "filesystem",
    "memory",
    "sequential-thinking"
  ]
}
