# Real-time Collaboration Subscriptions
# WebSocket-based real-time events for collaborative document system

extend type Subscription {
  # =============================================================================
  # DOCUMENT CHANGE SUBSCRIPTIONS
  # =============================================================================

  # Subscribe to real-time document content changes
  documentContentChanged(documentId: UUID!): DocumentContentChangeEvent!
    @auth(requires: USER) @tenant @rateLimit(max: 10, window: "1m")

  # Subscribe to document operations as they're applied
  documentOperations(documentId: UUID!): DocumentOperationEvent!
    @auth(requires: USER) @tenant @rateLimit(max: 50, window: "1m")

  # Subscribe to document metadata changes
  documentMetadataChanged(documentId: UUID!): DocumentMetadataChangeEvent!
    @auth(requires: USER) @tenant

  # Subscribe to document status changes (draft, published, etc.)
  documentStatusChanged(documentId: UUID!): DocumentStatusChangeEvent!
    @auth(requires: USER) @tenant

  # Subscribe to document permission changes
  documentPermissionsChanged(documentId: UUID!): DocumentPermissionChangeEvent!
    @auth(requires: USER) @tenant

  # Subscribe to document sharing changes
  documentSharingChanged(documentId: UUID!): DocumentSharingChangeEvent!
    @auth(requires: USER) @tenant

  # Subscribe to document lock changes
  documentLocksChanged(documentId: UUID!): DocumentLockChangeEvent!
    @auth(requires: USER) @tenant

  # =============================================================================
  # PRESENCE SUBSCRIPTIONS
  # =============================================================================

  # Subscribe to user presence changes in a document
  documentPresenceChanged(documentId: UUID!): PresenceChangeEvent!
    @auth(requires: USER) @tenant @rateLimit(max: 100, window: "1m")

  # Subscribe to cursor and selection changes from other users
  cursorPositionChanged(documentId: UUID!): CursorPositionEvent!
    @auth(requires: USER) @tenant @rateLimit(max: 500, window: "1m")

  # Subscribe to user typing indicators
  userTypingStatusChanged(documentId: UUID!): TypingStatusEvent!
    @auth(requires: USER) @tenant @rateLimit(max: 200, window: "1m")

  # Subscribe to user activity status (active, idle, away)
  userActivityStatusChanged(documentId: UUID!): ActivityStatusEvent!
    @auth(requires: USER) @tenant @rateLimit(max: 50, window: "1m")

  # Subscribe to viewport changes (scrolling, zoom)
  userViewportChanged(documentId: UUID!): ViewportChangeEvent!
    @auth(requires: USER) @tenant @rateLimit(max: 100, window: "1m")

  # Subscribe to user joins and leaves
  documentCollaborationChanged(documentId: UUID!): CollaborationEvent!
    @auth(requires: USER) @tenant

  # =============================================================================
  # COMMENT SUBSCRIPTIONS
  # =============================================================================

  # Subscribe to new comments on a document
  commentAdded(documentId: UUID!): CommentEvent!
    @auth(requires: USER) @tenant @rateLimit(max: 50, window: "1m")

  # Subscribe to comment updates (edits, status changes)
  commentUpdated(documentId: UUID!): CommentUpdateEvent!
    @auth(requires: USER) @tenant @rateLimit(max: 50, window: "1m")

  # Subscribe to comment deletions
  commentDeleted(documentId: UUID!): CommentDeleteEvent!
    @auth(requires: USER) @tenant

  # Subscribe to comment thread activities
  commentThreadActivity(documentId: UUID!): CommentThreadEvent!
    @auth(requires: USER) @tenant @rateLimit(max: 30, window: "1m")

  # Subscribe to comment resolutions
  commentResolutionChanged(documentId: UUID!): CommentResolutionEvent!
    @auth(requires: USER) @tenant

  # Subscribe to comment reactions
  commentReactionChanged(documentId: UUID!): CommentReactionEvent!
    @auth(requires: USER) @tenant @rateLimit(max: 100, window: "1m")

  # Subscribe to mentions in comments
  mentionReceived: MentionEvent!
    @auth(requires: USER) @rateLimit(max: 20, window: "1m")

  # =============================================================================
  # VERSION CONTROL SUBSCRIPTIONS
  # =============================================================================

  # Subscribe to new document versions
  documentVersionCreated(documentId: UUID!): DocumentVersionEvent!
    @auth(requires: USER) @tenant

  # Subscribe to version changes (updates, deletions)
  documentVersionChanged(documentId: UUID!): DocumentVersionChangeEvent!
    @auth(requires: USER) @tenant

  # Subscribe to branch activities (create, merge, delete)
  documentBranchActivity(documentId: UUID!): DocumentBranchEvent!
    @auth(requires: USER) @tenant

  # Subscribe to merge operations and conflicts
  documentMergeActivity(documentId: UUID!): DocumentMergeEvent!
    @auth(requires: USER) @tenant

  # Subscribe to conflict resolution activities
  conflictResolutionChanged(documentId: UUID!): ConflictResolutionEvent!
    @auth(requires: USER) @tenant

  # =============================================================================
  # ANNOTATION SUBSCRIPTIONS
  # =============================================================================

  # Subscribe to annotation additions
  annotationAdded(documentId: UUID!): AnnotationEvent!
    @auth(requires: USER) @tenant @rateLimit(max: 30, window: "1m")

  # Subscribe to annotation updates
  annotationUpdated(documentId: UUID!): AnnotationUpdateEvent!
    @auth(requires: USER) @tenant @rateLimit(max: 30, window: "1m")

  # Subscribe to annotation deletions
  annotationDeleted(documentId: UUID!): AnnotationDeleteEvent!
    @auth(requires: USER) @tenant

  # =============================================================================
  # ACTIVITY AND AUDIT SUBSCRIPTIONS
  # =============================================================================

  # Subscribe to document activity feed
  documentActivity(
    documentId: UUID!
    filter: ActivitySubscriptionFilter
  ): ActivityEvent!
    @auth(requires: USER) @tenant @rateLimit(max: 100, window: "1m")

  # Subscribe to organization-wide collaboration activity
  organizationActivity(
    filter: ActivitySubscriptionFilter
  ): ActivityEvent!
    @auth(requires: ORG_ADMIN) @tenant @rateLimit(max: 50, window: "1m")

  # Subscribe to user's personal activity across all documents
  myActivity: PersonalActivityEvent!
    @auth(requires: USER) @rateLimit(max: 30, window: "1m")

  # Subscribe to system health and performance metrics
  collaborationMetrics(documentIds: [UUID!]): CollaborationMetricsEvent!
    @auth(requires: USER) @tenant @rateLimit(max: 10, window: "1m")

  # =============================================================================
  # INTEGRATION SUBSCRIPTIONS
  # =============================================================================

  # Subscribe to Paintbox estimate integration changes
  paintboxEstimateChanged(documentId: UUID!): PaintboxIntegrationEvent!
    @auth(requires: VIEW_ESTIMATES) @tenant

  # Subscribe to Brand Portal theme changes
  brandThemeChanged(documentId: UUID!): BrandThemeEvent!
    @auth(requires: VIEW_BRANDING) @tenant

  # Subscribe to external system sync events
  externalSyncStatusChanged(documentId: UUID!): ExternalSyncEvent!
    @auth(requires: USER) @tenant

  # =============================================================================
  # NOTIFICATION SUBSCRIPTIONS
  # =============================================================================

  # Subscribe to personal notifications
  notificationReceived: NotificationEvent!
    @auth(requires: USER) @rateLimit(max: 50, window: "1m")

  # Subscribe to document-specific notifications
  documentNotification(documentId: UUID!): DocumentNotificationEvent!
    @auth(requires: USER) @tenant @rateLimit(max: 30, window: "1m")

  # Subscribe to collaboration notifications
  collaborationNotification: CollaborationNotificationEvent!
    @auth(requires: USER) @rateLimit(max: 20, window: "1m")

  # =============================================================================
  # SYSTEM AND HEALTH SUBSCRIPTIONS
  # =============================================================================

  # Subscribe to document sync status changes
  documentSyncStatusChanged(documentId: UUID!): SyncStatusEvent!
    @auth(requires: USER) @tenant

  # Subscribe to system health updates
  systemHealthChanged: SystemHealthEvent!
    @auth(requires: USER) @rateLimit(max: 5, window: "1m")

  # Subscribe to performance alerts
  performanceAlert: PerformanceAlertEvent!
    @auth(requires: ORG_ADMIN) @tenant @rateLimit(max: 10, window: "1m")

  # Subscribe to conflict detection and alerts
  conflictDetected(documentId: UUID!): ConflictDetectionEvent!
    @auth(requires: USER) @tenant

  # =============================================================================
  # BULK OPERATION SUBSCRIPTIONS
  # =============================================================================

  # Subscribe to bulk operation progress
  bulkOperationProgress(operationId: UUID!): BulkOperationProgressEvent!
    @auth(requires: USER) @tenant

  # Subscribe to export/import operation progress
  documentExportProgress(exportId: UUID!): ExportProgressEvent!
    @auth(requires: USER) @tenant

  documentImportProgress(importId: UUID!): ImportProgressEvent!
    @auth(requires: USER) @tenant
}

# =============================================================================
# EVENT TYPES FOR SUBSCRIPTIONS
# =============================================================================

# Document Change Events
type DocumentContentChangeEvent {
  type: DocumentChangeType!
  document: Document!
  operations: [Operation!]!
  author: User!
  timestamp: DateTime!

  # Change details
  affectedBlocks: [UUID!]!
  changeCount: NonNegativeInt!
  newChecksum: String!

  # Collaboration context
  sessionId: UUID!
  conflictsDetected: [ConflictInfo!]!
}

type DocumentOperationEvent {
  operation: Operation!
  author: User!
  timestamp: DateTime!

  # Operation context
  documentId: UUID!
  sessionId: UUID!

  # Operation results
  applied: Boolean!
  transformed: Boolean!
  conflicts: [ConflictInfo!]!
}

type DocumentMetadataChangeEvent {
  type: MetadataChangeType!
  document: Document!
  changedBy: User!
  timestamp: DateTime!

  # Change details
  oldValues: JSON!
  newValues: JSON!
  changedFields: [String!]!
}

type DocumentStatusChangeEvent {
  document: Document!
  oldStatus: DocumentStatus!
  newStatus: DocumentStatus!
  changedBy: User!
  timestamp: DateTime!
  reason: String
}

type DocumentPermissionChangeEvent {
  type: PermissionChangeType!
  document: Document!
  changedBy: User!
  timestamp: DateTime!

  # Permission details
  affectedUser: User
  oldPermission: DocumentPermission
  newPermission: DocumentPermission
  scope: PermissionScope!
}

type DocumentSharingChangeEvent {
  type: SharingChangeType!
  document: Document!
  sharing: DocumentSharing!
  changedBy: User!
  timestamp: DateTime!
}

type DocumentLockChangeEvent {
  type: LockChangeType!
  document: Document!
  lock: LockInfo!
  timestamp: DateTime!

  # Lock context
  previousLock: LockInfo
  affectedUsers: [User!]!
}

# Presence Events
type PresenceChangeEvent {
  type: PresenceChangeType!
  session: PresenceSession!
  timestamp: DateTime!

  # Presence context
  documentId: UUID!
  activeUserCount: NonNegativeInt!
}

type CursorPositionEvent {
  session: PresenceSession!
  cursor: CursorPosition!
  selection: TextSelection
  timestamp: DateTime!

  # Additional context
  documentId: UUID!
  blockId: UUID
}

type TypingStatusEvent {
  user: User!
  documentId: UUID!
  isTyping: Boolean!
  typingLocation: CursorPosition
  timestamp: DateTime!
}

type ActivityStatusEvent {
  user: User!
  documentId: UUID!
  status: PresenceStatus!
  currentAction: UserAction
  timestamp: DateTime!
}

type ViewportChangeEvent {
  user: User!
  documentId: UUID!
  viewport: ViewportInfo!
  timestamp: DateTime!
}

type CollaborationEvent {
  type: CollaborationType!
  user: User!
  document: Document!
  timestamp: DateTime!

  # Collaboration context
  sessionId: UUID
  totalActiveUsers: NonNegativeInt!
  userRole: DocumentPermission!
}

# Comment Events
type CommentEvent {
  comment: Comment!
  author: User!
  timestamp: DateTime!

  # Comment context
  documentId: UUID!
  threadId: UUID
  mentionedUsers: [User!]!
}

type CommentUpdateEvent {
  type: CommentUpdateType!
  comment: Comment!
  updatedBy: User!
  timestamp: DateTime!

  # Update details
  oldValues: JSON
  newValues: JSON
  changedFields: [String!]!
}

type CommentDeleteEvent {
  commentId: UUID!
  documentId: UUID!
  threadId: UUID
  deletedBy: User!
  timestamp: DateTime!
  reason: String
}

type CommentThreadEvent {
  type: ThreadEventType!
  thread: CommentThread!
  triggeredBy: User!
  timestamp: DateTime!

  # Thread context
  commentCount: NonNegativeInt!
  participantCount: NonNegativeInt!
  newParticipants: [User!]!
}

type CommentResolutionEvent {
  comment: Comment!
  thread: CommentThread
  resolvedBy: User!
  timestamp: DateTime!

  # Resolution details
  isResolved: Boolean!
  resolution: String
  affectedComments: NonNegativeInt!
}

type CommentReactionEvent {
  type: ReactionEventType!
  comment: Comment!
  reaction: Reaction!
  user: User!
  timestamp: DateTime!
}

type MentionEvent {
  mention: Mention!
  comment: Comment!
  document: Document!
  mentionedBy: User!
  timestamp: DateTime!

  # Mention context
  context: String!
  isUrgent: Boolean!
}

# Version Control Events
type DocumentVersionEvent {
  version: DocumentVersion!
  document: Document!
  createdBy: User!
  timestamp: DateTime!

  # Version details
  isMajorVersion: Boolean!
  changesSummary: String
  diffStats: DiffStats!
}

type DocumentVersionChangeEvent {
  type: VersionChangeType!
  version: DocumentVersion!
  changedBy: User!
  timestamp: DateTime!
}

type DocumentBranchEvent {
  type: BranchEventType!
  branch: DocumentBranch!
  document: Document!
  actor: User!
  timestamp: DateTime!

  # Branch context
  sourceBranch: DocumentBranch
  targetBranch: DocumentBranch
  conflictCount: NonNegativeInt!
}

type DocumentMergeEvent {
  type: MergeEventType!
  merge: MergeResult!
  document: Document!
  mergedBy: User!
  timestamp: DateTime!

  # Merge details
  sourceBranch: DocumentBranch!
  targetBranch: DocumentBranch!
  conflictCount: NonNegativeInt!
}

type ConflictResolutionEvent {
  type: ConflictEventType!
  conflict: MergeConflict!
  resolution: ConflictResolution
  document: Document!
  resolvedBy: User
  timestamp: DateTime!
}

# Annotation Events
type AnnotationEvent {
  annotation: Annotation!
  document: Document!
  createdBy: User!
  timestamp: DateTime!
}

type AnnotationUpdateEvent {
  type: AnnotationUpdateType!
  annotation: Annotation!
  updatedBy: User!
  timestamp: DateTime!

  # Update details
  oldValues: JSON
  newValues: JSON
}

type AnnotationDeleteEvent {
  annotationId: UUID!
  documentId: UUID!
  deletedBy: User!
  timestamp: DateTime!
}

# Activity Events
type PersonalActivityEvent {
  activity: ActivityEvent!
  documents: [Document!]!
  timestamp: DateTime!

  # Personal context
  isDirectlyInvolved: Boolean!
  requiresAction: Boolean!
  priority: ActivitySeverity!
}

type CollaborationMetricsEvent {
  metrics: CollaborationMetrics!
  timestamp: DateTime!

  # Metrics context
  documentIds: [UUID!]!
  timeframe: Duration!
  significantChanges: [MetricChange!]!
}

type MetricChange {
  metric: String!
  oldValue: Decimal!
  newValue: Decimal!
  changePercent: Decimal!
  isImprovement: Boolean!
}

# Integration Events
type PaintboxIntegrationEvent {
  type: IntegrationEventType!
  document: Document!
  estimate: PaintboxEstimate!
  timestamp: DateTime!

  # Integration details
  syncStatus: SyncStatus!
  changes: [IntegrationChange!]!
}

type IntegrationChange {
  field: String!
  oldValue: JSON
  newValue: JSON
  syncDirection: SyncDirection!
}

type BrandThemeEvent {
  type: ThemeEventType!
  document: Document!
  theme: BrandPortalTheme!
  appliedBy: User!
  timestamp: DateTime!

  # Theme details
  affectedElements: [String!]!
  customizations: JSON
}

type ExternalSyncEvent {
  type: SyncEventType!
  document: Document!
  externalSystemId: UUID!
  timestamp: DateTime!

  # Sync details
  status: SyncStatus!
  itemsSynced: NonNegativeInt!
  errors: [SyncError!]!
  duration: Duration!
}

# Notification Events
type NotificationEvent {
  notification: Notification!
  timestamp: DateTime!

  # Notification context
  source: NotificationSource!
  priority: NotificationPriority!
  requiresAction: Boolean!
}

type DocumentNotificationEvent {
  type: DocumentNotificationType!
  document: Document!
  notification: Notification!
  timestamp: DateTime!

  # Document context
  triggeredBy: User
  relatedUsers: [User!]!
}

type CollaborationNotificationEvent {
  type: CollaborationNotificationType!
  notification: Notification!
  documents: [Document!]!
  timestamp: DateTime!

  # Collaboration context
  collaborators: [User!]!
  actionRequired: Boolean!
}

# System Events
type SyncStatusEvent {
  document: Document!
  oldStatus: SyncStatus!
  newStatus: SyncStatus!
  timestamp: DateTime!

  # Sync details
  pendingOperations: NonNegativeInt!
  conflicts: NonNegativeInt!
  lastSyncAt: DateTime
  issues: [SyncIssue!]!
}

type SystemHealthEvent {
  service: String!
  oldStatus: HealthStatus!
  newStatus: HealthStatus!
  timestamp: DateTime!

  # Health details
  metrics: JSON!
  issues: [String!]!
  affectedFeatures: [String!]!
}

type PerformanceAlertEvent {
  type: PerformanceAlertType!
  severity: AlertSeverity!
  message: String!
  timestamp: DateTime!

  # Performance context
  metrics: JSON!
  affectedDocuments: [UUID!]!
  suggestedActions: [String!]!
}

type ConflictDetectionEvent {
  conflicts: [ConflictInfo!]!
  document: Document!
  detectedAt: DateTime!

  # Detection context
  triggeringOperation: Operation
  affectedUsers: [User!]!
  severity: ConflictSeverity!
  autoResolvable: Boolean!
}

# Bulk Operation Events
type BulkOperationProgressEvent {
  operationId: UUID!
  type: BulkOperationType!

  # Progress details
  totalItems: NonNegativeInt!
  processedItems: NonNegativeInt!
  successfulItems: NonNegativeInt!
  failedItems: NonNegativeInt!

  # Status
  status: BulkOperationStatus!
  estimatedTimeRemaining: Duration
  currentItem: String
}

type ExportProgressEvent {
  exportId: UUID!
  document: Document!

  # Export progress
  status: ExportStatus!
  progress: Decimal! # 0.0 to 1.0
  currentStep: String!

  # Export details
  format: ExportFormat!
  size: BigInt
  estimatedCompletion: DateTime
}

type ImportProgressEvent {
  importId: UUID!

  # Import progress
  status: ImportStatus!
  progress: Decimal! # 0.0 to 1.0
  currentStep: String!

  # Import details
  format: ImportFormat!
  itemsProcessed: NonNegativeInt!
  itemsTotal: NonNegativeInt!
  errors: [ImportError!]!
}

type ImportError {
  item: String!
  error: String!
  line: NonNegativeInt
  isRecoverable: Boolean!
}

# =============================================================================
# FILTER TYPES FOR SUBSCRIPTIONS
# =============================================================================

input ActivitySubscriptionFilter {
  # Event filtering
  types: [ActivityEventType!]
  actions: [ActivityAction!]
  severity: [ActivitySeverity!]

  # User filtering
  includeMyActivity: Boolean = true
  includeOthersActivity: Boolean = true
  actorIds: [UUID!]

  # Time filtering
  since: DateTime

  # Content filtering
  documentTypes: [DocumentType!]
  onlyDirectlyInvolved: Boolean = false
}

# =============================================================================
# ENUMERATIONS FOR EVENTS
# =============================================================================

enum DocumentChangeType {
  CONTENT_UPDATED
  STRUCTURE_CHANGED
  FORMATTING_APPLIED
  BLOCKS_ADDED
  BLOCKS_REMOVED
  BLOCKS_MOVED
  MEDIA_ADDED
  MEDIA_REMOVED
}

enum MetadataChangeType {
  NAME_CHANGED
  DESCRIPTION_CHANGED
  TAGS_UPDATED
  CATEGORY_CHANGED
  SETTINGS_UPDATED
}

enum PermissionChangeType {
  USER_ADDED
  USER_REMOVED
  PERMISSION_UPGRADED
  PERMISSION_DOWNGRADED
  SHARING_ENABLED
  SHARING_DISABLED
}

enum PermissionScope {
  INDIVIDUAL_USER
  ORGANIZATION
  PUBLIC
  TEAM
}

enum SharingChangeType {
  PUBLIC_SHARING_ENABLED
  PUBLIC_SHARING_DISABLED
  LINK_SHARING_ENABLED
  LINK_SHARING_DISABLED
  PASSWORD_UPDATED
  EXPIRATION_UPDATED
}

enum LockChangeType {
  LOCK_ACQUIRED
  LOCK_RELEASED
  LOCK_EXPIRED
  LOCK_TRANSFERRED
  LOCK_BROKEN
}

enum PresenceChangeType {
  USER_JOINED
  USER_LEFT
  STATUS_CHANGED
  DEVICE_CHANGED
  CONNECTION_CHANGED
}

enum CollaborationType {
  USER_JOINED_DOCUMENT
  USER_LEFT_DOCUMENT
  USER_STARTED_EDITING
  USER_STOPPED_EDITING
  COLLABORATION_INVITED
  COLLABORATION_REMOVED
}

enum CommentUpdateType {
  CONTENT_EDITED
  STATUS_CHANGED
  PRIORITY_CHANGED
  POSITION_MOVED
  MENTIONS_ADDED
}

enum ThreadEventType {
  COMMENT_ADDED
  PARTICIPANT_JOINED
  STATUS_CHANGED
  PRIORITY_UPDATED
  THREAD_RESOLVED
  THREAD_REOPENED
}

enum ReactionEventType {
  REACTION_ADDED
  REACTION_REMOVED
  REACTION_CHANGED
}

enum VersionChangeType {
  VERSION_UPDATED
  VERSION_DELETED
  VERSION_PUBLISHED
  VERSION_ARCHIVED
}

enum BranchEventType {
  BRANCH_CREATED
  BRANCH_DELETED
  BRANCH_MERGED
  BRANCH_SWITCHED
  BRANCH_UPDATED
}

enum MergeEventType {
  MERGE_STARTED
  MERGE_COMPLETED
  MERGE_FAILED
  MERGE_CONFLICTS_DETECTED
  MERGE_CONFLICTS_RESOLVED
}

enum ConflictEventType {
  CONFLICT_DETECTED
  CONFLICT_RESOLVED
  CONFLICT_AUTO_RESOLVED
  CONFLICT_ESCALATED
}

enum AnnotationUpdateType {
  CONTENT_CHANGED
  POSITION_MOVED
  STYLE_UPDATED
  VISIBILITY_CHANGED
}

enum IntegrationEventType {
  LINKED
  UNLINKED
  SYNCED
  SYNC_FAILED
  DATA_UPDATED
}

enum ThemeEventType {
  THEME_APPLIED
  THEME_REMOVED
  THEME_UPDATED
  CUSTOMIZATION_APPLIED
}

enum SyncEventType {
  SYNC_STARTED
  SYNC_COMPLETED
  SYNC_FAILED
  SYNC_CONFLICT
  SYNC_PARTIAL
}

enum DocumentNotificationType {
  DOCUMENT_SHARED
  PERMISSION_CHANGED
  COMMENT_ADDED
  MENTION_RECEIVED
  DOCUMENT_UPDATED
  COLLABORATION_INVITED
}

enum CollaborationNotificationType {
  BULK_OPERATION_COMPLETED
  SYSTEM_MAINTENANCE
  FEATURE_ANNOUNCEMENT
  SECURITY_ALERT
  PERFORMANCE_WARNING
}

enum NotificationSource {
  DOCUMENT
  COMMENT
  SYSTEM
  INTEGRATION
  USER
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
  CRITICAL
}

enum PerformanceAlertType {
  HIGH_LATENCY
  HIGH_ERROR_RATE
  MEMORY_USAGE
  CPU_USAGE
  CONNECTION_ISSUES
  SYNC_DELAYS
}

enum BulkOperationType {
  DOCUMENT_UPDATE
  PERMISSION_UPDATE
  SHARING_UPDATE
  COMMENT_RESOLUTION
  DOCUMENT_DELETION
  DOCUMENT_MOVE
}

enum BulkOperationStatus {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  PARTIALLY_COMPLETED
}

enum ExportStatus {
  PREPARING
  PROCESSING
  GENERATING
  COMPLETED
  FAILED
  EXPIRED
}

enum ImportStatus {
  UPLOADING
  VALIDATING
  PROCESSING
  CREATING_DOCUMENT
  COMPLETED
  FAILED
}
