{"version":3,"mappings":"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","names":["ErrorBoundary","Component","__publicField","error","errorInfo","jsxs","jsx","LoadingScreen","ParticleBackground","canvasRef","useRef","animationFrameRef","useEffect","canvas","gl","resizeCanvas","vertexShaderSource","fragmentShaderSource","createShader","type","source","shader","vertexShader","fragmentShader","program","positionLocation","sizeLocation","opacityLocation","particleCount","particles","i","animate","particle","HomePage","React","__vitePreload","NotFoundPage","App","Router","Suspense","Routes","Route","startTime","ReactDOM","loadTime"],"ignoreList":[],"sources":["../../src/components/ErrorBoundary.tsx","../../src/components/LoadingScreen.tsx","../../src/components/ParticleBackground.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["import { Component, ErrorInfo, ReactNode } from 'react'\n\ninterface Props {\n  children: ReactNode\n}\n\ninterface State {\n  hasError: boolean\n  error?: Error\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false\n  }\n\n  public static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error }\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('ErrorBoundary caught an error:', error, errorInfo)\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"min-h-screen bg-black text-white flex items-center justify-center p-8\">\n          <div className=\"text-center max-w-md\">\n            <h1 className=\"text-4xl font-light mb-4 text-teal-400\">Something went wrong</h1>\n            <p className=\"text-gray-400 mb-6\">\n              We're sorry, but something unexpected happened. Please refresh the page or try again later.\n            </p>\n            <button\n              onClick={() => window.location.reload()}\n              className=\"inline-flex items-center px-6 py-3 bg-teal-400 text-black font-medium hover:bg-white transition-colors duration-200\"\n            >\n              Refresh Page\n            </button>\n          </div>\n        </div>\n      )\n    }\n\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary","import React from 'react'\n\nconst LoadingScreen: React.FC = () => {\n  return (\n    <div className=\"fixed inset-0 bg-black z-50 flex items-center justify-center\">\n      <div className=\"text-center\">\n        <picture>\n          <source srcSet=\"/logo/candlefish_original.png\" type=\"image/webp\" />\n          <img\n            src=\"/logo/candlefish_original.png\"\n            alt=\"Candlefish AI Logo\"\n            className=\"w-auto h-48 max-w-32 mb-6 mx-auto object-contain animate-pulse\"\n          />\n        </picture>\n        <div className=\"text-sm text-gray-400 font-mono tracking-wider uppercase\">\n          Illuminating possibilities...\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default LoadingScreen","import React, { useEffect, useRef } from 'react'\n\ninterface Particle {\n  x: number\n  y: number\n  vx: number\n  vy: number\n  size: number\n  opacity: number\n}\n\nconst ParticleBackground: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const animationFrameRef = useRef<number>()\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl')\n    if (!gl || !(gl instanceof WebGLRenderingContext)) {\n      console.warn('WebGL not supported, particles disabled')\n      return\n    }\n\n    // Resize canvas\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth\n      canvas.height = window.innerHeight\n      gl.viewport(0, 0, canvas.width, canvas.height)\n    }\n    resizeCanvas()\n    window.addEventListener('resize', resizeCanvas)\n\n    // Shader sources\n    const vertexShaderSource = `\n      attribute vec2 a_position;\n      attribute float a_size;\n      attribute float a_opacity;\n      \n      varying float v_opacity;\n      \n      void main() {\n        gl_Position = vec4(a_position, 0.0, 1.0);\n        gl_PointSize = a_size;\n        v_opacity = a_opacity;\n      }\n    `\n\n    const fragmentShaderSource = `\n      precision mediump float;\n      \n      varying float v_opacity;\n      \n      void main() {\n        vec2 coord = gl_PointCoord - vec2(0.5);\n        float distance = length(coord);\n        \n        if (distance > 0.5) {\n          discard;\n        }\n        \n        float alpha = 1.0 - smoothstep(0.0, 0.5, distance);\n        gl_FragColor = vec4(0.0, 0.808, 0.82, alpha * v_opacity * 0.3);\n      }\n    `\n\n    // Create shaders\n    const createShader = (type: number, source: string) => {\n      const shader = gl.createShader(type)\n      if (!shader) return null\n      gl.shaderSource(shader, source)\n      gl.compileShader(shader)\n      return shader\n    }\n\n    const vertexShader = createShader(gl.VERTEX_SHADER, vertexShaderSource)\n    const fragmentShader = createShader(gl.FRAGMENT_SHADER, fragmentShaderSource)\n    \n    if (!vertexShader || !fragmentShader) return\n\n    // Create program\n    const program = gl.createProgram()\n    if (!program) return\n    \n    gl.attachShader(program, vertexShader)\n    gl.attachShader(program, fragmentShader)\n    gl.linkProgram(program)\n\n    // Get attribute locations\n    const positionLocation = gl.getAttribLocation(program, 'a_position')\n    const sizeLocation = gl.getAttribLocation(program, 'a_size')\n    const opacityLocation = gl.getAttribLocation(program, 'a_opacity')\n\n    // Create particles\n    const particleCount = 30\n    const particles: Particle[] = []\n\n    for (let i = 0; i < particleCount; i++) {\n      particles.push({\n        x: Math.random() * 2 - 1,\n        y: Math.random() * 2 - 1,\n        vx: (Math.random() - 0.5) * 0.0005,\n        vy: (Math.random() - 0.5) * 0.0005,\n        size: Math.random() * 8 + 4,\n        opacity: Math.random() * 0.3 + 0.1\n      })\n    }\n\n    // Animation loop\n    const animate = () => {\n      if (!gl || gl.isContextLost()) return\n\n      gl.clearColor(0, 0, 0, 0)\n      gl.clear(gl.COLOR_BUFFER_BIT)\n\n      gl.useProgram(program)\n\n      particles.forEach(particle => {\n        particle.x += particle.vx\n        particle.y += particle.vy\n\n        if (particle.x > 1) particle.x = -1\n        if (particle.x < -1) particle.x = 1\n        if (particle.y > 1) particle.y = -1\n        if (particle.y < -1) particle.y = 1\n\n        gl.vertexAttrib2f(positionLocation, particle.x, particle.y)\n        gl.vertexAttrib1f(sizeLocation, particle.size)\n        gl.vertexAttrib1f(opacityLocation, particle.opacity)\n\n        gl.drawArrays(gl.POINTS, 0, 1)\n      })\n\n      animationFrameRef.current = requestAnimationFrame(animate)\n    }\n\n    gl.enable(gl.BLEND)\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n\n    animate()\n\n    return () => {\n      window.removeEventListener('resize', resizeCanvas)\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current)\n      }\n    }\n  }, [])\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"fixed top-0 left-0 w-full h-full -z-10 opacity-10 pointer-events-none\"\n      id=\"particles-canvas\"\n    />\n  )\n}\n\nexport default ParticleBackground","import React, { Suspense } from 'react'\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom'\nimport ErrorBoundary from './components/ErrorBoundary'\nimport LoadingScreen from './components/LoadingScreen'\nimport ParticleBackground from './components/ParticleBackground'\n\n// Lazy load pages for code splitting\nconst HomePage = React.lazy(() => import('./pages/HomePage'))\nconst NotFoundPage = React.lazy(() => import('./pages/NotFoundPage'))\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <Router>\n        <div className=\"relative min-h-screen bg-black text-white overflow-x-hidden\">\n          {/* WebGL Particle Background */}\n          <ParticleBackground />\n          \n          <Suspense fallback={<LoadingScreen />}>\n            <Routes>\n              <Route path=\"/\" element={<HomePage />} />\n              <Route path=\"*\" element={<NotFoundPage />} />\n            </Routes>\n          </Suspense>\n        </div>\n      </Router>\n    </ErrorBoundary>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\nimport './index.css'\n\n// Performance monitoring\nconst startTime = performance.now()\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)\n\n// Log performance metrics\nif (typeof window !== 'undefined') {\n  window.addEventListener('load', () => {\n    const loadTime = performance.now() - startTime\n    console.log(`App loaded in ${loadTime.toFixed(2)}ms`)\n  })\n}"],"file":"assets/index-uUz3iQtS.js"}
