// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and authorization
model User {
  id            String      @id @default(cuid())
  email         String      @unique
  name          String?
  role          UserRole    @default(VIEWER)
  passwordHash  String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  buyers        Buyer[]
  activities    Activity[]
  comments      Comment[]
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
  BUYER
}

// Room categories for organizing items
model Room {
  id            String      @id @default(cuid())
  name          String      @unique
  floor         Int         @default(1)
  description   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  items         Item[]
}

// Categories for item classification
model Category {
  id            String      @id @default(cuid())
  name          String      @unique
  description   String?
  colorCode     String?     // For UI display
  icon          String?     // Lucide icon name
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  items         Item[]
}

// Main inventory item model
model Item {
  id                    String          @id @default(cuid())
  name                  String
  description           String?
  roomId                String
  categoryId            String
  status                ItemStatus      @default(UNSURE)

  // Pricing information
  askingPrice           Decimal?        @db.Decimal(10, 2)
  designerInvoicePrice  Decimal?        @db.Decimal(10, 2)
  originalPrice         Decimal?        @db.Decimal(10, 2)
  currentValue          Decimal?        @db.Decimal(10, 2)

  // Item details
  quantity              Int             @default(1)
  isFixture             Boolean         @default(false)
  source                String?
  brand                 String?
  model                 String?
  serialNumber          String?
  purchaseDate          DateTime?
  warrantyExpiry        DateTime?

  // Condition and notes
  condition             ItemCondition   @default(GOOD)
  notes                 String?

  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  // Relations
  room                  Room            @relation(fields: [roomId], references: [id])
  category              Category        @relation(fields: [categoryId], references: [id])
  invoices              InvoiceItem[]
  photos                Photo[]
  buyerSelections       BuyerSelection[]
  comments              Comment[]
  activities            Activity[]
  tags                  ItemTag[]

  @@index([roomId])
  @@index([categoryId])
  @@index([status])
}

enum ItemStatus {
  SELL
  KEEP
  UNSURE
  SOLD
  DONATED
}

enum ItemCondition {
  NEW
  EXCELLENT
  GOOD
  FAIR
  POOR
}

// Buyer profiles for tracking interested parties
model Buyer {
  id            String          @id @default(cuid())
  name          String
  email         String?         @unique
  phone         String?
  company       String?
  notes         String?
  userId        String?         // Link to user account if they have one
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  user          User?           @relation(fields: [userId], references: [id])
  selections    BuyerSelection[]
}

// Many-to-many relationship for buyer item selections
model BuyerSelection {
  id            String          @id @default(cuid())
  buyerId       String
  itemId        String
  status        SelectionStatus @default(INTERESTED)
  offeredPrice  Decimal?        @db.Decimal(10, 2)
  notes         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  buyer         Buyer           @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  item          Item            @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([buyerId, itemId])
  @@index([buyerId])
  @@index([itemId])
}

enum SelectionStatus {
  INTERESTED
  NEGOTIATING
  CONFIRMED
  PURCHASED
  WITHDRAWN
}

// Invoice management
model Invoice {
  id            String          @id @default(cuid())
  invoiceNumber String          @unique
  vendor        String
  date          DateTime
  totalAmount   Decimal         @db.Decimal(10, 2)
  taxAmount     Decimal?        @db.Decimal(10, 2)
  fileUrl       String?         // S3 URL for uploaded invoice
  notes         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  items         InvoiceItem[]
}

// Many-to-many relationship for items and invoices
model InvoiceItem {
  id            String      @id @default(cuid())
  invoiceId     String
  itemId        String
  amount        Decimal     @db.Decimal(10, 2)
  quantity      Int         @default(1)

  invoice       Invoice     @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  item          Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([invoiceId, itemId])
  @@index([invoiceId])
  @@index([itemId])
}

// Photos for items
model Photo {
  id            String      @id @default(cuid())
  itemId        String
  url           String      // S3 URL
  thumbnailUrl  String?     // S3 URL for thumbnail
  caption       String?
  isPrimary     Boolean     @default(false)
  createdAt     DateTime    @default(now())

  item          Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([itemId])
}

// Comments on items
model Comment {
  id            String      @id @default(cuid())
  itemId        String
  userId        String
  content       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  item          Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id])

  @@index([itemId])
  @@index([userId])
}

// Activity log for tracking changes
model Activity {
  id            String      @id @default(cuid())
  itemId        String?
  userId        String
  action        String
  details       Json?
  createdAt     DateTime    @default(now())

  item          Item?       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id])

  @@index([itemId])
  @@index([userId])
  @@index([createdAt])
}

// Tags for flexible categorization
model Tag {
  id            String      @id @default(cuid())
  name          String      @unique
  color         String?
  createdAt     DateTime    @default(now())

  items         ItemTag[]
}

// Many-to-many relationship for item tags
model ItemTag {
  id            String      @id @default(cuid())
  itemId        String
  tagId         String

  item          Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  tag           Tag         @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([itemId, tagId])
  @@index([itemId])
  @@index([tagId])
}

// Special model for plants (Bloom & Flourish inventory)
model Plant {
  id            String      @id @default(cuid())
  name          String
  quantity      Int         @default(1)
  unitPrice     Decimal     @db.Decimal(10, 2)
  lineTotal     Decimal     @db.Decimal(10, 2)
  location      PlantLocation @default(INDOOR)
  category      String?
  placement     String?
  roomName      String?
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([location])
}

enum PlantLocation {
  INDOOR
  OUTDOOR
}
