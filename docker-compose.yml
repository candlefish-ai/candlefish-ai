# Candlefish AI Monorepo - Development Environment
# Use this for local development with hot reloading
version: '3.8'

services:
  # Core Services
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: candlefish-postgres-dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-candlefish_dev}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - candlefish

  redis:
    image: redis:7-alpine
    container_name: candlefish-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - candlefish

  # RTPM API Service
  rtpm-api:
    build:
      context: ./apps/rtpm-api
      dockerfile: Dockerfile
      target: development
    container_name: candlefish-rtpm-api-dev
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-candlefish_dev}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_change_in_prod}
      NODE_ENV: development
    ports:
      - "8080:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./apps/rtpm-api:/app
      - /app/node_modules
    networks:
      - candlefish

  # NANDA Services
  nanda-api:
    build:
      context: ./apps/nanda-api
      dockerfile: Dockerfile
      target: development
    container_name: candlefish-nanda-api-dev
    environment:
      NODE_ENV: development
      PORT: 3000
      AWS_REGION: ${AWS_REGION:-us-east-1}
    ports:
      - "3000:3000"
    volumes:
      - ./apps/nanda-api:/app
      - /app/node_modules
    networks:
      - candlefish

  nanda-dashboard:
    build:
      context: ./apps/nanda-dashboard
      dockerfile: Dockerfile
      target: development
    container_name: candlefish-nanda-dashboard-dev
    environment:
      NODE_ENV: development
      PORT: 3001
      VITE_API_URL: http://localhost:3000
    ports:
      - "3001:3001"
    depends_on:
      - nanda-api
    volumes:
      - ./apps/nanda-dashboard:/app
      - /app/node_modules
    networks:
      - candlefish

  # Temporal Platform
  temporal-server:
    build:
      context: ./candlefish-temporal-platform
      dockerfile: Dockerfile
      target: development
    container_name: candlefish-temporal-dev
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-candlefish_dev}
      NODE_ENV: development
    ports:
      - "7233:7233"
      - "8088:8088"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./candlefish-temporal-platform:/app
      - /app/node_modules
    networks:
      - candlefish

  # Main Website
  website:
    build:
      context: ./apps/website
      dockerfile: Dockerfile
      target: development
    container_name: candlefish-website-dev
    environment:
      NODE_ENV: development
      PORT: 3002
    ports:
      - "3002:3002"
    volumes:
      - ./apps/website:/app
      - /app/node_modules
    networks:
      - candlefish

  # Development Tools
  monitoring:
    profiles: ["monitoring"]
    image: grafana/grafana:latest
    container_name: candlefish-monitoring-dev
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3003:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - candlefish

volumes:
  postgres_data:
    name: candlefish_postgres_dev
  redis_data:
    name: candlefish_redis_dev
  grafana_data:
    name: candlefish_grafana_dev

networks:
  candlefish:
    name: candlefish-dev
    driver: bridge
