# Candlefish AI Agent Platform Architecture
# Build Custom with Selective Tray.ai Pattern Adoption
# Generated: August 2025

candlefish-agent-platform:

  # ============================================
  # LAYER 1: Conversation & Trigger Layer
  # ============================================
  trigger-layer:
    api-gateway:
      service: Kong on AWS API Gateway
      features:
        - Rate limiting
        - Authentication
        - Request transformation
        - Response caching
      endpoints:
        - /api/agent/invoke
        - /api/agent/status
        - /api/agent/history

    webhooks:
      service: Existing Otter Gateway
      integrations:
        - Slack commands
        - GitHub webhooks
        - Jira webhooks
        - Custom webhooks

    email:
      service: AWS SES integration
      features:
        - Inbound processing
        - Auto-response
        - Threading support

    mobile:
      service: React Native direct
      features:
        - Push notifications
        - In-app triggers
        - Offline queue

    web-forms:
      service: React components
      features:
        - Embedded widgets
        - Chat interfaces
        - Form submissions

  # ============================================
  # LAYER 2: Agent Orchestrator Layer
  # ============================================
  orchestrator:
    engine:
      service: Temporal.io
      features:
        - Workflow orchestration
        - State management
        - Retry logic
        - Compensation patterns
      config:
        max_workflow_duration: 24h
        max_retry_attempts: 3
        default_timeout: 5m

    llm-router:
      service: Custom TypeScript service
      location: /services/llm-orchestrator
      features:
        - Model selection logic
        - Cost optimization
        - Fallback routing
        - Load balancing

    models:
      primary:
        provider: Anthropic
        model: claude-opus-4.1-20250805
        use_cases:
          - Complex reasoning
          - Code generation
          - Analysis tasks

      secondary:
        provider: OpenAI
        model: gpt-4o
        use_cases:
          - Fallback
          - Specific capabilities
          - Cost optimization

      tertiary:
        provider: Together AI
        model: llama-3-70b
        use_cases:
          - High-volume tasks
          - Cost-sensitive operations
          - Open-source requirements

    fallback:
      service: Deterministic rule engine
      rules:
        - pattern: /^deploy/
          action: deployment-workflow
        - pattern: /^test/
          action: testing-workflow
        - pattern: /^analyze/
          action: analysis-workflow

  # ============================================
  # LAYER 3: Tool/Workflow Layer
  # ============================================
  tools:
    excel-transformer:
      description: Your core IP - Excel to modern app
      location: /services/excel-migration-engine
      capabilities:
        - Pattern recognition
        - Formula translation
        - Business logic extraction
        - UI generation
      performance:
        target_time: 5 minutes
        max_file_size: 100MB

    connectors:
      salesforce:
        type: Custom adapter
        location: /connectors/salesforce
        operations:
          - read_accounts
          - create_opportunity
          - update_contact
          - sync_data

      quickbooks:
        type: REST wrapper
        location: /connectors/quickbooks
        operations:
          - fetch_invoices
          - create_payment
          - sync_customers
          - generate_reports

      stripe:
        type: Official SDK
        version: ^12.0.0
        operations:
          - process_payment
          - create_subscription
          - manage_customers
          - handle_webhooks

      aws:
        type: Existing integration
        services:
          - S3
          - Lambda
          - DynamoDB
          - SES
          - Secrets Manager

      github:
        type: GraphQL client
        operations:
          - create_pr
          - manage_issues
          - trigger_workflow
          - fetch_code

      slack:
        type: WebAPI SDK
        operations:
          - send_message
          - create_channel
          - upload_file
          - interactive_messages

    internal-tools:
      deployment:
        location: /tools/deployment
        workflows:
          - blue_green_deploy
          - canary_release
          - rollback
          - health_check

      testing:
        location: /tools/testing
        workflows:
          - unit_test_suite
          - integration_test
          - load_test
          - security_scan

      monitoring:
        location: /tools/monitoring
        workflows:
          - metrics_collection
          - alert_management
          - log_aggregation
          - performance_tracking

  # ============================================
  # LAYER 4: Memory & Context Layer
  # ============================================
  memory:
    conversations:
      primary:
        service: PostgreSQL
        schema: conversations
        retention: 30 days
        features:
          - Full-text search
          - JSON storage
          - Partitioning

      cache:
        service: Redis
        ttl: 24 hours
        features:
          - Session state
          - Recent context
          - Quick lookups

    vectors:
      service: pgvector
      dimensions: 1536
      indexes:
        - HNSW
        - IVFFlat
      use_cases:
        - Semantic search
        - Similar documents
        - Context retrieval

    documents:
      storage:
        service: S3
        bucket: candlefish-documents
        encryption: AES-256

      cdn:
        service: CloudFront
        cache_control: max-age=31536000
        signed_urls: true

    audit-trail:
      service: PostgreSQL
      schema: audit_logs
      retention: 7 years
      compliance:
        - GDPR
        - SOC2
        - CCPA
      features:
        - Immutable logs
        - Cryptographic hashing
        - Timestamp verification

  # ============================================
  # LAYER 5: Governance & Control Layer
  # ============================================
  governance:
    rbac:
      service: Existing implementation
      enhancement_needed:
        - Fine-grained permissions
        - Dynamic roles
        - Attribute-based access
      roles:
        - admin: Full access
        - developer: Tool creation
        - operator: Workflow execution
        - viewer: Read-only access

    audit:
      service: PostgreSQL with immutable logs
      features:
        - Every action logged
        - User attribution
        - Change tracking
        - Compliance reports
      storage:
        - Hot: 90 days in PostgreSQL
        - Warm: 1 year in S3
        - Cold: 7 years in Glacier

    monitoring:
      metrics:
        service: Prometheus
        scrape_interval: 15s
        retention: 30d

      visualization:
        service: Grafana
        dashboards:
          - Agent performance
          - System health
          - Cost tracking
          - User analytics

      alerting:
        service: AlertManager
        channels:
          - Slack
          - PagerDuty
          - Email

    rate-limiting:
      service: Redis
      policies:
        - per_user: 100/minute
        - per_tenant: 1000/minute
        - per_endpoint: Variable

    cost-control:
      llm-usage:
        daily_budget: $500
        alert_threshold: 80%

      compute:
        auto_scaling_max: 10 nodes
        spot_instances: true

  # ============================================
  # LAYER 6: Deployment & Scaling Layer
  # ============================================
  deployment:
    compute:
      orchestration:
        service: AWS EKS
        version: "1.28"
        node_groups:
          - general: t3.medium (2-10 nodes)
          - compute: c5.xlarge (0-5 nodes)
          - memory: r5.large (0-3 nodes)

      serverless:
        service: AWS Lambda
        runtime: Node.js 20.x
        use_cases:
          - Webhook handlers
          - Async processing
          - Scheduled tasks

    edge:
      service: Cloudflare Workers
      locations: Global
      use_cases:
        - API caching
        - Request routing
        - Authentication
        - Rate limiting

    storage:
      database:
        primary:
          service: PostgreSQL
          version: "15"
          instance: db.r6g.xlarge
          storage: 500GB SSD
          backups: Daily, 30-day retention

        replicas:
          read_replicas: 2
          regions: [us-east-1, us-west-2]

      cache:
        service: Redis
        version: "7.0"
        instance: cache.t3.medium
        cluster_mode: true

      object_storage:
        service: S3
        storage_class:
          - Standard: Active data
          - Infrequent: Archives
          - Glacier: Long-term

    cdn:
      service: CloudFront
      origins:
        - S3: Static assets
        - ALB: Dynamic content
      behaviors:
        - path: /api/*
          cache: false
        - path: /static/*
          cache: max-age=31536000

    networking:
      vpc:
        cidr: 10.0.0.0/16
        availability_zones: 3
        subnets:
          - public: ALB, NAT Gateway
          - private: EKS, RDS, ElastiCache
          - database: RDS only

      security_groups:
        - web: 80, 443 from anywhere
        - api: 8080 from ALB
        - database: 5432 from private subnet

      load_balancing:
        service: AWS ALB
        features:
          - Path-based routing
          - SSL termination
          - Health checks
          - WebSocket support

  # ============================================
  # Implementation Phases
  # ============================================
  implementation:
    phase1_foundation:
      duration: 4 weeks
      deliverables:
        - API Gateway setup
        - Basic orchestrator
        - Core tool registry
        - PostgreSQL + Redis

    phase2_core_platform:
      duration: 4 weeks
      deliverables:
        - Temporal.io integration
        - LLM router service
        - 5 key connectors
        - Basic governance

    phase3_production:
      duration: 4 weeks
      deliverables:
        - Full monitoring
        - Security hardening
        - Auto-scaling
        - Documentation

    phase4_optimization:
      duration: 4 weeks
      deliverables:
        - Performance tuning
        - Cost optimization
        - Advanced features
        - Customer onboarding

  # ============================================
  # Cost Projections
  # ============================================
  costs:
    infrastructure:
      monthly:
        compute: $800
        storage: $200
        networking: $150
        monitoring: $50
        total: $1200

    services:
      llm_apis: $500/month
      temporal_cloud: $200/month
      monitoring: $100/month
      total: $800/month

    development:
      initial: $40000
      maintenance: $1000/month

    total_year_one: $56000
    savings_vs_trayai: $64000

  # ============================================
  # Performance Targets
  # ============================================
  performance:
    api_latency:
      p50: < 100ms
      p95: < 500ms
      p99: < 1000ms

    throughput:
      requests_per_second: 1000
      concurrent_workflows: 500
      concurrent_users: 1200

    availability:
      target: 99.9%
      max_downtime: 43min/month

    scalability:
      horizontal: 10x current load
      vertical: 4x current resources
      geographic: Multi-region ready

  # ============================================
  # Security Requirements
  # ============================================
  security:
    encryption:
      at_rest: AES-256
      in_transit: TLS 1.3
      key_management: AWS KMS

    authentication:
      methods:
        - JWT tokens
        - API keys
        - OAuth 2.0
        - SAML 2.0

    authorization:
      model: RBAC + ABAC
      enforcement: API Gateway + Service level

    compliance:
      standards:
        - SOC2 Type II
        - GDPR
        - CCPA
        - HIPAA ready

    monitoring:
      - Security events
      - Access logs
      - Threat detection
      - Vulnerability scanning
