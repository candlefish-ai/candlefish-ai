# Secure API Gateway Deployment with Pod Security Standards
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: promoteros-api
  labels:
    app: api-gateway
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      # SECURITY: Run as non-root user
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        seccompProfile:
          type: RuntimeDefault
      
      serviceAccountName: api-gateway
      
      # SECURITY: Use dedicated nodes for API workload
      nodeSelector:
        workload: api
      
      tolerations:
      - key: workload
        operator: Equal
        value: api
        effect: NoSchedule
      
      # HIGH AVAILABILITY: Spread pods across zones
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: api-gateway
      
      # HIGH AVAILABILITY: Anti-affinity to spread pods
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - api-gateway
            topologyKey: kubernetes.io/hostname
      
      # SECURITY: Init container to fetch secrets from AWS Secrets Manager
      initContainers:
      - name: secret-fetcher
        image: amazon/aws-cli:2.15.10
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
            - ALL
        command:
        - sh
        - -c
        - |
          set -e
          echo "Fetching JWT secret from AWS Secrets Manager..."
          aws secretsmanager get-secret-value \
            --secret-id promoteros/production/jwt \
            --query SecretString \
            --output text > /secrets/jwt.key
          
          echo "Fetching database credentials..."
          aws secretsmanager get-secret-value \
            --secret-id promoteros/production/database \
            --query SecretString \
            --output text > /secrets/db.json
          
          echo "Secrets fetched successfully"
        env:
        - name: AWS_REGION
          value: us-east-1
        - name: AWS_DEFAULT_REGION
          value: us-east-1
        volumeMounts:
        - name: secrets
          mountPath: /secrets
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      
      containers:
      - name: api-gateway
        image: 681214184463.dkr.ecr.us-east-1.amazonaws.com/promoteros/api-gateway:latest
        imagePullPolicy: IfNotPresent
        
        # SECURITY: Container security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE  # Only if binding to port < 1024
        
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8081
          name: health
          protocol: TCP
        
        env:
        - name: ENV
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: environment
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: api-config
              key: log_level
        - name: PORT
          value: "8080"
        - name: HEALTH_PORT
          value: "8081"
        - name: JWT_SECRET_FILE
          value: "/secrets/jwt.key"
        - name: DB_CREDENTIALS_FILE
          value: "/secrets/db.json"
        - name: REDIS_HOST
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: host
        - name: REDIS_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: redis-credentials
              key: auth_token
        - name: GOMAXPROCS
          value: "2"
        - name: GOMEMLIMIT
          value: "450MiB"
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
        
        # RELIABILITY: Proper health checks
        startupProbe:
          httpGet:
            path: /health/startup
            port: health
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
        
        livenessProbe:
          httpGet:
            path: /health/live
            port: health
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: health
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: secrets
          mountPath: /secrets
          readOnly: true
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
        
        # OBSERVABILITY: Lifecycle hooks for graceful shutdown
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]
      
      # SECURITY: Terminate pods after 60 seconds
      terminationGracePeriodSeconds: 60
      
      volumes:
      - name: config
        configMap:
          name: api-config
          defaultMode: 0444
      - name: secrets
        emptyDir:
          medium: Memory
          sizeLimit: 10Mi
      - name: tmp
        emptyDir:
          medium: Memory
          sizeLimit: 100Mi
      - name: cache
        emptyDir:
          medium: Memory
          sizeLimit: 100Mi

---
# ServiceAccount with IRSA for AWS access
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-gateway
  namespace: promoteros-api
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::681214184463:role/promoteros-api-gateway-role

---
# HorizontalPodAutoscaler for API Gateway
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-hpa
  namespace: promoteros-api
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "1000"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max