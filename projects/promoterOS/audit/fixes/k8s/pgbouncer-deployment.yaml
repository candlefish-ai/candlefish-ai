# PgBouncer Deployment - REMEDIATION CR-008
# Connection pooling for PostgreSQL to prevent database overwhelm

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pgbouncer-config
  namespace: promoteros-data
data:
  pgbouncer.ini: |
    [databases]
    promoteros = host=POSTGRES_HOST port=5432 dbname=promoteros auth_user=pgbouncer pool_mode=transaction max_db_connections=100

    [pgbouncer]
    listen_addr = 0.0.0.0
    listen_port = 5432
    auth_type = scram-sha-256
    auth_file = /etc/pgbouncer/userlist.txt
    admin_users = pgbouncer_admin
    stats_users = pgbouncer_stats

    # Pool configuration
    pool_mode = transaction
    max_client_conn = 1000
    default_pool_size = 25
    min_pool_size = 5
    reserve_pool_size = 5
    reserve_pool_timeout = 5
    max_db_connections = 100
    max_user_connections = 100

    # Timeouts
    server_lifetime = 3600
    server_idle_timeout = 600
    server_connect_timeout = 15
    server_login_retry = 15
    query_timeout = 0
    query_wait_timeout = 120
    client_idle_timeout = 0
    client_login_timeout = 60

    # TLS/SSL
    server_tls_sslmode = require
    server_tls_ca_file = /etc/pgbouncer/ca-cert.pem
    server_tls_protocols = TLSv1.2,TLSv1.3
    server_tls_ciphers = HIGH:!aNULL:!MD5

    # Logging
    log_connections = 1
    log_disconnections = 1
    log_pooler_errors = 1
    log_stats = 1
    stats_period = 60

    # Security
    ignore_startup_parameters = extra_float_digits,options
    disable_pqexec = 1

    # Performance
    pkt_buf = 4096
    listen_backlog = 128
    sbuf_loopcnt = 5
    tcp_defer_accept = 0
    tcp_socket_buffer = 0
    tcp_keepalive = 1
    tcp_keepcnt = 9
    tcp_keepidle = 7200
    tcp_keepintvl = 75

---
apiVersion: v1
kind: Secret
metadata:
  name: pgbouncer-secrets
  namespace: promoteros-data
type: Opaque
stringData:
  userlist.txt: |
    "pgbouncer" "SCRAM-SHA-256$4096:GENERATED_SALT$GENERATED_STORED_KEY:GENERATED_SERVER_KEY"
    "promoteros_app" "SCRAM-SHA-256$4096:GENERATED_SALT$GENERATED_STORED_KEY:GENERATED_SERVER_KEY"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pgbouncer-sa
  namespace: promoteros-data
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::681214184463:role/promoteros-pgbouncer-role

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgbouncer
  namespace: promoteros-data
  labels:
    app: pgbouncer
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: pgbouncer
  template:
    metadata:
      labels:
        app: pgbouncer
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9127"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: pgbouncer-sa

      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault

      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - pgbouncer
            topologyKey: kubernetes.io/hostname

      initContainers:
      # Fetch RDS endpoint and credentials from AWS Secrets Manager
      - name: fetch-rds-config
        image: amazon/aws-cli:2.13.0
        command:
        - sh
        - -c
        - |
          set -e
          echo "Fetching RDS configuration from AWS Secrets Manager..."

          # Get RDS connection details
          SECRET=$(aws secretsmanager get-secret-value \
            --secret-id promoteros/rds/connection \
            --query SecretString --output text)

          # Parse and create config
          echo "$SECRET" | jq -r '.host' > /shared/postgres_host
          echo "$SECRET" | jq -r '.password' > /shared/postgres_password

          # Generate pgbouncer auth file
          echo "Generating PgBouncer auth file..."
          python3 -c "
          import hashlib
          import hmac
          import base64
          import secrets

          def generate_scram_sha256(password):
              salt = secrets.token_bytes(16)
              iterations = 4096

              # Generate salted password
              salted_password = hashlib.pbkdf2_hmac('sha256',
                  password.encode('utf-8'), salt, iterations)

              # Generate keys
              client_key = hmac.new(salted_password, b'Client Key', hashlib.sha256).digest()
              stored_key = hashlib.sha256(client_key).digest()
              server_key = hmac.new(salted_password, b'Server Key', hashlib.sha256).digest()

              # Format for pgbouncer
              salt_b64 = base64.b64encode(salt).decode('ascii')
              stored_key_b64 = base64.b64encode(stored_key).decode('ascii')
              server_key_b64 = base64.b64encode(server_key).decode('ascii')

              return f'SCRAM-SHA-256\$4096:{salt_b64}\${stored_key_b64}:{server_key_b64}'

          import json
          with open('/shared/postgres_password', 'r') as f:
              password = f.read().strip()

          # Generate auth entries
          pgbouncer_hash = generate_scram_sha256('$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | head -c 32)')
          app_hash = generate_scram_sha256(password)

          with open('/shared/userlist.txt', 'w') as f:
              f.write(f'\"pgbouncer\" \"{pgbouncer_hash}\"\n')
              f.write(f'\"promoteros_app\" \"{app_hash}\"\n')
          "

          echo "Configuration fetched successfully"
        volumeMounts:
        - name: shared
          mountPath: /shared
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

      containers:
      - name: pgbouncer
        image: pgbouncer/pgbouncer:1.21.0-alpine
        imagePullPolicy: IfNotPresent

        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

        ports:
        - name: postgres
          containerPort: 5432
          protocol: TCP

        command:
        - sh
        - -c
        - |
          # Replace POSTGRES_HOST in config
          sed -i "s/POSTGRES_HOST/$(cat /shared/postgres_host)/g" /etc/pgbouncer/pgbouncer.ini

          # Copy userlist
          cp /shared/userlist.txt /etc/pgbouncer/userlist.txt
          chmod 600 /etc/pgbouncer/userlist.txt

          # Start pgbouncer
          exec pgbouncer /etc/pgbouncer/pgbouncer.ini

        volumeMounts:
        - name: pgbouncer-config
          mountPath: /etc/pgbouncer/pgbouncer.ini
          subPath: pgbouncer.ini
          readOnly: true
        - name: shared
          mountPath: /shared
          readOnly: true
        - name: run
          mountPath: /var/run/pgbouncer
        - name: tmp
          mountPath: /tmp

        livenessProbe:
          tcpSocket:
            port: postgres
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "echo 'SHOW POOLS;' | psql -h localhost -p 5432 -U pgbouncer_stats pgbouncer"
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "200m"

      # PgBouncer exporter for Prometheus metrics
      - name: pgbouncer-exporter
        image: prometheuscommunity/pgbouncer-exporter:v0.7.0
        imagePullPolicy: IfNotPresent

        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

        env:
        - name: PGBOUNCER_EXPORTER_HOST
          value: "127.0.0.1"
        - name: PGBOUNCER_EXPORTER_PORT
          value: "5432"
        - name: PGBOUNCER_EXPORTER_USER
          value: "pgbouncer_stats"
        - name: PGBOUNCER_EXPORTER_PASS
          valueFrom:
            secretKeyRef:
              name: pgbouncer-secrets
              key: stats_password

        ports:
        - name: metrics
          containerPort: 9127
          protocol: TCP

        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "64Mi"
            cpu: "50m"

      volumes:
      - name: pgbouncer-config
        configMap:
          name: pgbouncer-config
      - name: pgbouncer-secrets
        secret:
          secretName: pgbouncer-secrets
          defaultMode: 0600
      - name: shared
        emptyDir: {}
      - name: run
        emptyDir: {}
      - name: tmp
        emptyDir: {}

---
apiVersion: v1
kind: Service
metadata:
  name: pgbouncer
  namespace: promoteros-data
  labels:
    app: pgbouncer
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  type: ClusterIP
  selector:
    app: pgbouncer
  ports:
  - name: postgres
    port: 5432
    targetPort: postgres
    protocol: TCP
  sessionAffinity: None

---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: pgbouncer
  namespace: promoteros-data
  labels:
    app: pgbouncer
spec:
  selector:
    matchLabels:
      app: pgbouncer
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
