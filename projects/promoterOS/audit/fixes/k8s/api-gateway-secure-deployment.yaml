# Secure API Gateway Deployment - REMEDIATION CR-004, CR-005
# Hardened deployment with IRSA, security contexts, and secrets from AWS Secrets Manager

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-gateway-sa
  namespace: promoteros-api
  annotations:
    # IRSA - IAM Role for Service Account
    eks.amazonaws.com/role-arn: arn:aws:iam::681214184463:role/promoteros-api-gateway-role

---
# ConfigMap for non-sensitive configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-config
  namespace: promoteros-api
data:
  APP_ENV: "production"
  LOG_LEVEL: "info"
  SERVER_PORT: "8080"
  METRICS_PORT: "9090"
  # JWT configuration (non-sensitive)
  JWT_ALGORITHM: "RS256"
  JWT_ISSUER: "https://api.promoteros.candlefish.ai"
  JWT_AUDIENCE: "promoteros-api"
  JWT_EXPIRY: "86400"  # 24 hours
  # Rate limiting
  RATE_LIMIT_REQUESTS: "100"
  RATE_LIMIT_WINDOW: "60s"
  # Circuit breaker settings
  CIRCUIT_BREAKER_THRESHOLD: "0.6"
  CIRCUIT_BREAKER_TIMEOUT: "30s"
  CIRCUIT_BREAKER_MAX_REQUESTS: "3"

---
# SecretProviderClass for AWS Secrets Manager integration
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: api-gateway-secrets
  namespace: promoteros-api
spec:
  provider: aws
  parameters:
    objects: |
      - objectName: "promoteros/jwt-private-key"
        objectType: "secretsmanager"
        objectAlias: "jwt-private-key"
      - objectName: "promoteros/jwt-public-key"
        objectType: "secretsmanager"
        objectAlias: "jwt-public-key"
      - objectName: "promoteros/api-keys"
        objectType: "secretsmanager"
        objectAlias: "api-keys"
      - objectName: "promoteros/tiktok-credentials"
        objectType: "secretsmanager"
        objectAlias: "tiktok-creds"
      - objectName: "promoteros/stripe-keys"
        objectType: "secretsmanager"
        objectAlias: "stripe-keys"
      - objectName: "promoteros/rds/connection"
        objectType: "secretsmanager"
        objectAlias: "db-connection"
      - objectName: "promoteros/redis/connection"
        objectType: "secretsmanager"
        objectAlias: "redis-connection"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: promoteros-api
  labels:
    app: api-gateway
    version: v1
    security: "hardened"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: api-gateway-sa

      # Pod-level security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault

      # Anti-affinity for HA
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - api-gateway
              topologyKey: kubernetes.io/hostname

      # Init container to verify secrets are mounted
      initContainers:
      - name: verify-secrets
        image: busybox:1.36
        command: ['sh', '-c']
        args:
        - |
          echo "Verifying secrets are mounted..."
          if [ ! -f /secrets/jwt-private-key ]; then
            echo "JWT private key not found!"
            exit 1
          fi
          if [ ! -f /secrets/db-connection ]; then
            echo "Database connection not found!"
            exit 1
          fi
          echo "All secrets verified successfully"
        volumeMounts:
        - name: secrets-store
          mountPath: /secrets
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL

      containers:
      - name: api-gateway
        image: 681214184463.dkr.ecr.us-east-1.amazonaws.com/promoteros/api-gateway:latest
        imagePullPolicy: Always

        # Container security context - CR-005
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE  # Only if binding to port < 1024

        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP

        # Environment variables from ConfigMap
        envFrom:
        - configMapRef:
            name: api-gateway-config

        # Mount secrets as files (more secure than env vars)
        volumeMounts:
        - name: secrets-store
          mountPath: /secrets
          readOnly: true
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache

        # Health checks
        livenessProbe:
          httpGet:
            path: /health/live
            port: http
            httpHeaders:
            - name: User-Agent
              value: Kubernetes-Liveness-Probe
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
            httpHeaders:
            - name: User-Agent
              value: Kubernetes-Readiness-Probe
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

        # Startup probe for slow starting containers
        startupProbe:
          httpGet:
            path: /health/startup
            port: http
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 30

        # Resource limits
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "2Gi"

        # Lifecycle hooks for graceful shutdown
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]

      # Volumes
      volumes:
      # AWS Secrets Manager CSI driver volume - CR-004
      - name: secrets-store
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: api-gateway-secrets
      # Writable volumes for read-only root filesystem
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: cache
        emptyDir:
          sizeLimit: 2Gi

      # Termination settings
      terminationGracePeriodSeconds: 30

      # DNS settings for better resolution
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0

---
# Service for API Gateway
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: promoteros-api
  labels:
    app: api-gateway
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-east-1:681214184463:certificate/promoteros-ssl"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
spec:
  type: ClusterIP
  selector:
    app: api-gateway
  ports:
  - name: http
    port: 8080
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  sessionAffinity: None

---
# HorizontalPodAutoscaler with proper configuration
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-hpa
  namespace: promoteros-api
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "1000"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 5
        periodSeconds: 60
      selectPolicy: Max
