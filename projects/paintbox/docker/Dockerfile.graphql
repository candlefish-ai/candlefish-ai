# Multi-stage build for Apollo GraphQL Federation
FROM node:20-alpine AS base

# Security: Install security updates
RUN apk add --no-cache curl dumb-init && rm -rf /var/cache/apk/*

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat python3 make g++ && rm -rf /var/cache/apk/*
WORKDIR /app

# Copy dependency files
COPY package.json package-lock.json ./
RUN npm ci --only=production --frozen-lockfile && npm cache clean --force

# Build stage
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Build arguments
ARG NODE_ENV=production
ARG DATABASE_URL
ARG APOLLO_GRAPH_REF
ARG APOLLO_KEY
ARG REDIS_URL
ARG AWS_REGION

# Set build environment
ENV NODE_ENV=$NODE_ENV
ENV DATABASE_URL=$DATABASE_URL
ENV APOLLO_GRAPH_REF=$APOLLO_GRAPH_REF
ENV APOLLO_KEY=$APOLLO_KEY
ENV REDIS_URL=$REDIS_URL
ENV AWS_REGION=$AWS_REGION

# Generate types and build
RUN npm run codegen && npm run build

# Production stage
FROM node:20-alpine AS production
WORKDIR /app

# Install runtime dependencies
RUN apk add --no-cache curl dumb-init && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 graphql --ingroup nodejs

# Set production environment
ENV NODE_ENV=production
ENV PORT=4000
ENV HOSTNAME="0.0.0.0"

# Copy built application
COPY --from=builder --chown=graphql:nodejs /app/dist ./dist
COPY --from=builder --chown=graphql:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=graphql:nodejs /app/package.json ./package.json

# Copy schema files if they exist
COPY --from=builder --chown=graphql:nodejs /app/schema.graphql ./schema.graphql 2>/dev/null || true
COPY --from=builder --chown=graphql:nodejs /app/lib/graphql/ ./lib/graphql/ 2>/dev/null || true

# Set permissions
RUN chown -R graphql:nodejs /app

USER graphql

EXPOSE 4000

# Enhanced health check for Apollo Federation
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:4000/.well-known/apollo/server-health || curl -f http://localhost:4000/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/index.js"]
