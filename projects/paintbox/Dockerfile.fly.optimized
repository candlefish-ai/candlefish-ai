# Multi-stage Dockerfile for Paintbox - Optimized for Production
# Security hardened, performance optimized, minimal attack surface

# Build stage
FROM node:18-alpine AS builder

# Install security updates
RUN apk update && apk upgrade && apk add --no-cache \
    python3 \
    make \
    g++ \
    libc6-compat

# Create app user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./
COPY next.config.js ./
COPY tailwind.config.js ./
COPY postcss.config.js ./

# Install dependencies with exact versions for security
RUN npm ci --only=production --ignore-scripts && npm cache clean --force

# Copy source code
COPY . .

# Set build-time environment variables
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Build the application
RUN npm run build

# Remove dev dependencies and unnecessary files
RUN npm prune --production
RUN rm -rf .git .github docs *.md

# Production stage
FROM node:18-alpine AS runner

# Install security updates and runtime dependencies
RUN apk update && apk upgrade && apk add --no-cache \
    dumb-init \
    curl \
    ca-certificates \
    postgresql-client \
    redis-tools

# Create app user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# Set working directory
WORKDIR /app

# Set production environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=8080

# Copy built application from builder stage
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./
COPY --from=builder --chown=nextjs:nodejs /app/next.config.js ./
COPY --from=builder --chown=nextjs:nodejs /app/server.js ./
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules

# Copy health check and startup scripts
COPY --chown=nextjs:nodejs scripts/health-check.sh ./health-check.sh
COPY --chown=nextjs:nodejs scripts/startup.sh ./startup.sh

# Make scripts executable
RUN chmod +x ./health-check.sh ./startup.sh

# Create necessary directories with correct permissions
RUN mkdir -p /data && chown nextjs:nodejs /data
RUN mkdir -p /tmp && chown nextjs:nodejs /tmp

# Security hardening
RUN rm -rf /usr/share/man /tmp/* /var/cache/apk/* /root/.npm
RUN find /app -type f -name "*.md" -delete
RUN find /app -type f -name "*.txt" -not -name "package*.json" -delete

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ./health-check.sh http://localhost:8080 5 || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Start the application
CMD ["./startup.sh"]
