/**
 * Professional PDF Estimate Template
 * React PDF component for generating BART estimator PDFs
 * Supports Good/Better/Best pricing tiers and Company Cam integration
 */\n\nimport React from 'react';\nimport { Document, Page, View, Text, Image, StyleSheet, Font } from '@react-pdf/renderer';\nimport { EstimateData, PricingTier } from '../excel-engine/types';\n\n// Register fonts\nFont.register({\n  family: 'Roboto',\n  fonts: [\n    { src: 'https://fonts.gstatic.com/s/roboto/v27/KFOmCnqEu92Fr1Mu4mxK.woff2', fontWeight: 400 },\n    { src: 'https://fonts.gstatic.com/s/roboto/v27/KFOlCnqEu92Fr1MmWUlfBBc4.woff2', fontWeight: 700 },\n  ],\n});\n\n// PDF Styles\nconst styles = StyleSheet.create({\n  page: {\n    fontFamily: 'Roboto',\n    fontSize: 10,\n    paddingTop: 35,\n    paddingLeft: 35,\n    paddingRight: 35,\n    paddingBottom: 65,\n    backgroundColor: '#ffffff',\n  },\n  header: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 30,\n    borderBottomWidth: 2,\n    borderBottomColor: '#2563eb',\n    paddingBottom: 20,\n  },\n  logo: {\n    width: 120,\n    height: 40,\n  },\n  companyInfo: {\n    textAlign: 'right',\n    fontSize: 9,\n    color: '#374151',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 700,\n    color: '#1f2937',\n    marginBottom: 10,\n  },\n  subtitle: {\n    fontSize: 12,\n    color: '#6b7280',\n    marginBottom: 20,\n  },\n  section: {\n    marginBottom: 20,\n  },\n  sectionTitle: {\n    fontSize: 14,\n    fontWeight: 700,\n    color: '#1f2937',\n    marginBottom: 10,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e5e7eb',\n    paddingBottom: 5,\n  },\n  row: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingVertical: 5,\n    borderBottomWidth: 0.5,\n    borderBottomColor: '#f3f4f6',\n  },\n  column: {\n    flexDirection: 'column',\n  },\n  label: {\n    fontSize: 9,\n    color: '#6b7280',\n    fontWeight: 600,\n  },\n  value: {\n    fontSize: 10,\n    color: '#374151',\n    marginTop: 2,\n  },\n  table: {\n    display: 'table',\n    width: '100%',\n    borderStyle: 'solid',\n    borderWidth: 1,\n    borderColor: '#e5e7eb',\n  },\n  tableRow: {\n    margin: 0,\n    flexDirection: 'row',\n    borderBottomWidth: 1,\n    borderBottomColor: '#f3f4f6',\n  },\n  tableHeader: {\n    backgroundColor: '#f9fafb',\n    fontWeight: 700,\n  },\n  tableCell: {\n    margin: 0,\n    padding: 8,\n    borderRightWidth: 1,\n    borderRightColor: '#e5e7eb',\n    fontSize: 9,\n    textAlign: 'left',\n  },\n  tableCellNumber: {\n    textAlign: 'right',\n  },\n  pricingTier: {\n    padding: 15,\n    marginBottom: 15,\n    borderRadius: 8,\n    borderWidth: 2,\n  },\n  pricingTierGood: {\n    backgroundColor: '#f0f9ff',\n    borderColor: '#0ea5e9',\n  },\n  pricingTierBetter: {\n    backgroundColor: '#f0fdf4',\n    borderColor: '#22c55e',\n  },\n  pricingTierBest: {\n    backgroundColor: '#fefce8',\n    borderColor: '#eab308',\n  },\n  pricingTitle: {\n    fontSize: 16,\n    fontWeight: 700,\n    marginBottom: 8,\n  },\n  pricingPrice: {\n    fontSize: 20,\n    fontWeight: 700,\n    marginBottom: 10,\n  },\n  pricingFeature: {\n    fontSize: 9,\n    marginBottom: 3,\n    paddingLeft: 15,\n  },\n  totalSection: {\n    marginTop: 30,\n    padding: 20,\n    backgroundColor: '#f9fafb',\n    borderRadius: 8,\n  },\n  totalRow: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n  },\n  totalLabel: {\n    fontSize: 12,\n    fontWeight: 600,\n    color: '#374151',\n  },\n  totalValue: {\n    fontSize: 12,\n    fontWeight: 700,\n    color: '#1f2937',\n  },\n  grandTotal: {\n    fontSize: 16,\n    fontWeight: 700,\n    color: '#1f2937',\n    borderTopWidth: 2,\n    borderTopColor: '#374151',\n    paddingTop: 8,\n    marginTop: 8,\n  },\n  footer: {\n    position: 'absolute',\n    bottom: 30,\n    left: 35,\n    right: 35,\n    textAlign: 'center',\n    fontSize: 8,\n    color: '#6b7280',\n    borderTopWidth: 1,\n    borderTopColor: '#e5e7eb',\n    paddingTop: 10,\n  },\n  pageNumber: {\n    position: 'absolute',\n    fontSize: 8,\n    bottom: 30,\n    left: 0,\n    right: 0,\n    textAlign: 'center',\n    color: '#9ca3af',\n  },\n  qrCode: {\n    width: 60,\n    height: 60,\n    marginLeft: 20,\n  },\n  workDescription: {\n    fontSize: 9,\n    lineHeight: 1.4,\n    color: '#4b5563',\n    marginBottom: 5,\n  },\n  photoContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginTop: 15,\n  },\n  photo: {\n    width: 80,\n    height: 60,\n    marginRight: 10,\n    marginBottom: 10,\n    borderRadius: 4,\n  },\n  warrantyBox: {\n    padding: 15,\n    backgroundColor: '#fef3c7',\n    borderRadius: 8,\n    marginTop: 20,\n    borderWidth: 1,\n    borderColor: '#f59e0b',\n  },\n  warrantyTitle: {\n    fontSize: 12,\n    fontWeight: 700,\n    color: '#92400e',\n    marginBottom: 8,\n  },\n  warrantyText: {\n    fontSize: 9,\n    color: '#92400e',\n    lineHeight: 1.3,\n  },\n});\n\ninterface EstimateTemplateProps {\n  estimate: EstimateData;\n  companyInfo: {\n    name: string;\n    address: string;\n    phone: string;\n    email: string;\n    website: string;\n    logo?: string;\n    license?: string;\n  };\n  photos?: Array<{\n    url: string;\n    description: string;\n    type: 'before' | 'during' | 'after';\n  }>;\n  qrCodeUrl?: string;\n}\n\nconst EstimateTemplate: React.FC<EstimateTemplateProps> = ({ \n  estimate, \n  companyInfo, \n  photos = [],\n  qrCodeUrl \n}) => {\n  const formatCurrency = (amount: number): string => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(amount);\n  };\n\n  const formatDate = (date: Date = new Date()): string => {\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  const getPricingTierStyle = (tier: PricingTier['name']) => {\n    switch (tier) {\n      case 'Good':\n        return styles.pricingTierGood;\n      case 'Better':\n        return styles.pricingTierBetter;\n      case 'Best':\n        return styles.pricingTierBest;\n      default:\n        return styles.pricingTierGood;\n    }\n  };\n\n  const getPricingTierColor = (tier: PricingTier['name']) => {\n    switch (tier) {\n      case 'Good':\n        return '#0ea5e9';\n      case 'Better':\n        return '#22c55e';\n      case 'Best':\n        return '#eab308';\n      default:\n        return '#0ea5e9';\n    }\n  };\n\n  return (\n    <Document>\n      <Page size=\"A4\" style={styles.page}>\n        {/* Header */}\n        <View style={styles.header}>\n          <View>\n            {companyInfo.logo && (\n              <Image src={companyInfo.logo} style={styles.logo} />\n            )}\n          </View>\n          <View style={styles.companyInfo}>\n            <Text style={{ fontSize: 12, fontWeight: 700, color: '#1f2937' }}>\n              {companyInfo.name}\n            </Text>\n            <Text>{companyInfo.address}</Text>\n            <Text>{companyInfo.phone}</Text>\n            <Text>{companyInfo.email}</Text>\n            <Text>{companyInfo.website}</Text>\n            {companyInfo.license && (\n              <Text style={{ marginTop: 5, fontSize: 8 }}>License: {companyInfo.license}</Text>\n            )}\n          </View>\n        </View>\n\n        {/* Title */}\n        <View style={styles.section}>\n          <Text style={styles.title}>Painting Estimate</Text>\n          <Text style={styles.subtitle}>Professional painting services estimate - {formatDate()}</Text>\n        </View>\n\n        {/* Client Information */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Client Information</Text>\n          <View style={styles.row}>\n            <View style={styles.column}>\n              <Text style={styles.label}>Name</Text>\n              <Text style={styles.value}>{estimate.clientInfo.name}</Text>\n            </View>\n            <View style={styles.column}>\n              <Text style={styles.label}>Phone</Text>\n              <Text style={styles.value}>{estimate.clientInfo.phone}</Text>\n            </View>\n          </View>\n          <View style={styles.row}>\n            <View style={styles.column}>\n              <Text style={styles.label}>Address</Text>\n              <Text style={styles.value}>{estimate.clientInfo.address}</Text>\n            </View>\n            <View style={styles.column}>\n              <Text style={styles.label}>Email</Text>\n              <Text style={styles.value}>{estimate.clientInfo.email}</Text>\n            </View>\n          </View>\n          <View style={styles.row}>\n            <View style={styles.column}>\n              <Text style={styles.label}>Project Type</Text>\n              <Text style={styles.value}>{estimate.clientInfo.projectType}</Text>\n            </View>\n            <View style={styles.column}>\n              <Text style={styles.label}>Estimate Date</Text>\n              <Text style={styles.value}>{formatDate()}</Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Work Description */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Scope of Work</Text>\n          {estimate.measurements.map((measurement, index) => (\n            <View key={index} style={{ marginBottom: 8 }}>\n              <Text style={styles.workDescription}>\n                • {measurement.description}\n                {measurement.dimensions && (\n                  ` - ${Object.entries(measurement.dimensions)\n                    .filter(([, value]) => value && value > 0)\n                    .map(([key, value]) => `${key}: ${value}`)\n                    .join(', ')}`\n                )}\n                {measurement.surface && ` (${measurement.surface})`}\n                {measurement.condition && ` - Condition: ${measurement.condition}`}\n              </Text>\n              {measurement.notes && (\n                <Text style={{ ...styles.workDescription, fontSize: 8, color: '#6b7280', marginLeft: 15 }}>\n                  Note: {measurement.notes}\n                </Text>\n              )}\n            </View>\n          ))}\n        </View>\n\n        {/* Photos */}\n        {photos.length > 0 && (\n          <View style={styles.section}>\n            <Text style={styles.sectionTitle}>Project Photos</Text>\n            <View style={styles.photoContainer}>\n              {photos.slice(0, 8).map((photo, index) => (\n                <View key={index}>\n                  <Image src={photo.url} style={styles.photo} />\n                  <Text style={{ fontSize: 7, textAlign: 'center', width: 80, color: '#6b7280' }}>\n                    {photo.description}\n                  </Text>\n                </View>\n              ))}\n            </View>\n          </View>\n        )}\n\n        {/* Pricing Tier */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Selected Package</Text>\n          <View style={[styles.pricingTier, getPricingTierStyle(estimate.pricing.tier.name)]}>\n            <Text style={[styles.pricingTitle, { color: getPricingTierColor(estimate.pricing.tier.name) }]}>\n              {estimate.pricing.tier.name} Package\n            </Text>\n            <Text style={[styles.pricingPrice, { color: getPricingTierColor(estimate.pricing.tier.name) }]}>\n              {formatCurrency(estimate.calculations.total)}\n            </Text>\n            <Text style={{ fontSize: 10, color: '#4b5563', marginBottom: 10 }}>Package includes:</Text>\n            {estimate.pricing.tier.features.map((feature, index) => (\n              <Text key={index} style={styles.pricingFeature}>• {feature}</Text>\n            ))}\n          </View>\n        </View>\n      </Page>\n\n      {/* Second Page - Detailed Breakdown */}\n      <Page size=\"A4\" style={styles.page}>\n        {/* Cost Breakdown */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Cost Breakdown</Text>\n          <View style={styles.table}>\n            <View style={[styles.tableRow, styles.tableHeader]}>\n              <Text style={[styles.tableCell, { width: '50%' }]}>Description</Text>\n              <Text style={[styles.tableCell, { width: '15%' }]}>Qty</Text>\n              <Text style={[styles.tableCell, { width: '15%' }]}>Rate</Text>\n              <Text style={[styles.tableCell, { width: '20%' }]}>Amount</Text>\n            </View>\n            \n            {/* Labor */}\n            <View style={styles.tableRow}>\n              <Text style={[styles.tableCell, { width: '50%' }]}>Professional Painting Labor</Text>\n              <Text style={[styles.tableCell, { width: '15%' }, styles.tableCellNumber]}>\n                {estimate.calculations.laborHours.toFixed(1)} hrs\n              </Text>\n              <Text style={[styles.tableCell, { width: '15%' }, styles.tableCellNumber]}>\n                {formatCurrency(estimate.pricing.laborRate)}\n              </Text>\n              <Text style={[styles.tableCell, { width: '20%' }, styles.tableCellNumber]}>\n                {formatCurrency(estimate.calculations.laborHours * estimate.pricing.laborRate)}\n              </Text>\n            </View>\n            \n            {/* Materials */}\n            <View style={styles.tableRow}>\n              <Text style={[styles.tableCell, { width: '50%' }]}>Premium Paint & Materials</Text>\n              <Text style={[styles.tableCell, { width: '15%' }, styles.tableCellNumber]}>\n                {estimate.calculations.paintGallons.toFixed(1)} gal\n              </Text>\n              <Text style={[styles.tableCell, { width: '15%' }, styles.tableCellNumber]}>\n                {formatCurrency(estimate.pricing.paintPrice)}\n              </Text>\n              <Text style={[styles.tableCell, { width: '20%' }, styles.tableCellNumber]}>\n                {formatCurrency(estimate.calculations.paintGallons * estimate.pricing.paintPrice)}\n              </Text>\n            </View>\n            \n            {/* Additional items based on measurements */}\n            {estimate.measurements.map((measurement, index) => {\n              if (measurement.type === 'exterior' && measurement.description.includes('prep')) {\n                return (\n                  <View key={index} style={styles.tableRow}>\n                    <Text style={[styles.tableCell, { width: '50%' }]}>Surface Preparation</Text>\n                    <Text style={[styles.tableCell, { width: '15%' }, styles.tableCellNumber]}>1</Text>\n                    <Text style={[styles.tableCell, { width: '15%' }, styles.tableCellNumber]}>Included</Text>\n                    <Text style={[styles.tableCell, { width: '20%' }, styles.tableCellNumber]}>Included</Text>\n                  </View>\n                );\n              }\n              return null;\n            })}\n          </View>\n        </View>\n\n        {/* Total Section */}\n        <View style={styles.totalSection}>\n          <View style={styles.totalRow}>\n            <Text style={styles.totalLabel}>Subtotal</Text>\n            <Text style={styles.totalValue}>{formatCurrency(estimate.calculations.subtotal)}</Text>\n          </View>\n          <View style={styles.totalRow}>\n            <Text style={styles.totalLabel}>Tax ({((estimate.calculations.tax / estimate.calculations.subtotal) * 100).toFixed(1)}%)</Text>\n            <Text style={styles.totalValue}>{formatCurrency(estimate.calculations.tax)}</Text>\n          </View>\n          <View style={[styles.totalRow, styles.grandTotal]}>\n            <Text style={[styles.totalLabel, { fontSize: 16 }]}>Total Investment</Text>\n            <Text style={[styles.totalValue, { fontSize: 16 }]}>{formatCurrency(estimate.calculations.total)}</Text>\n          </View>\n        </View>\n\n        {/* Warranty Information */}\n        <View style={styles.warrantyBox}>\n          <Text style={styles.warrantyTitle}>🛡️ Our Guarantee</Text>\n          <Text style={styles.warrantyText}>\n            We stand behind our work with a comprehensive warranty:\n          </Text>\n          <Text style={[styles.warrantyText, { marginTop: 5, marginLeft: 10 }]}>• 2-year warranty on all exterior painting</Text>\n          <Text style={[styles.warrantyText, { marginLeft: 10 }]}>• 3-year warranty on all interior painting</Text>\n          <Text style={[styles.warrantyText, { marginLeft: 10 }]}>• Lifetime warranty on craftsmanship</Text>\n          <Text style={[styles.warrantyText, { marginLeft: 10 }]}>• 100% satisfaction guarantee</Text>\n        </View>\n\n        {/* Terms and Conditions */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Terms & Conditions</Text>\n          <View style={{ fontSize: 8, lineHeight: 1.3, color: '#4b5563' }}>\n            <Text>• Estimate valid for 30 days from date of issue</Text>\n            <Text>• 50% deposit required to begin work, balance due upon completion</Text>\n            <Text>• Work to be completed according to industry standards</Text>\n            <Text>• Color changes after work begins may incur additional charges</Text>\n            <Text>• Weather conditions may affect exterior work scheduling</Text>\n            <Text>• Client responsible for moving furniture and personal items</Text>\n            <Text>• Additional costs may apply for extra prep work not included in original scope</Text>\n          </View>\n        </View>\n\n        {/* Footer with QR Code */}\n        <View style={styles.footer}>\n          <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center' }}>\n            <View>\n              <Text style={{ fontSize: 10, fontWeight: 700, color: '#1f2937' }}>Ready to get started?</Text>\n              <Text>Call us at {companyInfo.phone} or visit {companyInfo.website}</Text>\n              <Text>Thank you for choosing {companyInfo.name} for your painting needs!</Text>\n            </View>\n            {qrCodeUrl && (\n              <View style={{ alignItems: 'center' }}>\n                <Image src={qrCodeUrl} style={styles.qrCode} />\n                <Text style={{ fontSize: 7, marginTop: 5 }}>Scan to view online</Text>\n              </View>\n            )}\n          </View>\n        </View>\n\n        {/* Page Numbers */}\n        <Text style={styles.pageNumber} render={({ pageNumber, totalPages }) => (\n          `Page ${pageNumber} of ${totalPages}`\n        )} fixed />\n      </Page>\n    </Document>\n  );\n};\n\nexport default EstimateTemplate;
