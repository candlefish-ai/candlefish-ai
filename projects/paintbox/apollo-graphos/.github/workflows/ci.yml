name: Continuous Integration

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

env:
  NODE_VERSION: 18
  DOCKER_BUILDKIT: 1

jobs:
  # Quality checks and testing
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          node_modules
          */node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # Frontend tests
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Lint frontend
      working-directory: ./frontend
      run: npm run lint

    - name: Type check frontend
      working-directory: ./frontend
      run: npm run typecheck

    - name: Test frontend
      working-directory: ./frontend
      run: npm run test:coverage

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    # Backend services tests
    - name: Test estimates subgraph
      working-directory: ./subgraph-estimates
      run: |
        npm ci
        npm test

    - name: Test customers subgraph
      working-directory: ./subgraph-customers
      run: |
        npm ci
        npm test

    # GraphQL schema validation
    - name: Install Rover CLI
      run: |
        curl -sSL https://rover.apollo.dev/nix/latest | sh
        echo "$HOME/.rover/bin" >> $GITHUB_PATH

    - name: Validate GraphQL schemas
      env:
        APOLLO_KEY: ${{ secrets.APOLLO_KEY }}
      run: |
        rover subgraph check paintbox@main \
          --schema ./subgraph-estimates/schema.graphql \
          --name estimates

        rover subgraph check paintbox@main \
          --schema ./subgraph-customers/schema.graphql \
          --name customers

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Audit npm dependencies
      working-directory: ./frontend
      run: |
        npm audit --audit-level high

    - name: Audit backend dependencies
      working-directory: ./subgraph-estimates
      run: |
        npm audit --audit-level high

  # Docker builds
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [quality, security]

    strategy:
      matrix:
        service: [estimates, customers, projects, integrations, router, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: paintbox/${{ matrix.service }}-subgraph
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./subgraph-${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: paintbox_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d

    - name: Wait for services to be ready
      run: |
        timeout 60s bash -c 'until curl -f http://localhost:4100/health; do sleep 2; done'

    - name: Run integration tests
      working-directory: ./frontend
      run: npm run test:integration

    - name: Run E2E tests
      working-directory: ./frontend
      run: npm run test:e2e

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: ./frontend/test-results/

    - name: Cleanup
      if: always()
      run: docker-compose down
