{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(pip3 install:*)",
      "Bash(python3:*)",
      "Bash(npx create-next-app:*)",
      "Bash(rm:*)",
      "Bash(mv:*)",
      "Bash(npm install:*)",
      "Bash(mkdir:*)",
      "Bash(curl:*)",
      "Bash(cat:*)",
      "mcp__context7__get-library-docs",
      "Bash(pkill:*)",
      "Bash(find:*)",
      "Bash(npm run dev:*)",
      "Bash(grep:*)",
      "Bash(chmod:*)",
      "Bash(ls:*)",
      "Bash(npx ts-node:*)",
      "Bash(infisical login:*)",
      "Bash(infisical run:*)",
      "Bash(infisical secrets:*)",
      "Bash(infisical:*)",
      "Bash(INFISICAL_DISABLE_UPDATE_CHECK=1 infisical secrets)",
      "Bash(npm run test:companycam:*)",
      "Bash(node:*)",
      "Bash(kill:*)",
      "Bash(cp:*)",
      "Bash(npx tsx:*)",
      "Bash(npm run test:*)",
      "Bash(npm test:*)",
      "Bash(source:*)",
      "Bash(paintbox-test-agents)",
      "WebFetch(domain:localhost)",
      "Bash(npm run build:*)",
      "Bash(gh pr list:*)",
      "Bash(npm run lint:*)",
      "Bash(vercel:*)",
      "Bash(next build:*)",
      "Bash(./build-nextjs-only.sh:*)",
      "Bash(npx vercel:*)",
      "Bash(open:*)",
      "Bash(npx tsc:*)",
      "Bash(timeout 5 npx tsx server/websocket-server.ts)",
      "Bash(brew tap:*)",
      "Bash(brew install:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(touch:*)",
      "mcp__context7__resolve-library-id",
      "Bash(npm run deploy:render:*)",
      "Bash(npm run deploy:secrets:*)",
      "Bash(npm ls:*)",
      "Bash(npm uninstall:*)",
      "Bash(npx prettier:*)",
      "Bash(true)",
      "Bash(npm run type-check:*)",
      "Bash(npm run:*)",
      "Bash(./deploy-to-render-direct.sh)",
      "Bash(git reset:*)",
      "Bash(CLAUDE.md )",
      "Bash(README.md )",
      "Bash(RENDER_DEPLOYMENT_GUIDE.md )",
      "Bash(PAINTBOX_COMPLETE.md )",
      "Bash(DEPLOYMENT_SCRIPTS_SUMMARY.md )",
      "Bash(components/workflow/ClientInfoFormEnhanced.tsx )",
      "Bash(components/workflow/ReviewCalculations.tsx )",
      "Bash(package.json )",
      "Bash(tsconfig.json )",
      "Bash(prisma/schema.prisma )",
      "Bash(deploy-to-render-direct.sh:*)",
      "Bash(scripts/deploy-render-comprehensive.sh:*)",
      "Bash(scripts/create-aws-secret.js:*)",
      "Bash(scripts/update-aws-secret.js:*)",
      "Bash(scripts/fetch-aws-secrets.js:*)",
      "Bash(scripts/monitor-render-deployment.js:*)",
      "Bash(scripts/health-check-render.js:*)",
      "Bash(scripts/validate-render-config.js:*)",
      "Bash(render.yaml )",
      "Bash(Dockerfile )",
      "Bash(.env.render )",
      "Bash(lib/services/secrets-manager.ts )",
      "Bash(lib/config/env.ts)",
      "Bash(README.md )",
      "Bash(RENDER_DEPLOYMENT_GUIDE.md )",
      "Bash(PAINTBOX_COMPLETE.md )",
      "Bash(DEPLOYMENT_SCRIPTS_SUMMARY.md )",
      "Bash(components/workflow/ClientInfoFormEnhanced.tsx )",
      "Bash(components/workflow/ReviewCalculations.tsx )",
      "Bash(package.json )",
      "Bash(tsconfig.json )",
      "Bash(prisma/schema.prisma )",
      "Bash(render.yaml )",
      "Bash(Dockerfile )",
      "Bash(lib/services/secrets-manager.ts )",
      "Bash(git push:*)",
      "Bash(git rm:*)",
      "Bash(git fetch:*)",
      "Bash(git checkout:*)",
      "Bash(git stash:*)",
      "Bash(git cherry-pick:*)",
      "Bash(gh pr create:*)",
      "Bash(gh pr view:*)",
      "Bash(git pull:*)",
      "Bash(./scripts/deploy-render-comprehensive.sh:*)",
      "Bash(git merge:*)",
      "Bash(npx prisma generate:*)",
      "Bash(render:*)",
      "Bash(./deploy-to-render-now.sh)",
      "Bash(./deploy-manual-render.sh:*)",
      "Bash(true)",
      "Bash(aws secretsmanager list-secrets:*)",
      "Bash(aws secretsmanager get-secret-value:*)",
      "Bash(./check-deployment.sh)",
      "Bash(./diagnose-render-issue.sh:*)",
      "Bash(./deploy-netlify.sh)",
      "Bash(netlify:*)",
      "Bash(./deploy-railway-aws.sh)",
      "Bash(npm start:*)",
      "Bash(./deploy-railway-direct.sh:*)",
      "Bash(aws secretsmanager create-secret:*)",
      "Bash(aws secretsmanager put-secret-value:*)",
      "Bash(railway link:*)",
      "Bash(railway up:*)",
      "Bash(railway open:*)",
      "Bash(./deploy-railway-now.sh)",
      "Bash(git init:*)",
      "Bash(gh repo create:*)",
      "Bash(export RAILWAY_PROJECT_ID=5ca6d7c2-e4a7-48c7-ae63-c54ac13c66f6)",
      "Bash(railway whoami:*)",
      "Bash(./test-full-stack.sh:*)",
      "Bash(cflist:*)",
      "Bash(cfpaintbox:*)",
      "Bash(cfproject:*)",
      "Bash(NODE_ENV=development npm start)",
      "Bash(PORT=3002 NODE_ENV=development npm start)",
      "Bash(./deploy-paintbox-fullauto.sh:*)",
      "Bash(./deploy-paintbox-direct.sh:*)",
      "Bash(./test-integration-production.sh:*)",
      "Bash(railway status:*)",
      "Bash(./.github/scripts/setup-claude-review.sh:*)",
      "Bash(./deploy-to-netlify-final.sh:*)",
      "Bash(# Get AWS account ID\nAWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)\nROLE_NAME=\"\"github-actions-claude-review\"\"\nGITHUB_REPO=\"\"aspenas/candlefish-ai\"\"\n\n# Create trust policy\ncat > /tmp/trust-policy.json << EOF\n{\n  \"\"Version\"\": \"\"2012-10-17\"\",\n  \"\"Statement\"\": [\n    {\n      \"\"Effect\"\": \"\"Allow\"\",\n      \"\"Principal\"\": {\n        \"\"Federated\"\": \"\"arn:aws:iam::${AWS_ACCOUNT_ID}:oidc-provider/token.actions.githubusercontent.com\"\"\n      },\n      \"\"Action\"\": \"\"sts:AssumeRoleWithWebIdentity\"\",\n      \"\"Condition\"\": {\n        \"\"StringEquals\"\": {\n          \"\"token.actions.githubusercontent.com:aud\"\": \"\"sts.amazonaws.com\"\"\n        },\n        \"\"StringLike\"\": {\n          \"\"token.actions.githubusercontent.com:sub\"\": \"\"repo:${GITHUB_REPO}:*\"\"\n        }\n      }\n    }\n  ]\n}\nEOF\n\n# Create permissions policy\ncat > /tmp/permissions-policy.json << EOF\n{\n  \"\"Version\"\": \"\"2012-10-17\"\",\n  \"\"Statement\"\": [\n    {\n      \"\"Effect\"\": \"\"Allow\"\",\n      \"\"Action\"\": [\n        \"\"secretsmanager:GetSecretValue\"\",\n        \"\"secretsmanager:DescribeSecret\"\"\n      ],\n      \"\"Resource\"\": \"\"arn:aws:secretsmanager:us-east-1:${AWS_ACCOUNT_ID}:secret:candlefish-ai/anthropic/api-key*\"\"\n    }\n  ]\n}\nEOF\n\n# Check if role exists\nif aws iam get-role --role-name \"\"$ROLE_NAME\"\" >/dev/null 2>&1; then\n    echo \"\"‚úÖ IAM role already exists: $ROLE_NAME\"\"\n    # Update the trust policy\n    aws iam update-assume-role-policy \\\n        --role-name \"\"$ROLE_NAME\"\" \\\n        --policy-document file:///tmp/trust-policy.json\n    # Update the permissions\n    aws iam put-role-policy \\\n        --role-name \"\"$ROLE_NAME\"\" \\\n        --policy-name \"\"claude-review-secrets-access\"\" \\\n        --policy-document file:///tmp/permissions-policy.json\nelse\n    echo \"\"üìù Creating IAM role...\"\"\n    # Create the role\n    aws iam create-role \\\n        --role-name \"\"$ROLE_NAME\"\" \\\n        --assume-role-policy-document file:///tmp/trust-policy.json \\\n        --description \"\"Role for GitHub Actions to access Claude API key\"\"\n    # Attach the permissions policy\n    aws iam put-role-policy \\\n        --role-name \"\"$ROLE_NAME\"\" \\\n        --policy-name \"\"claude-review-secrets-access\"\" \\\n        --policy-document file:///tmp/permissions-policy.json\nfi\n\n# Get the role ARN\nROLE_ARN=$(aws iam get-role --role-name \"\"$ROLE_NAME\"\" --query ''Role.Arn'' --output text)\necho \"\"üìã IAM Role ARN: $ROLE_ARN\"\"\n\n# Clean up\nrm -f /tmp/trust-policy.json /tmp/permissions-policy.json)",
      "Bash(# Set the AWS role ARN as a GitHub secret\ngh secret set AWS_ROLE_ARN --body \"\"arn:aws:iam::207567767039:role/github-actions-claude-review\"\" --repo \"\"aspenas/candlefish-ai\"\"\n\necho \"\"‚úÖ GitHub secret ''AWS_ROLE_ARN'' has been set\"\")",
      "Bash(# Check if GitHub OIDC provider exists\naws iam list-open-id-connect-providers | jq -r ''.OpenIDConnectProviderList[].Arn'' | grep -q \"\"token.actions.githubusercontent.com\"\" && echo \"\"‚úÖ GitHub OIDC provider already exists\"\" || echo \"\"‚ùå GitHub OIDC provider not found\"\")",
      "Bash(./.github/scripts/test-claude-review.sh:*)",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"feat: Add Claude Auto Review GitHub Actions\n\n- Add three Claude review workflows with increasing sophistication\n- Implement AWS Secrets Manager integration for secure API key storage  \n- Configure IAM role with OIDC authentication for GitHub Actions\n- Support multiple review types: comprehensive, security, performance, quick\n- Enable manual triggers via PR comments (/claude-review)\n- Add setup and test scripts for easy configuration\n- Include comprehensive documentation\n\nThe official workflow (claude-official-review.yml) uses the Anthropic \nclaude-code-action@beta for the most reliable integration.\")",
      "Bash(./setup-vercel-env.sh:*)",
      "Bash(gh pr comment:*)",
      "Bash(gh run list:*)",
      "Bash(gh pr checks:*)",
      "Bash(gh pr merge:*)",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"feat: Upgrade Claude reviews to Opus-4 with enhanced token limits\n\n- Update all workflows to use claude-opus-4-20250514 model\n- Configure 2M input / 400K output token limits (Tier-4)\n- Enhance prompts to leverage Opus-4 capabilities\n- Update documentation to reflect new model and limits\n\nThis upgrade enables:\n- Processing entire codebases in a single review\n- More detailed and thorough analysis\n- Better context understanding with 2M input tokens\n- Comprehensive feedback with 400K output tokens\")",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"test: Add simple demo file to test Opus-4 review\n\nThis file contains intentional issues:\n- SQL injection vulnerability\n- Missing error handling\n- Type safety problems\")",
      "Bash(gh api:*)",
      "Bash(gh workflow run:*)",
      "WebFetch(domain:paintbox-jteidh9hs-temppjs.vercel.app)",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"feat: Move Claude workflows to root for GitHub Actions\n\n- Move all Claude review workflows to root .github/workflows/\n- GitHub Actions only recognizes workflows in root directory\n- Workflows now configured with Opus-4 model and 2M/400K token limits\n- Includes three workflow types: basic, advanced, and official\n- Ready for automatic PR reviews once merged\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(SKIP=detect-secrets git commit -m \"feat: Move Claude workflows to root for GitHub Actions\n\n- Move all Claude review workflows to root .github/workflows/\n- GitHub Actions only recognizes workflows in root directory\n- Workflows now configured with Opus-4 model and 2M/400K token limits\n- Includes three workflow types: basic, advanced, and official\n- Ready for automatic PR reviews once merged\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(SKIP=detect-secrets git commit -m \"feat: Move Claude workflows to root for GitHub Actions\n\n- Move all Claude review workflows to root .github/workflows/\n- GitHub Actions only recognizes workflows in root directory\n- Workflows now configured with Opus-4 model and 2M/400K token limits\n- Includes three workflow types: basic, advanced, and official\n- Ready for automatic PR reviews once merged\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"feat: Move Claude workflows to root for GitHub Actions\n\n- Move all Claude review workflows to root .github/workflows/\n- GitHub Actions only recognizes workflows in root directory\n- Workflows now configured with Opus-4 model and 2M/400K token limits\n- Includes three workflow types: basic, advanced, and official\n- Ready for automatic PR reviews once merged\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"test: Add demo file to test Claude Opus-4 review\n\nThis file contains various intentional issues:\n- SQL injection vulnerability\n- Missing error handling\n- Type safety problems\n- Performance issues\n- Security concerns\n- React hook violations\n\nPerfect for demonstrating Claude''s comprehensive review capabilities.\")",
      "Bash(git mv:*)",
      "Bash(SKIP=eslint git add test-claude-review-demo.tsx)",
      "Bash(SKIP=eslint git commit -m \"test: Add demo file to test Claude Opus-4 review\n\nThis file contains various intentional issues:\n- SQL injection vulnerability\n- Missing error handling\n- Type safety problems\n- Performance issues\n- Security concerns\n- React hook violations\n\nPerfect for demonstrating Claude''s comprehensive review capabilities.\")",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"test: Add file to demonstrate Claude Opus-4 review\n\nThis test file includes various code issues:\n- SQL injection vulnerability\n- Performance problems (O(n¬≤) complexity)\n- Missing React dependencies\n- Memory leaks\n- Type safety issues\n- Exposed API keys\n\nPerfect for testing the Claude review workflows.\")",
      "Bash(gh workflow:*)",
      "Bash(gh run view:*)",
      "Bash(npx netlify deploy:*)",
      "WebFetch(domain:candlefish.ai)",
      "Bash(SKIP=detect-secrets git commit -m \"fix: Add streaming support to Claude workflows to prevent timeouts\n\n- Update claude-auto-review.yml to use stream=True\n- Update claude-pr-review-advanced.yml to use stream=True\n- Add progress logging for better debugging\n- Enhance error handling with validation\n- Collect streamed chunks properly with event type checking\n\nThis fixes the ''Streaming is required for operations that may take longer \nthan 10 minutes'' error that was causing workflow failures.\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(npx netlify sites:create:*)",
      "Bash(npx netlify rollback:*)",
      "Bash(npx netlify:*)",
      "WebFetch(domain:docs.netlify.com)",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"fix: Update Opus-4 max_tokens from 400K to 32K actual limit\n\nThe claude-opus-4-20250514 model has a maximum output limit of 32,000 tokens,\nnot 400,000 as initially configured. This fixes the error:\n''max_tokens: 400000 > 32000, which is the maximum allowed number of output tokens''\n\n- Update max_tokens from 400000 to 32000 in both workflows\n- Update review footer to reflect correct 32K output limit\n- Keep 2M input limit unchanged (that''s still correct)\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"fix: Correct Opus-4 max_tokens limit from 400K to 32K\n\nThe claude-opus-4-20250514 model has a maximum output limit of 32,000 tokens,\nnot 400,000. This fixes the API error:\n''max_tokens: 400000 > 32000, which is the maximum allowed number of output tokens''\n\n- Update max_tokens from 400000 to 32000 in both workflows\n- Update review footers to reflect correct 32K output limit\n- Keep 2M input limit unchanged (that''s still correct)\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(dig:*)",
      "Bash(sudo dscacheutil:*)",
      "Bash(sudo killall:*)",
      "WebFetch(domain:paintbox.candlefish.ai)",
      "Bash(nslookup:*)",
      "WebFetch(domain:paintbox-protected.netlify.app)",
      "Bash(host:*)",
      "Bash(dscacheutil:*)",
      "WebFetch(domain:paintbox.candlefish.ai)",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"fix: Fix React Spring animations for static export\n\n- Add webpack configuration to properly resolve React Spring modules\n- Create AnimationProvider for graceful fallback handling\n- Implement SafeAnimatedComponents with lazy loading and fallbacks\n- Update home page to use safe animated components\n- Ensure animations work in static Next.js exports\n\nThis fixes the issue where React Spring animations weren''t loading\nproperly in the production static export on Netlify.\")",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"docs: Clarify token limits - 32K per request vs 400K/min rate limit\n\n- Add CLAUDE_TOKEN_LIMITS.md explaining the distinction\n- Update workflow comments to clarify per-request vs rate limits\n- Claude Opus-4 has 32K max output per request, but Tier 4 allows 400K/min total\n- This allows ~12 max-size requests per minute at Tier 4 rates\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"test: Add animation test page for verification\")",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"fix: Remove basic auth for testing and update animations\n\n- Temporarily disable basic auth to allow public access for testing\n- Update home page to use React Spring directly instead of dynamic imports\n- Ensure animations work properly in production static export\n- Deploy with disabled auth to test animations\")",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"feat: Implement Claude review enhancements\n\nHigh Priority Enhancements:\n- Add cost tracking with DynamoDB storage and detailed analytics\n- Implement batch PR review for processing multiple PRs efficiently\n- Create automated cost reporting with visualizations\n\nMedium Priority Improvements:\n- Add selective file review based on patterns and depth\n- Implement incremental reviews for PR updates\n- Add review depth control (quick/standard/deep)\n- Support file pattern filtering to skip generated files\n\nFeatures:\n- Cost tracking: $0.015/1K input, $0.075/1K output tokens\n- Batch reviews: Process multiple PRs with rate limit awareness\n- Enhanced commands: /claude-review quick incremental skip:*.test.js\n- Daily cost reports with charts and Slack integration\n- Review history stored in DynamoDB for analytics\n\nDocumentation:\n- Comprehensive user guide with examples\n- Cost optimization strategies\n- Command reference for all review options\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git add .github/scripts/*.py .github/workflows/claude-batch-review.yml .github/workflows/claude-pr-review-enhanced.yml)",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit --amend --no-edit)",
      "Bash(git ls-tree:*)",
      "Bash(python:*)",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git add .)",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"demo: Add file to showcase Claude review features\n\nThis demo file contains various intentional issues:\n- Security vulnerabilities (SQL injection, plain passwords, ws://)\n- Performance problems (O(n) lookups, inefficient filtering)\n- Code quality issues (missing types, error handling)\n- React best practice violations (missing keys, inline functions)\n\nPerfect for demonstrating the different review commands and features.\")",
      "Bash(cd:*)",
      "Bash(./scripts/setup-claude-org-wide.sh:*)",
      "Bash(gh repo view:*)",
      "Bash(gh auth:*)",
      "Bash(gh repo list:*)",
      "Bash(unset GITHUB_TOKEN)",
      "Bash(command -v:*)",
      "Bash(npx netlify-cli:*)",
      "Bash(./deploy-to-netlify.sh)",
      "Bash(/Users/patricksmith/candlefish-ai/scripts/setup-claude-org-wide.sh:*)",
      "Bash(aws dynamodb describe-table:*)",
      "Bash(./scripts/create-github-oauth-app.sh:*)",
      "Bash(./scripts/deploy-with-backend.sh:*)",
      "Bash(./scripts/test-backend.sh:*)",
      "Bash([ -f ~/.netlify/config.json ])",
      "Bash(./scripts/final-deploy.sh:*)",
      "Bash(./scripts/quick-fix-deploy.sh:*)",
      "Bash(./scripts/final-working-deploy.sh:*)",
      "Bash(./deploy-netlify-now.sh)",
      "Bash(./validate-workflow.sh:*)",
      "Bash(./deploy-backend-now.sh)",
      "Bash(railway:*)",
      "Bash(./setup-env.sh:*)",
      "Bash(./deploy-vercel.sh)",
      "Bash(PORT=3002 npm start)",
      "Bash(PORT=3003 npm run dev)",
      "Bash(git remote add:*)",
      "Bash(git rev-list:*)",
      "Bash(SKIP_AWS_SECRETS=true npm run dev:next)",
      "Bash(aws sts get-caller-identity:*)",
      "Bash(bash:*)",
      "Bash(gh secret set:*)",
      "Bash(MY_AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID MY_AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY MY_AWS_REGION=us-east-1 node scripts/import-historical-data.js)",
      "Bash(aws dynamodb create-table:*)",
      "Bash(--table-name claude-review-settings )",
      "Bash(--attribute-definitions )",
      "Bash(AttributeName=organization,AttributeType=S )",
      "Bash(--key-schema )",
      "Bash(AttributeName=organization,KeyType=HASH )",
      "Bash(--billing-mode PAY_PER_REQUEST)",
      "Bash(MY_AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID MY_AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY MY_AWS_REGION=us-east-1 node scripts/init-settings.js)",
      "Bash(aws configure get:*)",
      "Bash(echo:*)",
      "Bash(gh secret list:*)",
      "Bash(NODE_OPTIONS=\"--max-old-space-size=8192\" npm run build)",
      "WebFetch(domain:paintbox-6f52eyc42-temppjs.vercel.app)",
      "Bash(zip:*)",
      "Bash(git clone:*)",
      "WebFetch(domain:github.com)",
      "Bash(diff:*)",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"docs: Save project context and architectural decisions\n\n- Add comprehensive project context with current state\n- Document all architectural decision records (ADRs)\n- Include security implementation summary\n- Capture technology stack and architecture\n- Document integration points and performance optimizations\n- Include known issues and future roadmap\n\nThis provides a complete snapshot of the project state after the\nsecurity implementation, serving as reference for future development.\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(./scripts/validate-security-implementation.sh:*)",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"docs: Save project context and architectural decisions\n\n- Add comprehensive project state documentation\n- Document security architectural decisions (ADRs 13-22)\n- Create deployment readiness checklist\n- Update project context with security implementation\n- Capture January 2025 project state\n\nThis provides a complete snapshot of the project after the successful\nsecurity implementation, including all 50/50 components validated.\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(./scripts/validate-deployment-readiness.sh:*)",
      "Bash(terraform:*)",
      "Bash(./scripts/setup-terraform-backend.sh:*)",
      "Bash(aws:*)",
      "Bash(./scripts/check-deployment-status.sh:*)",
      "Bash(./scripts/setup-ecr.sh:*)",
      "Bash(./scripts/build-and-push.sh:*)",
      "Bash(SKIP=detect-secrets git commit -m \"Update legal document with Studio structure and family roles\n\n- Fix Tyler''s last name to Tyler Robinson\n- Restructure as single LLC during MS employment with future multi-LLC migration path\n- Update to Studio designation with Managing Member role\n- Add contingent compensation structure for Tyler\n- Include extended family roles: Scotty (COO/CFO) and Mike McIntosh (General Counsel)\n- Add document retention system architecture\n- Include Delaware LLC analysis for post-MS transition (2027)\")",
      "Bash(./scripts/docker-build-simple.sh:*)",
      "Bash(./scripts/emergency-deploy.sh:*)",
      "Bash(docker push:*)",
      "Bash(./scripts/deploy-prebuilt.sh:*)",
      "Bash(./scripts/create-ecs-services.sh:*)",
      "Bash(base64:*)",
      "Bash(./scripts/setup-alb-listeners.sh:*)",
      "Bash(./scripts/deploy-aws-test.sh:*)",
      "Bash(osascript:*)",
      "Bash(NODE_OPTIONS='--max-old-space-size=12288' npm run build)",
      "Bash(docker build:*)",
      "Bash(docker tag:*)",
      "Bash(./scripts/blue-green-deploy.sh:*)",
      "Bash(/Users/patricksmith/candlefish-ai/projects/paintbox/verify-vpc-endpoints.sh)",
      "Bash(./scripts/monitor-deployment.sh:*)",
      "Bash(docker manifest inspect:*)",
      "Bash(NODE_OPTIONS='--max-old-space-size=8192' npm run build)",
      "Bash(docker run:*)",
      "Bash(docker rm:*)",
      "Bash(docker logs:*)",
      "Bash(docker stop:*)",
      "WebFetch(domain:paintbox-xmwtt4u3d-temppjs.vercel.app)",
      "Bash(npx webpack-bundle-analyzer:*)",
      "WebFetch(domain:paintbox-j94ckw32s-temppjs.vercel.app)",
      "Bash(NODE_OPTIONS='--max-old-space-size=16384' npm run build)",
      "Bash(npx next dev:*)",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"feat: Add Tyler-Setup transformation workflow automation\n\n- GitHub Actions workflow for automated transformation\n- Scripts for applying Tyler-Setup patterns\n- Test generation for all components\n- Type safety improvements\n- Documentation generation\n- Pre-commit hooks for quality assurance\")",
      "Bash(git config:*)",
      "Bash(PRE_COMMIT_ALLOW_NO_CONFIG=1 git commit -m \"feat: Add Tyler-Setup transformation workflow automation\n\n- GitHub Actions workflow for automated transformation\n- Scripts for applying Tyler-Setup patterns\n- Test generation for all components\n- Type safety improvements\n- Documentation generation\n- Pre-commit hooks for quality assurance\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(ping:*)"
    ],
    "deny": []
  }
}
