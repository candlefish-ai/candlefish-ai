version: '3.8'

services:
  # PostgreSQL Databases
  db-estimates:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: paintbox_estimates
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - estimates_data:/var/lib/postgresql/data
      - ./database/init-estimates.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d paintbox_estimates"]
      interval: 5s
      timeout: 5s
      retries: 5

  db-customers:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: paintbox_customers
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - customers_data:/var/lib/postgresql/data
      - ./database/init-customers.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d paintbox_customers"]
      interval: 5s
      timeout: 5s
      retries: 5

  db-projects:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: paintbox_projects
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5434:5432"
    volumes:
      - projects_data:/var/lib/postgresql/data
      - ./database/init-projects.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d paintbox_projects"]
      interval: 5s
      timeout: 5s
      retries: 5

  db-integrations:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: paintbox_integrations
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5435:5432"
    volumes:
      - integrations_data:/var/lib/postgresql/data
      - ./database/init-integrations.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d paintbox_integrations"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Subgraph Services
  estimates-subgraph:
    build:
      context: ./subgraph-estimates
      target: development
    ports:
      - "4002:4002"
    environment:
      NODE_ENV: development
      PORT: 4002
      DATABASE_URL: postgresql://postgres:postgres@db-estimates:5432/paintbox_estimates
      REDIS_URL: redis://redis:6379
      APOLLO_KEY: ${APOLLO_KEY}
      APOLLO_GRAPH_REF: paintbox@main
    depends_on:
      db-estimates:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./subgraph-estimates:/app
      - /app/node_modules
    restart: unless-stopped

  customers-subgraph:
    build:
      context: ./subgraph-customers
      target: development
    ports:
      - "4003:4003"
    environment:
      NODE_ENV: development
      PORT: 4003
      DATABASE_URL: postgresql://postgres:postgres@db-customers:5432/paintbox_customers
      REDIS_URL: redis://redis:6379
      SALESFORCE_CLIENT_ID: ${SALESFORCE_CLIENT_ID}
      SALESFORCE_CLIENT_SECRET: ${SALESFORCE_CLIENT_SECRET}
      SALESFORCE_USERNAME: ${SALESFORCE_USERNAME}
      SALESFORCE_PASSWORD: ${SALESFORCE_PASSWORD}
      SALESFORCE_SECURITY_TOKEN: ${SALESFORCE_SECURITY_TOKEN}
      APOLLO_KEY: ${APOLLO_KEY}
      APOLLO_GRAPH_REF: paintbox@main
    depends_on:
      db-customers:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./subgraph-customers:/app
      - /app/node_modules
    restart: unless-stopped

  projects-subgraph:
    build:
      context: ./subgraph-projects
      target: development
    ports:
      - "4004:4004"
    environment:
      NODE_ENV: development
      PORT: 4004
      DATABASE_URL: postgresql://postgres:postgres@db-projects:5432/paintbox_projects
      REDIS_URL: redis://redis:6379
      COMPANY_CAM_API_KEY: ${COMPANY_CAM_API_KEY}
      COMPANY_CAM_API_SECRET: ${COMPANY_CAM_API_SECRET}
      WEATHER_API_KEY: ${WEATHER_API_KEY}
      APOLLO_KEY: ${APOLLO_KEY}
      APOLLO_GRAPH_REF: paintbox@main
    depends_on:
      db-projects:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./subgraph-projects:/app
      - /app/node_modules
    restart: unless-stopped

  integrations-subgraph:
    build:
      context: ./subgraph-integrations
      target: development
    ports:
      - "4005:4005"
    environment:
      NODE_ENV: development
      PORT: 4005
      DATABASE_URL: postgresql://postgres:postgres@db-integrations:5432/paintbox_integrations
      REDIS_URL: redis://redis:6379
      APOLLO_KEY: ${APOLLO_KEY}
      APOLLO_GRAPH_REF: paintbox@main
    depends_on:
      db-integrations:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./subgraph-integrations:/app
      - /app/node_modules
    restart: unless-stopped

  # Apollo Router
  router:
    build:
      context: ./router
    ports:
      - "4100:4100"
    environment:
      APOLLO_KEY: ${APOLLO_KEY}
      APOLLO_GRAPH_REF: paintbox@main
      APOLLO_ROUTER_SUPERGRAPH_PATH: /dist/config/supergraph-schema.graphql
      APOLLO_ROUTER_CONFIG_PATH: /dist/config/router.yaml
      APOLLO_ROUTER_LOG: info
    depends_on:
      - estimates-subgraph
      - customers-subgraph
      - projects-subgraph
      - integrations-subgraph
    volumes:
      - ./supergraph-schema.graphql:/dist/config/supergraph-schema.graphql:ro
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      target: development
    ports:
      - "5173:5173"
    environment:
      VITE_API_URL: http://localhost:4100/graphql
      VITE_WS_URL: ws://localhost:4100/graphql
      VITE_APP_NAME: Paintbox
    depends_on:
      - router
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
    environment:
      COLLECTOR_OTLP_ENABLED: true

volumes:
  estimates_data:
  customers_data:
  projects_data:
  integrations_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: paintbox-network
