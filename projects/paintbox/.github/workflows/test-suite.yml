name: System Analyzer Test Suite

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'components/**'
      - 'lib/**'
      - 'mobile/**'
      - '__tests__/**'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/test-suite.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'components/**'
      - 'lib/**'
      - 'mobile/**'
      - '__tests__/**'
      - 'package.json'
      - 'package-lock.json'

env:
  NODE_VERSION: '18.x'
  TEST_ENV: 'ci'
  COVERAGE_THRESHOLD: '80'

jobs:
  # Pre-check job to determine what tests to run
  check-changes:
    name: Check Changes
    runs-on: ubuntu-latest
    outputs:
      run-backend: ${{ steps.changes.outputs.backend }}
      run-frontend: ${{ steps.changes.outputs.frontend }}
      run-mobile: ${{ steps.changes.outputs.mobile }}
      run-e2e: ${{ steps.changes.outputs.e2e }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'lib/services/**'
              - 'lib/graphql/**'
              - '__tests__/unit/services/**'
              - '__tests__/unit/graphql/**'
            frontend:
              - 'components/**'
              - '__tests__/unit/components/**'
              - 'app/**'
            mobile:
              - 'mobile/**'
            e2e:
              - 'components/**'
              - 'app/**'
              - '__tests__/e2e/**'

  # Unit Tests for Backend Services
  backend-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.run-backend == 'true'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run backend unit tests
        run: |
          npm run test:unit -- \
            --testPathPattern="(services|graphql)" \
            --coverage \
            --coverageDirectory=coverage/backend \
            --maxWorkers=2
        env:
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgres://postgres:testpass@localhost:5432/testdb

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          file: coverage/backend/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend Component Tests
  frontend-tests:
    name: Frontend Component Tests
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.run-frontend == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run component tests
        run: |
          npm run test:components -- \
            --coverage \
            --coverageDirectory=coverage/frontend \
            --maxWorkers=2

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: coverage/frontend/lcov.info
          flags: frontend
          name: frontend-coverage

  # Mobile Tests (React Native)
  mobile-tests:
    name: Mobile App Tests
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.run-mobile == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install mobile dependencies
        run: |
          cd mobile
          npm ci

      - name: Run mobile tests
        run: |
          cd mobile
          npm run test -- \
            --coverage \
            --coverageDirectory=../coverage/mobile \
            --maxWorkers=2

      - name: Upload mobile coverage
        uses: codecov/codecov-action@v3
        with:
          file: coverage/mobile/lcov.info
          flags: mobile
          name: mobile-coverage

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always() && (needs.backend-tests.result == 'success' || needs.frontend-tests.result == 'success')

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start test services
        run: |
          npm run start:test &
          sleep 30
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgres://postgres:testpass@localhost:5432/testdb

      - name: Wait for services
        run: |
          npx wait-on http://localhost:4000/health --timeout 60000

      - name: Run integration tests
        run: |
          npm run test:integration -- \
            --coverage \
            --coverageDirectory=coverage/integration \
            --testTimeout=30000
        env:
          API_BASE_URL: http://localhost:4000

      - name: Upload integration coverage
        uses: codecov/codecov-action@v3
        with:
          file: coverage/integration/lcov.info
          flags: integration
          name: integration-coverage

  # End-to-End Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: always() && needs.integration-tests.result == 'success' && needs.check-changes.outputs.run-e2e == 'true'

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run start &
          npx wait-on http://localhost:3000 --timeout 120000
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgres://postgres:testpass@localhost:5432/testdb

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          E2E_BASE_URL: http://localhost:3000
          E2E_API_URL: http://localhost:4000

      - name: Upload E2E artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: always() && needs.integration-tests.result == 'success'

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start test services
        run: |
          npm run start:test &
          npx wait-on http://localhost:4000/health --timeout 60000
        env:
          NODE_ENV: test
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgres://postgres:testpass@localhost:5432/testdb

      - name: Run performance tests
        run: |
          npm run test:performance -- \
            --testTimeout=120000 \
            --detectOpenHandles \
            --forceExit
        env:
          PERF_API_URL: http://localhost:4000

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report.json
          retention-days: 30

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: [backend-tests]
    if: always() && needs.backend-tests.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security tests
        run: npm run test:security

      - name: Run npm audit
        run: npm audit --audit-level moderate

      - name: Run dependency check
        run: |
          npx audit-ci --moderate
        continue-on-error: true

  # Coverage Report
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, mobile-tests, integration-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all coverage reports
        uses: actions/download-artifact@v3
        continue-on-error: true

      - name: Merge coverage reports
        run: |
          mkdir -p coverage/merged
          npx nyc merge coverage coverage/merged-coverage.json || true
          npx nyc report \
            --reporter=html \
            --reporter=lcov \
            --reporter=text-summary \
            --report-dir=coverage/merged || true

      - name: Generate coverage badge
        run: |
          npx coverage-badge-creator \
            --file coverage/merged/lcov.info \
            --output coverage/badge.svg || true

      - name: Upload merged coverage
        uses: codecov/codecov-action@v3
        with:
          directory: coverage/merged
          flags: merged
          name: merged-coverage

      - name: Check coverage threshold
        run: |
          if [ -f "coverage/merged/coverage-summary.json" ]; then
            COVERAGE=$(node -e "
              const fs = require('fs');
              const coverage = JSON.parse(fs.readFileSync('coverage/merged/coverage-summary.json', 'utf8'));
              console.log(Math.round(coverage.total.lines.pct));
            ")
            echo "Coverage: ${COVERAGE}%"
            if [ "$COVERAGE" -lt "$COVERAGE_THRESHOLD" ]; then
              echo "::error::Coverage ${COVERAGE}% is below threshold ${COVERAGE_THRESHOLD}%"
              exit 1
            fi
          else
            echo "::warning::Coverage summary not found"
          fi

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, mobile-tests, integration-tests, e2e-tests, performance-tests, security-tests, coverage-report]
    if: always()

    steps:
      - name: Test Results Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.backend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.frontend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Mobile Tests | ${{ needs.mobile-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage Report | ${{ needs.coverage-report.result }} |" >> $GITHUB_STEP_SUMMARY

      - name: Determine overall result
        run: |
          FAILED_JOBS=""
          
          if [ "${{ needs.backend-tests.result }}" = "failure" ]; then
            FAILED_JOBS="$FAILED_JOBS backend-tests"
          fi
          if [ "${{ needs.frontend-tests.result }}" = "failure" ]; then
            FAILED_JOBS="$FAILED_JOBS frontend-tests"
          fi
          if [ "${{ needs.mobile-tests.result }}" = "failure" ]; then
            FAILED_JOBS="$FAILED_JOBS mobile-tests"
          fi
          if [ "${{ needs.integration-tests.result }}" = "failure" ]; then
            FAILED_JOBS="$FAILED_JOBS integration-tests"
          fi
          if [ "${{ needs.e2e-tests.result }}" = "failure" ]; then
            FAILED_JOBS="$FAILED_JOBS e2e-tests"
          fi
          if [ "${{ needs.security-tests.result }}" = "failure" ]; then
            FAILED_JOBS="$FAILED_JOBS security-tests"
          fi
          if [ "${{ needs.coverage-report.result }}" = "failure" ]; then
            FAILED_JOBS="$FAILED_JOBS coverage-report"
          fi
          
          if [ -n "$FAILED_JOBS" ]; then
            echo "::error::Failed jobs: $FAILED_JOBS"
            exit 1
          else
            echo "::notice::All tests passed successfully! 🎉"
          fi