name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
    tags: ['v*']
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Detect changes to optimize pipeline execution
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      mobile: ${{ steps.changes.outputs.mobile }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'app/**'
              - 'components/**'
              - 'lib/**'
              - 'pages/**'
              - 'styles/**'
              - 'public/**'
              - 'next.config.js'
              - 'package.json'
              - 'package-lock.json'
            backend:
              - 'apollo-graphos/**'
              - 'lib/services/**'
              - 'lib/graphql/**'
              - 'prisma/**'
            mobile:
              - 'mobile/**'
            infrastructure:
              - 'docker/**'
              - 'k8s/**'
              - 'terraform/**'
              - '.github/workflows/**'

  # Security scanning and dependency auditing
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run dependency audit
        run: npm audit --audit-level moderate

      - name: Run security lint (ESLint)
        run: npm run lint -- --format json --output-file eslint-report.json
        continue-on-error: true

      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: eslint-report.json

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript
          queries: security-and-quality

      - name: Run Semgrep Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/nodejs
            p/typescript
            p/react

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Unit and integration tests
  test:
    runs-on: ubuntu-latest
    needs: [changes, security]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: paintbox_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          npm run db:test:setup
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/paintbox_test
          REDIS_URL: redis://localhost:6379/0

      - name: Run type checking
        run: npm run type-check

      - name: Run unit tests
        run: npm run test -- --coverage --testPathIgnorePatterns=e2e
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/paintbox_test
          REDIS_URL: redis://localhost:6379/0

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/paintbox_test
          REDIS_URL: redis://localhost:6379/0

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage/
            test-results.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage
          flags: unittests
          name: paintbox-coverage

  # Frontend-specific tests and builds
  frontend:
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: needs.changes.outputs.frontend == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run frontend tests
        run: npm run test:components

      - name: Run accessibility tests
        run: npm run test:a11y

      - name: Build frontend
        run: npm run build:production
        env:
          NEXT_PUBLIC_GRAPHQL_URL: http://localhost:4000/graphql

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          configPath: '.lighthouserc.js'
          uploadArtifacts: true

  # Backend GraphQL tests
  backend:
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: needs.changes.outputs.backend == 'true'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: paintbox_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build GraphQL subgraphs
        run: |
          cd apollo-graphos/subgraph-estimates
          npm ci && npm run build
          cd ../subgraph-customers
          npm ci && npm run build
          cd ../subgraph-projects  
          npm ci && npm run build
          cd ../subgraph-integrations
          npm ci && npm run build

      - name: Test GraphQL schema composition
        run: |
          npx @apollo/rover supergraph compose --config apollo-graphos/supergraph-config.yaml

  # Mobile app build (Android)
  mobile-android:
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: needs.changes.outputs.mobile == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install mobile dependencies
        run: |
          cd mobile/PaintboxMobile
          npm ci

      - name: Run mobile tests
        run: |
          cd mobile/PaintboxMobile
          npm test

      - name: Build Android APK (Debug)
        run: |
          cd mobile/PaintboxMobile
          cd android
          ./gradlew assembleDebug

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: android-debug-apk
          path: mobile/PaintboxMobile/android/app/build/outputs/apk/debug/app-debug.apk

  # Mobile app build (iOS)
  mobile-ios:
    runs-on: macos-latest
    needs: [changes, test]
    if: needs.changes.outputs.mobile == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install mobile dependencies
        run: |
          cd mobile/PaintboxMobile
          npm ci

      - name: Install iOS dependencies
        run: |
          cd mobile/PaintboxMobile/ios
          pod install

      - name: Build iOS app
        run: |
          cd mobile/PaintboxMobile
          npx react-native run-ios --configuration Release --simulator="iPhone 15"

  # End-to-end tests
  e2e:
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Start test environment
        run: |
          docker-compose -f docker/docker-compose.yml up -d
          npm run test:e2e:setup

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/

  # Performance testing
  performance:
    runs-on: ubuntu-latest
    needs: [e2e]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start services
        run: docker-compose -f docker/docker-compose.yml up -d

      - name: Run load tests
        run: npm run test:load:report

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: report.json

  # Build and push Docker images
  build-images:
    runs-on: ubuntu-latest
    needs: [test, frontend, backend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [frontend, graphql, mobile-builder]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-images, e2e, performance]
    if: github.ref == 'refs/heads/staging'
    environment:
      name: staging
      url: https://staging.paintbox.app
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to EKS staging
        run: |
          aws eks update-kubeconfig --name paintbox-staging
          kubectl apply -f k8s/staging/
          kubectl rollout status deployment/frontend -n paintbox-staging
          kubectl rollout status deployment/apollo-router -n paintbox-staging

      - name: Run smoke tests
        run: npm run test:smoke
        env:
          BASE_URL: https://staging.paintbox.app

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-images, deploy-staging]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    environment:
      name: production
      url: https://app.paintbox.com
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Blue-Green deployment
        run: |
          aws eks update-kubeconfig --name paintbox-production
          ./scripts/blue-green-deploy.sh production

      - name: Run production smoke tests
        run: npm run test:smoke
        env:
          BASE_URL: https://app.paintbox.com

      - name: Notify Slack on success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: 'Production deployment successful! 🚀'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: 'Production deployment failed! 🚨'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Mobile app deployment
  deploy-mobile:
    runs-on: macos-latest
    needs: [mobile-android, mobile-ios]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Deploy to App Store Connect
        run: |
          cd mobile/PaintboxMobile
          npx eas build --platform ios --non-interactive --auto-submit
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Deploy to Google Play Store
        run: |
          cd mobile/PaintboxMobile
          npx eas build --platform android --non-interactive --auto-submit
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}