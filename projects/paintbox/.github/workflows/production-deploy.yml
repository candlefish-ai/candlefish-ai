name: Production Deployment Pipeline

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  release:
    types: [published]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/paintbox

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  # Security and dependency scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --audit

      - name: Run npm audit
        run: npm audit --audit-level moderate

      - name: Run security linting
        run: |
          npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-results.json || true
          cat eslint-results.json

  # Quality assurance and testing
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: [security-scan]
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Redis for testing
        uses: supercharge/redis-github-action@1.7.0
        with:
          redis-version: 7

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.test || echo "No .env.example found"
          echo "REDIS_URL=redis://localhost:6379" >> .env.test

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          npm run test:coverage
          npx codecov || echo "Codecov upload failed"

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        env:
          NODE_ENV: test
        run: npm run test:integration

      - name: Install Playwright
        if: matrix.test-type == 'e2e'
        run: npx playwright install --with-deps

      - name: Run E2E tests
        if: matrix.test-type == 'e2e'
        run: npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            test-results/
            playwright-report/
            coverage/

  # Build and validation
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test-suite]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.build.outputs.image-url }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate configuration
        run: |
          node -e "
            const config = require('./next.config.js');
            console.log('Next.js config validated');
            const pkg = require('./package.json');
            console.log('Package.json validated');
          "

      - name: Build application
        env:
          NODE_ENV: production
          NODE_OPTIONS: '--max-old-space-size=8192'
        run: |
          npm run build
          npm run build:websocket

      - name: Validate build artifacts
        run: |
          test -d .next
          test -f dist/websocket-server.js
          ls -la .next/
          ls -la dist/

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-,suffix=-{{date 'YYYYMMDD'}},format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          provenance: true
          sbom: true

  # Vercel deployment
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment:
      name: production-vercel
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

      - name: Update deployment status
        run: |
          echo "Deployment URL: ${{ steps.deploy.outputs.url }}"
          curl -X POST "${{ steps.deploy.outputs.url }}/api/health" || echo "Health check failed"

  # Docker deployment to staging
  deploy-docker-staging:
    name: Deploy Docker to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging-docker
      url: https://paintbox-staging.example.com
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging
        env:
          DOCKER_IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          STAGING_SERVER: ${{ secrets.STAGING_SERVER }}
          STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
        run: |
          # SSH setup
          mkdir -p ~/.ssh
          echo "$STAGING_SSH_KEY" > ~/.ssh/staging_key
          chmod 600 ~/.ssh/staging_key

          # Deploy to staging server
          ssh -i ~/.ssh/staging_key -o StrictHostKeyChecking=no \
            deploy@$STAGING_SERVER \
            "
            docker pull $DOCKER_IMAGE
            docker stop paintbox-staging || true
            docker rm paintbox-staging || true
            docker run -d \
              --name paintbox-staging \
              --restart unless-stopped \
              -p 3000:3000 \
              -e NODE_ENV=staging \
              -e REDIS_URL='${{ secrets.STAGING_REDIS_URL }}' \
              -e SALESFORCE_CLIENT_ID='${{ secrets.STAGING_SALESFORCE_CLIENT_ID }}' \
              -e COMPANYCAM_API_KEY='${{ secrets.STAGING_COMPANYCAM_API_KEY }}' \
              $DOCKER_IMAGE
            "

      - name: Health check staging
        run: |
          sleep 30
          curl -f https://paintbox-staging.example.com/api/health || exit 1

  # AWS ECS deployment
  deploy-aws-ecs:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'release'
    environment:
      name: production-aws
      url: https://paintbox.example.com
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Deploy to ECS
        env:
          ECS_CLUSTER: paintbox-production
          ECS_SERVICE: paintbox-web
          CONTAINER_NAME: paintbox
          IMAGE_URI: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        run: |
          # Update task definition
          aws ecs describe-task-definition \
            --task-definition paintbox-web \
            --query taskDefinition > task-definition.json

          # Update image URI in task definition
          jq --arg IMAGE_URI "$IMAGE_URI" \
            '.containerDefinitions[0].image = $IMAGE_URI' \
            task-definition.json > updated-task-definition.json

          # Register new task definition
          aws ecs register-task-definition \
            --cli-input-json file://updated-task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text > new-task-definition-arn.txt

          # Update service
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $(cat new-task-definition-arn.txt) \
            --force-new-deployment

          # Wait for deployment to complete
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE

      - name: Health check production
        run: |
          sleep 60
          curl -f https://paintbox.example.com/api/health || exit 1

  # Performance and load testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-vercel]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run load tests
        env:
          TARGET_URL: ${{ needs.deploy-vercel.outputs.url || 'https://paintbox.vercel.app' }}
        run: |
          sed -i "s|http://localhost:3000|$TARGET_URL|g" artillery-config.yml
          npm run test:load:report

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: report.json

  # Deployment summary and notifications
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-vercel, deploy-docker-staging, deploy-aws-ecs, performance-test]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'release')
    steps:
      - name: Generate deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Vercel:** ${{ needs.deploy-vercel.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Staging:** ${{ needs.deploy-docker-staging.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **AWS ECS:** ${{ needs.deploy-aws-ecs.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Test:** ${{ needs.performance-test.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Notify deployment status
        if: failure()
        run: |
          echo "Deployment failed. Check the workflow logs for details."
          # Add Slack/Teams notification here if needed
