name: Security Scanning & Hardening

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '20'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-security-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd paintbox-backend && npm ci

      - name: Run npm audit (Frontend)
        run: |
          npm audit --audit-level=moderate --json > frontend-audit.json || true
          
      - name: Run npm audit (Backend)
        run: |
          cd paintbox-backend
          npm audit --audit-level=moderate --json > ../backend-audit.json || true

      - name: Check for high/critical vulnerabilities
        run: |
          # Check frontend
          if jq -e '.metadata.vulnerabilities.high > 0 or .metadata.vulnerabilities.critical > 0' frontend-audit.json > /dev/null; then
            echo "High or critical vulnerabilities found in frontend dependencies"
            jq '.advisories' frontend-audit.json
            exit 1
          fi
          
          # Check backend
          if jq -e '.metadata.vulnerabilities.high > 0 or .metadata.vulnerabilities.critical > 0' backend-audit.json > /dev/null; then
            echo "High or critical vulnerabilities found in backend dependencies"
            jq '.advisories' backend-audit.json
            exit 1
          fi

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results
          path: |
            frontend-audit.json
            backend-audit.json

  container-security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build frontend image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: paintbox-frontend:scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build backend image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ./paintbox-backend
          file: ./paintbox-backend/Dockerfile
          push: false
          tags: paintbox-backend:scan
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'paintbox-frontend:scan'
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'paintbox-backend:scan'
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'frontend-trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'backend-trivy-results.sarif'

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'filesystem-trivy-results.sarif'

      - name: Upload filesystem scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'filesystem-trivy-results.sarif'

  secret-detection:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks Detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

  code-security-analysis:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  infrastructure-security-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Terraform Security Scan with Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file_path: terraform-security.sarif

      - name: Upload Terraform security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: terraform-security.sarif

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform/
          format: sarif
          soft_fail: true

  compliance-check:
    name: Compliance & Best Practices
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: ESLint Security Plugin
        run: |
          npm install --no-save eslint-plugin-security
          npx eslint --ext .js,.ts,.tsx . --format json --output-file eslint-security.json || true

      - name: TypeScript Security Check
        run: |
          npx tsc --noEmit --strict --skipLibCheck

      - name: Dockerfile Security Check (Hadolint)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: dockerfile-security.sarif

      - name: Upload Dockerfile security results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: dockerfile-security.sarif

      - name: Check for hardcoded credentials
        run: |
          # Check for common patterns of hardcoded credentials
          if grep -r -n -E "(password|secret|key|token|credential).*=.*['\"][^'\"]{8,}['\"]" \
             --exclude-dir=node_modules \
             --exclude-dir=.git \
             --exclude="*.log" \
             --exclude="*.json" \
             . | grep -v "example\|test\|spec\|REPLACE_WITH"; then
            echo "Potential hardcoded credentials found!"
            exit 1
          fi

  security-policy-check:
    name: Security Policy Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Security Policy
        run: |
          # Verify SECURITY.md exists
          if [[ ! -f SECURITY.md ]]; then
            echo "Security policy file (SECURITY.md) is missing"
            exit 1
          fi

      - name: Validate GitHub Security Features
        run: |
          # Check if security features are enabled (requires GitHub CLI)
          gh api repos/${{ github.repository }} \
            --jq '.security_and_analysis' > security_features.json
          
          # Verify security features are enabled
          if ! jq -e '.secret_scanning.status == "enabled"' security_features.json; then
            echo "Secret scanning is not enabled"
            exit 1
          fi
          
          if ! jq -e '.secret_scanning_push_protection.status == "enabled"' security_features.json; then
            echo "Secret scanning push protection is not enabled"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate-security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-security-scan, container-security-scan, secret-detection, code-security-analysis, infrastructure-security-scan, compliance-check]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate Security Report
        run: |
          mkdir -p security-reports
          
          cat > security-reports/security-report-$(date +%Y%m%d-%H%M%S).md << EOF
          # Security Scan Report
          
          **Date:** $(date)
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ## Scan Results Summary
          
          | Scan Type | Status |
          |-----------|--------|
          | Dependency Security | ${{ needs.dependency-security-scan.result }} |
          | Container Security | ${{ needs.container-security-scan.result }} |
          | Secret Detection | ${{ needs.secret-detection.result }} |
          | Code Security | ${{ needs.code-security-analysis.result }} |
          | Infrastructure Security | ${{ needs.infrastructure-security-scan.result }} |
          | Compliance Check | ${{ needs.compliance-check.result }} |
          
          ## Next Steps
          
          1. Review any failed security checks
          2. Address identified vulnerabilities
          3. Update dependencies if needed
          4. Ensure all secrets are properly managed
          
          ## Security Dashboard
          
          View detailed results in the [Security tab](https://github.com/${{ github.repository }}/security)
          
          EOF

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-reports/

      - name: Comment PR with Security Status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const needs = ${{ toJSON(needs) }};
            let comment = '## 🔒 Security Scan Results\n\n';
            
            const results = {
              'dependency-security-scan': 'Dependency Security',
              'container-security-scan': 'Container Security', 
              'secret-detection': 'Secret Detection',
              'code-security-analysis': 'Code Security Analysis',
              'infrastructure-security-scan': 'Infrastructure Security',
              'compliance-check': 'Compliance Check'
            };
            
            for (const [job, name] of Object.entries(results)) {
              const status = needs[job]?.result || 'skipped';
              const emoji = status === 'success' ? '✅' : status === 'failure' ? '❌' : '⏭️';
              comment += `${emoji} **${name}**: ${status}\n`;
            }
            
            comment += '\n📊 View detailed results in the [Security tab](https://github.com/${{ github.repository }}/security)';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  notify-security-team:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [dependency-security-scan, container-security-scan, secret-detection, code-security-analysis, infrastructure-security-scan, compliance-check]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Send Security Alert
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_SECURITY }}
          custom_payload: |
            {
              "attachments": [{
                "color": "danger",
                "title": "🚨 Security Scan Failed",
                "text": "Security vulnerabilities detected in Paintbox repository",
                "fields": [{
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                }, {
                  "title": "Branch", 
                  "value": "${{ github.ref_name }}",
                  "short": true
                }, {
                  "title": "Commit",
                  "value": "${{ github.sha }}",
                  "short": true
                }],
                "actions": [{
                  "type": "button",
                  "text": "View Security Tab",
                  "url": "https://github.com/${{ github.repository }}/security"
                }]
              }]
            }