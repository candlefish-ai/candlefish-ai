import { NextRequest } from 'next/server';
import { POST as handleWebhook, GET as getRecentWebhooks } from '@/app/api/webhooks/salesforce/route';
import { getSecretsManager } from '@/lib/services/secrets-manager';
import crypto from 'crypto';

// Mock dependencies
jest.mock('@/lib/services/secrets-manager');
jest.mock('@/lib/services/salesforce');
jest.mock('@/lib/logging/simple-logger');

const mockSecretsManager = {
  getSecrets: jest.fn(),
};

(getSecretsManager as jest.Mock).mockReturnValue(mockSecretsManager);

const mockSalesforceService = {
  cache: {
    get: jest.fn(),
    set: jest.fn(),
    lpush: jest.fn(),
    ltrim: jest.fn(),
    lrange: jest.fn(),
  },
  clearContactCaches: jest.fn(),
  clearAccountCaches: jest.fn(),
  clearOpportunityCaches: jest.fn(),
  clearEstimateCaches: jest.fn(),
};

// Mock the salesforceService
jest.doMock('@/lib/services/salesforce', () => ({
  salesforceService: mockSalesforceService,
}));

describe('Salesforce Webhook API', () => {
  const webhookSecret = 'test_webhook_secret_123';

  beforeEach(() => {
    jest.clearAllMocks();
    mockSecretsManager.getSecrets.mockResolvedValue({
      salesforce: {
        webhookSecret,
      },
    });
  });

  const createSignature = (payload: string, secret: string): string => {
    return 'sha256=' + crypto.createHmac('sha256', secret).update(payload).digest('hex');
  };

  const createMockWebhookPayload = (type: string, action: string, data: any) => ({
    sobject: {
      Id: data.Id,
      attributes: {
        type,
        url: `/services/data/v62.0/sobjects/${type}/${data.Id}`,
      },
      ...data,
    },
    event: {
      type: action,
      createdDate: new Date().toISOString(),
      replayId: Math.floor(Math.random() * 1000000),
    },
    schema: 'urn:salesforce:sobject:created',
  });

  describe('Webhook Security', () => {
    it('should reject requests without signature', async () => {
      const payload = JSON.stringify(createMockWebhookPayload('Contact', 'created', { Id: 'contact123' }));\n\n      const request = new NextRequest('http://localhost/api/webhooks/salesforce', {\n        method: 'POST',\n        body: payload,\n      });\n\n      const response = await handleWebhook(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error).toBe('Missing signature');\n    });\n\n    it('should reject requests with invalid signature', async () => {\n      const payload = JSON.stringify(createMockWebhookPayload('Contact', 'created', { Id: 'contact123' }));\n      const invalidSignature = 'sha256=invalid_signature';\n\n      const request = new NextRequest('http://localhost/api/webhooks/salesforce', {\n        method: 'POST',\n        body: payload,\n        headers: {\n          'x-salesforce-signature': invalidSignature,\n        },\n      });\n\n      const response = await handleWebhook(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error).toBe('Invalid signature');\n    });\n\n    it('should accept requests with valid signature', async () => {\n      const mockData = { Id: 'contact123', Name: 'John Doe' };\n      const payload = JSON.stringify(createMockWebhookPayload('Contact', 'created', mockData));\n      const validSignature = createSignature(payload, webhookSecret);\n\n      mockSalesforceService.clearContactCaches.mockResolvedValue();\n      mockSalesforceService.cache.set.mockResolvedValue();\n      mockSalesforceService.cache.lpush.mockResolvedValue();\n      mockSalesforceService.cache.ltrim.mockResolvedValue();\n\n      const request = new NextRequest('http://localhost/api/webhooks/salesforce', {\n        method: 'POST',\n        body: payload,\n        headers: {\n          'x-salesforce-signature': validSignature,\n        },\n      });\n\n      const response = await handleWebhook(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.message).toBe('Webhook processed successfully');\n    });\n\n    it('should handle missing webhook secret', async () => {\n      mockSecretsManager.getSecrets.mockResolvedValue({\n        salesforce: {}, // No webhook secret\n      });\n\n      const payload = JSON.stringify(createMockWebhookPayload('Contact', 'created', { Id: 'contact123' }));\n      const signature = createSignature(payload, webhookSecret);\n\n      const request = new NextRequest('http://localhost/api/webhooks/salesforce', {\n        method: 'POST',\n        body: payload,\n        headers: {\n          'x-salesforce-signature': signature,\n        },\n      });\n\n      const response = await handleWebhook(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.error).toBe('Webhook not configured');\n    });\n  });\n\n  describe('Contact Webhooks', () => {\n    it('should handle contact created webhook', async () => {\n      const mockContact = {\n        Id: 'contact123',\n        Name: 'John Doe',\n        Email: 'john@example.com',\n      };\n\n      const payload = JSON.stringify(createMockWebhookPayload('Contact', 'created', mockContact));\n      const signature = createSignature(payload, webhookSecret);\n\n      mockSalesforceService.clearContactCaches.mockResolvedValue();\n      mockSalesforceService.cache.set.mockResolvedValue();\n      mockSalesforceService.cache.lpush.mockResolvedValue();\n      mockSalesforceService.cache.ltrim.mockResolvedValue();\n\n      const request = new NextRequest('http://localhost/api/webhooks/salesforce', {\n        method: 'POST',\n        body: payload,\n        headers: {\n          'x-salesforce-signature': signature,\n        },\n      });\n\n      const response = await handleWebhook(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(mockSalesforceService.clearContactCaches).toHaveBeenCalled();\n    });\n\n    it('should handle contact updated webhook', async () => {\n      const mockContact = {\n        Id: 'contact123',\n        Name: 'John Doe Updated',\n        Email: 'john.updated@example.com',\n      };\n\n      const payload = JSON.stringify(createMockWebhookPayload('Contact', 'updated', mockContact));\n      const signature = createSignature(payload, webhookSecret);\n\n      mockSalesforceService.clearContactCaches.mockResolvedValue();\n      mockSalesforceService.cache.set.mockResolvedValue();\n      mockSalesforceService.cache.lpush.mockResolvedValue();\n      mockSalesforceService.cache.ltrim.mockResolvedValue();\n\n      const request = new NextRequest('http://localhost/api/webhooks/salesforce', {\n        method: 'POST',\n        body: payload,\n        headers: {\n          'x-salesforce-signature': signature,\n        },\n      });\n\n      const response = await handleWebhook(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(mockSalesforceService.clearContactCaches).toHaveBeenCalled();\n    });\n\n    it('should handle contact deleted webhook', async () => {\n      const mockContact = { Id: 'contact123' };\n\n      const payload = JSON.stringify(createMockWebhookPayload('Contact', 'deleted', mockContact));\n      const signature = createSignature(payload, webhookSecret);\n\n      mockSalesforceService.clearContactCaches.mockResolvedValue();\n      mockSalesforceService.cache.set.mockResolvedValue();\n      mockSalesforceService.cache.lpush.mockResolvedValue();\n      mockSalesforceService.cache.ltrim.mockResolvedValue();\n\n      const request = new NextRequest('http://localhost/api/webhooks/salesforce', {\n        method: 'POST',\n        body: payload,\n        headers: {\n          'x-salesforce-signature': signature,\n        },\n      });\n\n      const response = await handleWebhook(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(mockSalesforceService.clearContactCaches).toHaveBeenCalled();\n    });\n  });\n\n  describe('Account Webhooks', () => {\n    it('should handle account created webhook', async () => {\n      const mockAccount = {\n        Id: 'account123',\n        Name: 'Acme Corporation',\n        Industry: 'Technology',\n      };\n\n      const payload = JSON.stringify(createMockWebhookPayload('Account', 'created', mockAccount));\n      const signature = createSignature(payload, webhookSecret);\n\n      mockSalesforceService.clearAccountCaches.mockResolvedValue();\n      mockSalesforceService.cache.set.mockResolvedValue();\n      mockSalesforceService.cache.lpush.mockResolvedValue();\n      mockSalesforceService.cache.ltrim.mockResolvedValue();\n\n      const request = new NextRequest('http://localhost/api/webhooks/salesforce', {\n        method: 'POST',\n        body: payload,\n        headers: {\n          'x-salesforce-signature': signature,\n        },\n      });\n\n      const response = await handleWebhook(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(mockSalesforceService.clearAccountCaches).toHaveBeenCalled();\n    });\n\n    it('should handle account updated webhook', async () => {\n      const mockAccount = {\n        Id: 'account123',\n        Name: 'Acme Corporation Updated',\n        Industry: 'Manufacturing',\n      };\n\n      const payload = JSON.stringify(createMockWebhookPayload('Account', 'updated', mockAccount));\n      const signature = createSignature(payload, webhookSecret);\n\n      mockSalesforceService.clearAccountCaches.mockResolvedValue();\n      mockSalesforceService.cache.set.mockResolvedValue();\n      mockSalesforceService.cache.lpush.mockResolvedValue();\n      mockSalesforceService.cache.ltrim.mockResolvedValue();\n\n      const request = new NextRequest('http://localhost/api/webhooks/salesforce', {\n        method: 'POST',\n        body: payload,\n        headers: {\n          'x-salesforce-signature': signature,\n        },\n      });\n\n      const response = await handleWebhook(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(mockSalesforceService.clearAccountCaches).toHaveBeenCalled();\n    });\n  });\n\n  describe('Opportunity Webhooks', () => {\n    it('should handle opportunity created webhook', async () => {\n      const mockOpportunity = {\n        Id: 'opportunity123',\n        Name: 'Big Deal',\n        StageName: 'Prospecting',\n        Amount: 50000,\n      };\n\n      const payload = JSON.stringify(createMockWebhookPayload('Opportunity', 'created', mockOpportunity));\n      const signature = createSignature(payload, webhookSecret);\n\n      mockSalesforceService.clearOpportunityCaches.mockResolvedValue();\n      mockSalesforceService.cache.set.mockResolvedValue();\n      mockSalesforceService.cache.lpush.mockResolvedValue();\n      mockSalesforceService.cache.ltrim.mockResolvedValue();\n\n      const request = new NextRequest('http://localhost/api/webhooks/salesforce', {\n        method: 'POST',\n        body: payload,\n        headers: {\n          'x-salesforce-signature': signature,\n        },\n      });\n\n      const response = await handleWebhook(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(mockSalesforceService.clearOpportunityCaches).toHaveBeenCalled();\n    });\n  });\n\n  describe('PaintboxEstimate Webhooks', () => {\n    it('should handle estimate created webhook', async () => {\n      const mockEstimate = {\n        Id: 'estimate123',\n        Name: 'House Painting Estimate',\n        Status__c: 'Draft',\n        Total_Amount__c: 15000,\n      };\n\n      const payload = JSON.stringify(createMockWebhookPayload('PaintboxEstimate__c', 'created', mockEstimate));\n      const signature = createSignature(payload, webhookSecret);\n\n      mockSalesforceService.clearEstimateCaches.mockResolvedValue();\n      mockSalesforceService.cache.set.mockResolvedValue();\n      mockSalesforceService.cache.lpush.mockResolvedValue();\n      mockSalesforceService.cache.ltrim.mockResolvedValue();\n\n      const request = new NextRequest('http://localhost/api/webhooks/salesforce', {\n        method: 'POST',\n        body: payload,\n        headers: {\n          'x-salesforce-signature': signature,\n        },\n      });\n\n      const response = await handleWebhook(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(mockSalesforceService.clearEstimateCaches).toHaveBeenCalled();\n    });\n\n    it('should handle estimate updated webhook', async () => {\n      const mockEstimate = {\n        Id: 'estimate123',\n        Name: 'House Painting Estimate',\n        Status__c: 'Approved',\n        Total_Amount__c: 18000,\n      };\n\n      const payload = JSON.stringify(createMockWebhookPayload('PaintboxEstimate__c', 'updated', mockEstimate));\n      const signature = createSignature(payload, webhookSecret);\n\n      mockSalesforceService.clearEstimateCaches.mockResolvedValue();\n      mockSalesforceService.cache.set.mockResolvedValue();\n      mockSalesforceService.cache.lpush.mockResolvedValue();\n      mockSalesforceService.cache.ltrim.mockResolvedValue();\n\n      const request = new NextRequest('http://localhost/api/webhooks/salesforce', {\n        method: 'POST',\n        body: payload,\n        headers: {\n          'x-salesforce-signature': signature,\n        },\n      });\n\n      const response = await handleWebhook(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(mockSalesforceService.clearEstimateCaches).toHaveBeenCalled();\n    });\n  });\n\n  describe('Webhook Event Storage', () => {\n    it('should store webhook events for audit trail', async () => {\n      const mockData = { Id: 'contact123', Name: 'John Doe' };\n      const payload = JSON.stringify(createMockWebhookPayload('Contact', 'created', mockData));\n      const signature = createSignature(payload, webhookSecret);\n\n      mockSalesforceService.clearContactCaches.mockResolvedValue();\n      mockSalesforceService.cache.set.mockResolvedValue();\n      mockSalesforceService.cache.lpush.mockResolvedValue();\n      mockSalesforceService.cache.ltrim.mockResolvedValue();\n\n      const request = new NextRequest('http://localhost/api/webhooks/salesforce', {\n        method: 'POST',\n        body: payload,\n        headers: {\n          'x-salesforce-signature': signature,\n        },\n      });\n\n      const response = await handleWebhook(request);\n      \n      expect(response.status).toBe(200);\n      \n      // Check that event was stored\n      expect(mockSalesforceService.cache.set).toHaveBeenCalledWith(\n        expect.stringMatching(/^webhook:Contact:/),\n        expect.any(String),\n        24 * 60 * 60 // 24 hours\n      );\n      \n      // Check that recent events list was updated\n      expect(mockSalesforceService.cache.lpush).toHaveBeenCalledWith(\n        'webhook:recent',\n        expect.any(String)\n      );\n      \n      // Check that recent events list was trimmed\n      expect(mockSalesforceService.cache.ltrim).toHaveBeenCalledWith(\n        'webhook:recent',\n        0,\n        999\n      );\n    });\n  });\n\n  describe('Get Recent Webhooks', () => {\n    it('should return recent webhook events', async () => {\n      const mockRecentEvents = [\n        JSON.stringify({\n          id: 'contact123_123456',\n          type: 'Contact',\n          action: 'created',\n          timestamp: new Date().toISOString(),\n        }),\n        JSON.stringify({\n          id: 'account123_123457',\n          type: 'Account',\n          action: 'updated',\n          timestamp: new Date().toISOString(),\n        }),\n      ];\n\n      mockSalesforceService.cache.lrange.mockResolvedValue(mockRecentEvents);\n\n      const request = new NextRequest('http://localhost/api/webhooks/salesforce');\n      const response = await getRecentWebhooks(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.data).toHaveLength(2);\n      expect(data.count).toBe(2);\n      expect(mockSalesforceService.cache.lrange).toHaveBeenCalledWith(\n        'webhook:recent',\n        0,\n        49\n      );\n    });\n\n    it('should handle errors when getting recent webhooks', async () => {\n      mockSalesforceService.cache.lrange.mockRejectedValue(new Error('Redis error'));\n\n      const request = new NextRequest('http://localhost/api/webhooks/salesforce');\n      const response = await getRecentWebhooks(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('Failed to get webhook events');\n    });\n  });\n\n  describe('Malformed Requests', () => {\n    it('should handle invalid JSON payload', async () => {\n      const invalidPayload = 'invalid json{';\n      const signature = createSignature(invalidPayload, webhookSecret);\n\n      const request = new NextRequest('http://localhost/api/webhooks/salesforce', {\n        method: 'POST',\n        body: invalidPayload,\n        headers: {\n          'x-salesforce-signature': signature,\n        },\n      });\n\n      const response = await handleWebhook(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.error).toBe('Invalid JSON payload');\n    });\n\n    it('should handle unknown object types', async () => {\n      const mockData = { Id: 'unknown123' };\n      const payload = JSON.stringify(createMockWebhookPayload('UnknownObject', 'created', mockData));\n      const signature = createSignature(payload, webhookSecret);\n\n      mockSalesforceService.cache.set.mockResolvedValue();\n      mockSalesforceService.cache.lpush.mockResolvedValue();\n      mockSalesforceService.cache.ltrim.mockResolvedValue();\n\n      const request = new NextRequest('http://localhost/api/webhooks/salesforce', {\n        method: 'POST',\n        body: payload,\n        headers: {\n          'x-salesforce-signature': signature,\n        },\n      });\n\n      const response = await handleWebhook(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      // Should still store the event even for unknown types\n      expect(mockSalesforceService.cache.set).toHaveBeenCalled();\n    });\n  });\n\n  describe('Alternative Signature Headers', () => {\n    it('should accept x-hub-signature-256 header', async () => {\n      const mockData = { Id: 'contact123', Name: 'John Doe' };\n      const payload = JSON.stringify(createMockWebhookPayload('Contact', 'created', mockData));\n      const signature = createSignature(payload, webhookSecret);\n\n      mockSalesforceService.clearContactCaches.mockResolvedValue();\n      mockSalesforceService.cache.set.mockResolvedValue();\n      mockSalesforceService.cache.lpush.mockResolvedValue();\n      mockSalesforceService.cache.ltrim.mockResolvedValue();\n\n      const request = new NextRequest('http://localhost/api/webhooks/salesforce', {\n        method: 'POST',\n        body: payload,\n        headers: {\n          'x-hub-signature-256': signature,\n        },\n      });\n\n      const response = await handleWebhook(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n    });\n  });\n});
